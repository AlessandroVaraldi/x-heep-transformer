name: Publish Release

on:
  # Run when a (specific, see "if" below) PR is merged
  pull_request:
    types: [closed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: esl-epfl/x-heep/x-heep-toolchain

jobs:
  publish-release:
    # Only run for merged PRs from "release/" branches
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head_ref, 'release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get Tag from Branch
        id: get_tag
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head_ref }}"
          TAG_NAME="${BRANCH_NAME#release/}"
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # fallback for gh CLI
          TAG: ${{ steps.get_tag.outputs.tag }}
        run: |
          echo "Publishing release for tag: $TAG"
          gh release edit $TAG --draft=false

      - name: Delete Source Branch
        run: |
          git push -d origin $BRANCH_NAME

  tag-latest:
    name: Tag 'Latest' Docker Image
    needs: publish-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Get Tag from Branch
        id: get-tag
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head_ref }}"
          TAG_NAME="${BRANCH_NAME#release/}"
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, Re-tag, and Push 'latest' image
        env:
          IMAGE_ID: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          VERSION_TAG: ${{ steps.get-tag.outputs.tag }}
        run: |
          run: |
            docker pull $IMAGE_ID:$VERSION_TAG
            docker tag  $IMAGE_ID:$VERSION_TAG $IMAGE_ID:latest
            docker push $IMAGE_ID:latest
