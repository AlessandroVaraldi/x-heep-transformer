# Author: Luigi Giuffrida

ARG riscv=/tools/riscv
ARG verilator_version=5.040
ARG verible_version=v0.0-1824-ga3b5bedf

FROM debian:12-slim

# Set the build-time shell to bash
SHELL ["/bin/bash", "-c"]

# Set ARGs and ENVs
ARG riscv
ARG verilator_version
ARG verible_version
ENV RISCV=${riscv}
ENV VERILATOR_VERSION=${verilator_version}
ENV VERIBLE_VERSION=${verible_version}
ENV DEBIAN_FRONTEND=noninteractive

# Update PATH to include installed tools
# NOTE: use a dedicated variable here and append it to path in env.sh to prevent
#       conda from overriding the PATH at runtime
ENV TOOL_PATH=/tools/verible/verible-${VERIBLE_VERSION}/bin:/tools/verilator/${VERILATOR_VERSION}/bin:${RISCV}/bin

# Install build dependencies, build tools, then remove build-only dependencies
# to keep the final image smaller
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Runtime dependencies
    lcov libelf1 libelf-dev libftdi1-2 libssl-dev libglib2.0-dev libudev-dev libusb-1.0-0 \
    lsb-release texinfo bc zlib1g-dev picocom python3-venv python3-dev git \
    wget python3 build-essential make coreutils libfindbin-libs-perl g++ curl \
    # Build-time dependencies for tools
    autoconf autotools-dev libmpc-dev libmpfr-dev libgmp-dev gperf libtool patchutils \
    cmake flex bison libexpat-dev gawk ninja-build help2man libfl-dev

# Install standard GCC RISC-V toolchain
RUN mkdir -p ${RISCV} && \
    wget -qO- https://buildbot.embecosm.com/job/riscv32-gcc-ubuntu2204-release/10/artifact/riscv32-embecosm-ubuntu2204-gcc13.2.0.tar.gz | tar -xz -C ${RISCV} --strip-components=1

# # Install Clang RISC-V toolchain (missing zicsr support)
# RUN mkdir -p /tools/riscv-clang && \
#     wget -qO- https://buildbot.embecosm.com/job/riscv32-clang-ubuntu2204-release/18/artifact/riscv32-embecosm-ubuntu2204-clang16.0.2.tar.gz | tar -xz -C /tools/riscv-clang --strip-components=1
    
# Install Clang RISC-V toolchain (build from source)
RUN git clone https://github.com/llvm/llvm-project.git /tmp/llvm-project && \
    cd /tmp/llvm-project && git checkout llvmorg-21.1.3 && mkdir build && cd build && \
    cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${RISCV} -DLLVM_TARGETS_TO_BUILD="RISCV" ../llvm && \
    cmake --build . --target install -j8 && \
    rm -rf /tmp/llvm-project

# Install CORE-V GCC RISC-V toolchain
RUN mkdir -p /tools/riscv-corev && \
    wget -qO- https://buildbot.embecosm.com/job/corev-gcc-ubuntu2204/47/artifact/corev-openhw-gcc-ubuntu2204-20240530.tar.gz | tar -xz -C /tools/riscv-corev --strip-components=1

# Install Verilator
RUN git clone https://github.com/verilator/verilator.git /tmp/verilator && \
    cd /tmp/verilator && git checkout v${VERILATOR_VERSION} && \
    autoconf && ./configure --prefix=/tools/verilator/${VERILATOR_VERSION} && \
    make -j$(nproc) && make install && \
    rm -rf /tmp/verilator

# Install Verible
RUN wget -q https://github.com/chipsalliance/verible/releases/download/${VERIBLE_VERSION}/verible-${VERIBLE_VERSION}-Ubuntu-20.04-focal-x86_64.tar.gz -O /tmp/verible.tar.gz && \
    mkdir -p /tools/verible && tar -xf /tmp/verible.tar.gz -C /tools/verible/ && \
    rm /tmp/verible.tar.gz

# Clean up build-time dependencies and apt cache
RUN apt-get purge -y --auto-remove autoconf autotools-dev build-essential libfl-dev && \
    rm -rf /var/lib/apt/lists/*

# Install conda
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \
    bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh

# Install conda environment
COPY environment.yml .
RUN /opt/conda/bin/conda tos accept && \
    /opt/conda/bin/conda config --set auto_activate_base false && \
    /opt/conda/bin/conda env create -f environment.yml && \
    rm environment.yml

# Copy profile scripts (conda initialization and welcome message)
COPY util/docker/env.sh util/docker/motd.sh /etc/profile.d/
RUN chmod +x /etc/profile.d/env.sh /etc/profile.d/motd.sh

# Mark X-HEEP repo as a safe so new version of git don't complain when running util/git-diff.py
RUN git config --global --add safe.directory /workspace/x-heep
WORKDIR /workspace/x-heep

# Copy and set up the entrypoint script
COPY util/docker/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Default command to run when no other command is specified
CMD ["/bin/bash", "-l"]
