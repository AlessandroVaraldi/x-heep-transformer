
/home/jose/ESL/x-heep/ides/ses/Output/Debug External/Exe/helloworld.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <__vector_start>:

.section .vectors, "ax"
.option norvc
vector_table:
	//  0 : exception Handler and user software interrupt
	j handler_exception
   0:	1590106f          	j	1958 <handler_exception>
	//  1 : supervisor software interrupt
	j __no_irq_handler
   4:	3c30106f          	j	1bc6 <__no_irq_handler>
	//  2 : unmapped
	j __no_irq_handler
   8:	3bf0106f          	j	1bc6 <__no_irq_handler>
	//  3 : machine software interrupt handler
	j handler_irq_software
   c:	0610106f          	j	186c <handler_irq_software>
	//  4 : user timer interrupt
	j __no_irq_handler
  10:	3b70106f          	j	1bc6 <__no_irq_handler>
	//  5 : supervisor timer interrupt
	j __no_irq_handler
  14:	3b30106f          	j	1bc6 <__no_irq_handler>
	//  6 : unmapped
	j __no_irq_handler
  18:	3af0106f          	j	1bc6 <__no_irq_handler>
	//  7 : machine timer interrupt handler
	j handler_irq_timer
  1c:	07d0106f          	j	1898 <handler_irq_timer>
	//  8 : user external interrupt
	j __no_irq_handler
  20:	3a70106f          	j	1bc6 <__no_irq_handler>
	//  9 : supervisor external interrupt
	j __no_irq_handler
  24:	3a30106f          	j	1bc6 <__no_irq_handler>
	// 10 : unmapped
	j __no_irq_handler
  28:	39f0106f          	j	1bc6 <__no_irq_handler>
	// 11 : machine external interrupt handler
	j handler_irq_external
  2c:	3d80106f          	j	1404 <handler_irq_external>
	// 12 : unmapped
	j __no_irq_handler
  30:	3970106f          	j	1bc6 <__no_irq_handler>
	// 13 : unmapped
	j __no_irq_handler
  34:	3930106f          	j	1bc6 <__no_irq_handler>
	// 14 : unmapped
	j __no_irq_handler
  38:	38f0106f          	j	1bc6 <__no_irq_handler>
	// 15 : unmapped
	j __no_irq_handler
  3c:	38b0106f          	j	1bc6 <__no_irq_handler>
	// 16 : fast interrupt - timer_1
	j handler_irq_fast_timer_1
  40:	1a10006f          	j	9e0 <handler_irq_fast_timer_1>
	// 17 : fast interrupt - timer_2
	j handler_irq_fast_timer_2
  44:	1f10006f          	j	a34 <handler_irq_fast_timer_2>
	// 18 : fast interrupt - timer_3
	j handler_irq_fast_timer_3
  48:	2410006f          	j	a88 <handler_irq_fast_timer_3>
	// 19 : fast interrupt - dma
	j handler_irq_fast_dma
  4c:	2910006f          	j	adc <handler_irq_fast_dma>
	// 20 : fast interrupt - spi
	j handler_irq_fast_spi
  50:	2e10006f          	j	b30 <handler_irq_fast_spi>
	// 21 : fast interrupt - spi_flash
	j handler_irq_fast_spi_flash
  54:	3310006f          	j	b84 <handler_irq_fast_spi_flash>
	// 22 : fast interrupt - gpio_0
	j handler_irq_fast_gpio_0
  58:	3810006f          	j	bd8 <handler_irq_fast_gpio_0>
	// 23 : fast interrupt - gpio_1
	j handler_irq_fast_gpio_1
  5c:	3d10006f          	j	c2c <handler_irq_fast_gpio_1>
	// 24 : fast interrupt - gpio_2
	j handler_irq_fast_gpio_2
  60:	4210006f          	j	c80 <handler_irq_fast_gpio_2>
	// 25 : fast interrupt - gpio_3
	j handler_irq_fast_gpio_3
  64:	4710006f          	j	cd4 <handler_irq_fast_gpio_3>
	// 26 : fast interrupt - gpio_4
	j handler_irq_fast_gpio_4
  68:	4c10006f          	j	d28 <handler_irq_fast_gpio_4>
	// 27 : fast interrupt - gpio_5
	j handler_irq_fast_gpio_5
  6c:	5110006f          	j	d7c <handler_irq_fast_gpio_5>
	// 28 : fast interrupt - gpio_6
	j handler_irq_fast_gpio_6
  70:	5650006f          	j	dd4 <handler_irq_fast_gpio_6>
	// 29 : fast interrupt - gpio_7
	j handler_irq_fast_gpio_7
  74:	5b50006f          	j	e28 <handler_irq_fast_gpio_7>
	// 30 : fast interrupt - unmapped
	j __no_irq_handler
  78:	34f0106f          	j	1bc6 <__no_irq_handler>
	// vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
	j __no_irq_handler
  7c:	34b0106f          	j	1bc6 <__no_irq_handler>
	// 64-32 : not connected on Ibex
	j verification_irq_handler
  80:	3cf0106f          	j	1c4e <verification_irq_handler>
	j __no_irq_handler
  84:	3430106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  88:	33f0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  8c:	33b0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  90:	3370106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  94:	3330106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  98:	32f0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  9c:	32b0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  a0:	3270106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  a4:	3230106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  a8:	31f0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  ac:	31b0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  b0:	3170106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  b4:	3130106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  b8:	30f0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  bc:	30b0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  c0:	3070106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  c4:	3030106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  c8:	2ff0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  cc:	2fb0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  d0:	2f70106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  d4:	2f30106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  d8:	2ef0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  dc:	2eb0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  e0:	2e70106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  e4:	2e30106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  e8:	2df0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  ec:	2db0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  f0:	2d70106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  f4:	2d30106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  f8:	2cf0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
  fc:	2cb0106f          	j	1bc6 <__no_irq_handler>
	j __no_irq_handler
 100:	2c70106f          	j	1bc6 <__no_irq_handler>

Disassembly of section .init:

00000180 <_start>:

_start:
/* initialize global pointer */
.option push
.option norelax
1: auipc gp, %pcrel_hi(__global_pointer$)
 180:	0000d197          	auipc	gp,0xd
   addi  gp, gp, %pcrel_lo(1b)
 184:	31018193          	addi	gp,gp,784 # d490 <__global_pointer$>
.option pop

/* initialize stack pointer */
   la sp, _sp
 188:	0000e117          	auipc	sp,0xe
 18c:	d8810113          	addi	sp,sp,-632 # df10 <_sp>

/* set the frequency */
   li a0, SOC_CTRL_START_ADDRESS
 190:	20000537          	lui	a0,0x20000
   li a2, REFERENCE_CLOCK_Hz
 194:	01313637          	lui	a2,0x1313
 198:	d0060613          	addi	a2,a2,-768 # 1312d00 <_sp+0x1304df0>
   sw a2, SOC_CTRL_SYSTEM_FREQUENCY_HZ_REG_OFFSET(a0)
 19c:	cd50                	sw	a2,28(a0)
    sub    a2, a2, a0
    li     a1, 0
    call   memset
#else
/* clear the bss segment */
   la a0, __bss_start
 19e:	0000d517          	auipc	a0,0xd
 1a2:	b6a50513          	addi	a0,a0,-1174 # cd08 <errno>
   la a2, __bss_end
 1a6:	0000d617          	auipc	a2,0xd
 1aa:	d6a60613          	addi	a2,a2,-662 # cf10 <__BSS_END__>
   sub a2, a2, a0
 1ae:	8e09                	sub	a2,a2,a0
   li a1, 0
 1b0:	4581                	li	a1,0
   call memset
 1b2:	355010ef          	jal	ra,1d06 <memset>
    blt a1, a2, loop_init_data
    end_init_data:
#endif

/* set vector table address and vectored mode */
    la a0, __vector_start
 1b6:	00000517          	auipc	a0,0x0
 1ba:	e4a50513          	addi	a0,a0,-438 # 0 <__vector_start>
    ori a0, a0, 0x1
 1be:	00156513          	ori	a0,a0,1
    csrw mtvec, a0
 1c2:	30551073          	csrw	mtvec,a0

/* new-style constructors and destructors */
    la a0, __libc_fini_array
 1c6:	00002517          	auipc	a0,0x2
 1ca:	a9650513          	addi	a0,a0,-1386 # 1c5c <__libc_fini_array>
    call atexit
 1ce:	285010ef          	jal	ra,1c52 <atexit>
    call __libc_init_array
 1d2:	2c1010ef          	jal	ra,1c92 <__libc_init_array>

/* call main */
    lw a0, 0(sp)                    /* a0 = argc */
 1d6:	4502                	lw	a0,0(sp)
    addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
 1d8:	004c                	addi	a1,sp,4
    li a2, 0                        /* a2 = envp = NULL */
 1da:	4601                	li	a2,0
    call main
 1dc:	038000ef          	jal	ra,214 <main>
    tail exit
 1e0:	00c0006f          	j	1ec <exit>

000001e4 <_init>:
.global _init
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
    call init
 1e4:	7ea010ef          	jal	ra,19ce <init>

000001e8 <_fini>:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
    ret
 1e8:	8082                	ret

Disassembly of section .text:

000001ec <exit>:
     1ec:	1141                	addi	sp,sp,-16
     1ee:	6789                	lui	a5,0x2
     1f0:	c422                	sw	s0,8(sp)
     1f2:	c606                	sw	ra,12(sp)
     1f4:	1b278793          	addi	a5,a5,434 # 21b2 <__call_exitprocs>
     1f8:	842a                	mv	s0,a0
     1fa:	c781                	beqz	a5,202 <exit+0x16>
     1fc:	4581                	li	a1,0
     1fe:	7b5010ef          	jal	ra,21b2 <__call_exitprocs>
     202:	67b5                	lui	a5,0xd
     204:	cf87a503          	lw	a0,-776(a5) # ccf8 <_global_impure_ptr>
     208:	551c                	lw	a5,40(a0)
     20a:	c391                	beqz	a5,20e <exit+0x22>
     20c:	9782                	jalr	a5
     20e:	8522                	mv	a0,s0
     210:	019010ef          	jal	ra,1a28 <_exit>

00000214 <main>:
#include <stdlib.h>

int main(int argc, char *argv[])
{
    /* write something to stdout */
    printf("hello world!\n");
     214:	6535                	lui	a0,0xd
{
     216:	1141                	addi	sp,sp,-16
    printf("hello world!\n");
     218:	9d850513          	addi	a0,a0,-1576 # c9d8 <__udivdi3+0x8f5a>
{
     21c:	c606                	sw	ra,12(sp)
    printf("hello world!\n");
     21e:	449010ef          	jal	ra,1e66 <puts>
    return EXIT_SUCCESS;
}
     222:	40b2                	lw	ra,12(sp)
     224:	4501                	li	a0,0
     226:	0141                	addi	sp,sp,16
     228:	8082                	ret

0000022a <bitfield_field32_read>:
 * @param field Field to read out from.
 * @return Zero-extended `field` from `bitfield`.
 */
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_read(uint32_t bitfield,
                                      bitfield_field32_t field) {
     22a:	1141                	addi	sp,sp,-16
  return (bitfield >> field.index) & field.mask;
     22c:	00c55533          	srl	a0,a0,a2
}
     230:	8d6d                	and	a0,a0,a1
     232:	0141                	addi	sp,sp,16
     234:	8082                	ret

00000236 <bitfield_field32_write>:
 */
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
     236:	00c597b3          	sll	a5,a1,a2
     23a:	fff7c793          	not	a5,a5
  bitfield |= (value & field.mask) << field.index;
     23e:	8eed                	and	a3,a3,a1
                                       uint32_t value) {
     240:	1141                	addi	sp,sp,-16
  bitfield &= ~(field.mask << field.index);
     242:	8fe9                	and	a5,a5,a0
  bitfield |= (value & field.mask) << field.index;
     244:	00c69533          	sll	a0,a3,a2
  return bitfield;
}
     248:	8d5d                	or	a0,a0,a5
     24a:	0141                	addi	sp,sp,16
     24c:	8082                	ret

0000024e <bitfield_bit32_to_field32>:
 * @param bit_index The corresponding single bit to turn into a field.
 * @return A 1-bit field that corresponds to `bit_index`.
 */
BITFIELD_WARN_UNUSED_RESULT
inline bitfield_field32_t bitfield_bit32_to_field32(
    bitfield_bit32_index_t bit_index) {
     24e:	1141                	addi	sp,sp,-16
     250:	85aa                	mv	a1,a0
  return (bitfield_field32_t){
      .mask = 0x1, .index = bit_index,
  };
}
     252:	4505                	li	a0,1
     254:	0141                	addi	sp,sp,16
     256:	8082                	ret

00000258 <bitfield_bit32_read>:
  return (bitfield >> field.index) & field.mask;
     258:	00b55533          	srl	a0,a0,a1
BITFIELD_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
}
     25c:	8905                	andi	a0,a0,1
     25e:	8082                	ret

00000260 <bitfield_bit32_write>:
  bitfield &= ~(field.mask << field.index);
     260:	4785                	li	a5,1
     262:	00b797b3          	sll	a5,a5,a1
     266:	fff7c793          	not	a5,a5
     26a:	8d7d                	and	a0,a0,a5
  bitfield |= (value & field.mask) << field.index;
     26c:	00b61633          	sll	a2,a2,a1
inline uint32_t bitfield_bit32_write(uint32_t bitfield,
                                     bitfield_bit32_index_t bit_index,
                                     bool value) {
  return bitfield_field32_write(bitfield, bitfield_bit32_to_field32(bit_index),
                                value ? 0x1u : 0x0u);
}
     270:	8d51                	or	a0,a0,a2
     272:	8082                	ret

00000274 <bitfield_find_first_set32>:
 *
 * @param bitfield Bitfield to find the first set bit in.
 * @return One plus the index of the least-significant 1-bit of `bitfield`.
 */
BITFIELD_WARN_UNUSED_RESULT
inline int32_t bitfield_find_first_set32(int32_t bitfield) {
     274:	1141                	addi	sp,sp,-16
     276:	c606                	sw	ra,12(sp)
  return __builtin_ffs(bitfield);
     278:	332030ef          	jal	ra,35aa <__ffssi2>
}
     27c:	40b2                	lw	ra,12(sp)
     27e:	0141                	addi	sp,sp,16
     280:	8082                	ret

00000282 <bitfield_count_leading_zeroes32>:
 * @param bitfield Bitfield to count leading 0-bits from.
 * @return The number of leading 0-bits in `bitfield`.
 */
BITFIELD_WARN_UNUSED_RESULT
inline int32_t bitfield_count_leading_zeroes32(uint32_t bitfield) {
  return (bitfield != 0) ? __builtin_clz(bitfield) : 32;
     282:	c901                	beqz	a0,292 <bitfield_count_leading_zeroes32+0x10>
inline int32_t bitfield_count_leading_zeroes32(uint32_t bitfield) {
     284:	1141                	addi	sp,sp,-16
     286:	c606                	sw	ra,12(sp)
  return (bitfield != 0) ? __builtin_clz(bitfield) : 32;
     288:	360030ef          	jal	ra,35e8 <__clzsi2>
}
     28c:	40b2                	lw	ra,12(sp)
     28e:	0141                	addi	sp,sp,16
     290:	8082                	ret
  return (bitfield != 0) ? __builtin_clz(bitfield) : 32;
     292:	02000513          	li	a0,32
}
     296:	8082                	ret

00000298 <bitfield_count_trailing_zeroes32>:
 * @param bitfield Bitfield to count trailing 0-bits from.
 * @return The number of trailing 0-bits in `bitfield`.
 */
BITFIELD_WARN_UNUSED_RESULT
inline int32_t bitfield_count_trailing_zeroes32(uint32_t bitfield) {
  return (bitfield != 0) ? __builtin_ctz(bitfield) : 32;
     298:	c901                	beqz	a0,2a8 <bitfield_count_trailing_zeroes32+0x10>
inline int32_t bitfield_count_trailing_zeroes32(uint32_t bitfield) {
     29a:	1141                	addi	sp,sp,-16
     29c:	c606                	sw	ra,12(sp)
  return (bitfield != 0) ? __builtin_ctz(bitfield) : 32;
     29e:	384030ef          	jal	ra,3622 <__ctzsi2>
}
     2a2:	40b2                	lw	ra,12(sp)
     2a4:	0141                	addi	sp,sp,16
     2a6:	8082                	ret
  return (bitfield != 0) ? __builtin_ctz(bitfield) : 32;
     2a8:	02000513          	li	a0,32
}
     2ac:	8082                	ret

000002ae <bitfield_popcount32>:
 *
 * @param bitfield Bitfield to count 1-bits from.
 * @return The number of 1-bits in `bitfield`.
 */
BITFIELD_WARN_UNUSED_RESULT
inline int32_t bitfield_popcount32(uint32_t bitfield) {
     2ae:	1141                	addi	sp,sp,-16
     2b0:	c606                	sw	ra,12(sp)
  return __builtin_popcount(bitfield);
     2b2:	3aa030ef          	jal	ra,365c <__popcountsi2>
}
     2b6:	40b2                	lw	ra,12(sp)
     2b8:	0141                	addi	sp,sp,16
     2ba:	8082                	ret

000002bc <bitfield_parity32>:
 *
 * @param bitfield Bitfield to count 1-bits from.
 * @return The number of 1-bits in `bitfield`, modulo 2.
 */
BITFIELD_WARN_UNUSED_RESULT
inline int32_t bitfield_parity32(uint32_t bitfield) {
     2bc:	1141                	addi	sp,sp,-16
     2be:	c606                	sw	ra,12(sp)
  return __builtin_parity(bitfield);
     2c0:	3de030ef          	jal	ra,369e <__paritysi2>
}
     2c4:	40b2                	lw	ra,12(sp)
     2c6:	0141                	addi	sp,sp,16
     2c8:	8082                	ret

000002ca <bitfield_byteswap32>:
 *
 * @param bitfield Bitfield to reverse bytes of.
 * @return `bitfield` with the order of bytes reversed.
 */
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_byteswap32(uint32_t bitfield) {
     2ca:	1141                	addi	sp,sp,-16
     2cc:	c606                	sw	ra,12(sp)
  return __builtin_bswap32(bitfield);
     2ce:	3f2030ef          	jal	ra,36c0 <__bswapsi2>
}
     2d2:	40b2                	lw	ra,12(sp)
     2d4:	0141                	addi	sp,sp,16
     2d6:	8082                	ret

000002d8 <read_32>:
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
  return val;
}
     2d8:	4108                	lw	a0,0(a0)
     2da:	8082                	ret

000002dc <write_32>:
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
     2dc:	c188                	sw	a0,0(a1)
}
     2de:	8082                	ret

000002e0 <memrchr>:
  }
  return NULL;
}
#endif  // !defined(HOST_BUILD)

void *memrchr(const void *ptr, int value, size_t len) {
     2e0:	87aa                	mv	a5,a0
  uint8_t *ptr8 = (uint8_t *)ptr;
  uint8_t value8 = (uint8_t)value;
     2e2:	0ff5f593          	zext.b	a1,a1
  for (size_t i = 0; i < len; ++i) {
     2e6:	962a                	add	a2,a2,a0
     2e8:	00c79463          	bne	a5,a2,2f0 <memrchr+0x10>
    size_t idx = len - i - 1;
    if (ptr8[idx] == value8) {
      return ptr8 + idx;
    }
  }
  return NULL;
     2ec:	4501                	li	a0,0
     2ee:	a039                	j	2fc <memrchr+0x1c>
    if (ptr8[idx] == value8) {
     2f0:	fff64703          	lbu	a4,-1(a2)
     2f4:	167d                	addi	a2,a2,-1
     2f6:	8532                	mv	a0,a2
     2f8:	feb718e3          	bne	a4,a1,2e8 <memrchr+0x8>
}
     2fc:	8082                	ret

000002fe <mmio_region_memcpy32>:
 * @param from_mmio if true, copy from MMIO to main memory. Otherwise, copy from
 * main memory to MMIO.
 */
static void mmio_region_memcpy32(mmio_region_t base, uint32_t offset, void *buf,
                                 size_t len, bool from_mmio) {
  if (len == 0) {
     2fe:	caf9                	beqz	a3,3d4 <mmio_region_memcpy32+0xd6>
                                 size_t len, bool from_mmio) {
     300:	7139                	addi	sp,sp,-64
     302:	dc22                	sw	s0,56(sp)
     304:	da26                	sw	s1,52(sp)
     306:	d84a                	sw	s2,48(sp)
     308:	d256                	sw	s5,36(sp)
     30a:	d05a                	sw	s6,32(sp)
     30c:	de06                	sw	ra,60(sp)
     30e:	d64e                	sw	s3,44(sp)
     310:	d452                	sw	s4,40(sp)
     312:	ce5e                	sw	s7,28(sp)
     314:	cc62                	sw	s8,24(sp)
  return addr % alignof(uint32_t);
     316:	0035f793          	andi	a5,a1,3
     31a:	8aaa                	mv	s5,a0
     31c:	892e                	mv	s2,a1
     31e:	84b2                	mv	s1,a2
     320:	8436                	mv	s0,a3
     322:	8b3a                	mv	s6,a4
  }

  // First, bring the MMIO address into word alignment, so we can do
  // full-word I/O rather than partial word I/O.
  ptrdiff_t misalignment = misalignment32_of(offset);
  if (misalignment != 0) {
     324:	cf8d                	beqz	a5,35e <mmio_region_memcpy32+0x60>
    // The number of bytes missing to bring `offset` back into alignment.
    // For example, 0x3 has misalignment of 3 and realignment of 1.
    ptrdiff_t realignment = sizeof(uint32_t) - misalignment;
     326:	4991                	li	s3,4
     328:	40f989b3          	sub	s3,s3,a5
     32c:	0136f363          	bgeu	a3,s3,332 <mmio_region_memcpy32+0x34>
     330:	89b6                	mv	s3,a3
      realignment = len;
    }

    // Converts `offset`, which points to a subword boundary, to point to the
    // start of the current word it points into.
    ptrdiff_t current_word_offset = offset - misalignment;
     332:	40f90a33          	sub	s4,s2,a5
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
MMIO_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     336:	ffca7a13          	andi	s4,s4,-4
     33a:	9a56                	add	s4,s4,s5
     33c:	000a2703          	lw	a4,0(s4)

    // Act on only to a suffix of `current_word`, corresponding to the necessary
    // realignment.
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
    if (from_mmio) {
      memcpy(buf, current_byte, realignment);
     340:	864e                	mv	a2,s3
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
     342:	c63a                	sw	a4,12(sp)
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
     344:	0078                	addi	a4,sp,12
     346:	00f70533          	add	a0,a4,a5
    if (from_mmio) {
     34a:	020b0963          	beqz	s6,37c <mmio_region_memcpy32+0x7e>
      memcpy(buf, current_byte, realignment);
     34e:	85aa                	mv	a1,a0
     350:	8526                	mv	a0,s1
     352:	19f010ef          	jal	ra,1cf0 <memcpy>
      // When writing, we need to write the modified word.
      memcpy(current_byte, buf, realignment);
      mmio_region_write32(base, current_word_offset, current_word);
    }

    offset += realignment;
     356:	994e                	add	s2,s2,s3
    buf += realignment;
     358:	94ce                	add	s1,s1,s3
    len -= realignment;
     35a:	41340433          	sub	s0,s0,s3
  while (len > 0) {
    // At the end, we may not have a full word to copy, but it's otherwise
    // the same case as a full word, since we're already word aligned (if
    // this would be a subword read, it would end the loop anyway).
    uint32_t bytes_to_copy = sizeof(uint32_t);
    if (bytes_to_copy > len) {
     35e:	4b8d                	li	s7,3
    uint32_t bytes_to_copy = sizeof(uint32_t);
     360:	4c11                	li	s8,4
  while (len > 0) {
     362:	e405                	bnez	s0,38a <mmio_region_memcpy32+0x8c>

    offset += bytes_to_copy;
    buf += bytes_to_copy;
    len -= bytes_to_copy;
  }
}
     364:	50f2                	lw	ra,60(sp)
     366:	5462                	lw	s0,56(sp)
     368:	54d2                	lw	s1,52(sp)
     36a:	5942                	lw	s2,48(sp)
     36c:	59b2                	lw	s3,44(sp)
     36e:	5a22                	lw	s4,40(sp)
     370:	5a92                	lw	s5,36(sp)
     372:	5b02                	lw	s6,32(sp)
     374:	4bf2                	lw	s7,28(sp)
     376:	4c62                	lw	s8,24(sp)
     378:	6121                	addi	sp,sp,64
     37a:	8082                	ret
      memcpy(current_byte, buf, realignment);
     37c:	85a6                	mv	a1,s1
     37e:	173010ef          	jal	ra,1cf0 <memcpy>
      mmio_region_write32(base, current_word_offset, current_word);
     382:	47b2                	lw	a5,12(sp)
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     384:	00fa2023          	sw	a5,0(s4)
     388:	b7f9                	j	356 <mmio_region_memcpy32+0x58>
    uint32_t bytes_to_copy = sizeof(uint32_t);
     38a:	4991                	li	s3,4
    if (bytes_to_copy > len) {
     38c:	008be363          	bltu	s7,s0,392 <mmio_region_memcpy32+0x94>
     390:	89a2                	mv	s3,s0
    uint32_t current_word = 0;
     392:	c602                	sw	zero,12(sp)
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
     394:	ffc97a13          	andi	s4,s2,-4
     398:	000b1463          	bnez	s6,3a0 <mmio_region_memcpy32+0xa2>
     39c:	03898263          	beq	s3,s8,3c0 <mmio_region_memcpy32+0xc2>
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     3a0:	014a87b3          	add	a5,s5,s4
     3a4:	439c                	lw	a5,0(a5)
      current_word = mmio_region_read32(base, offset);
     3a6:	c63e                	sw	a5,12(sp)
    if (from_mmio) {
     3a8:	000b0c63          	beqz	s6,3c0 <mmio_region_memcpy32+0xc2>
      memcpy(buf, &current_word, bytes_to_copy);
     3ac:	864e                	mv	a2,s3
     3ae:	006c                	addi	a1,sp,12
     3b0:	8526                	mv	a0,s1
     3b2:	13f010ef          	jal	ra,1cf0 <memcpy>
    offset += bytes_to_copy;
     3b6:	994e                	add	s2,s2,s3
    buf += bytes_to_copy;
     3b8:	94ce                	add	s1,s1,s3
    len -= bytes_to_copy;
     3ba:	41340433          	sub	s0,s0,s3
     3be:	b755                	j	362 <mmio_region_memcpy32+0x64>
      memcpy(&current_word, buf, bytes_to_copy);
     3c0:	864e                	mv	a2,s3
     3c2:	85a6                	mv	a1,s1
     3c4:	0068                	addi	a0,sp,12
     3c6:	12b010ef          	jal	ra,1cf0 <memcpy>
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     3ca:	47b2                	lw	a5,12(sp)
     3cc:	9a56                	add	s4,s4,s5
     3ce:	00fa2023          	sw	a5,0(s4)
     3d2:	b7d5                	j	3b6 <mmio_region_memcpy32+0xb8>
     3d4:	8082                	ret

000003d6 <mmio_region_read8>:
  return ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)];
     3d6:	952e                	add	a0,a0,a1
     3d8:	00054503          	lbu	a0,0(a0)
}
     3dc:	8082                	ret

000003de <mmio_region_read32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     3de:	99f1                	andi	a1,a1,-4
     3e0:	952e                	add	a0,a0,a1
     3e2:	4108                	lw	a0,0(a0)
}
     3e4:	8082                	ret

000003e6 <mmio_region_write8>:
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
     3e6:	952e                	add	a0,a0,a1
     3e8:	00c50023          	sb	a2,0(a0)
}
     3ec:	8082                	ret

000003ee <mmio_region_write32>:
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     3ee:	99f1                	andi	a1,a1,-4
     3f0:	952e                	add	a0,a0,a1
     3f2:	c110                	sw	a2,0(a0)
}
     3f4:	8082                	ret

000003f6 <mmio_region_read_mask32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     3f6:	99f1                	andi	a1,a1,-4
     3f8:	952e                	add	a0,a0,a1
     3fa:	411c                	lw	a5,0(a0)
  return (bitfield >> field.index) & field.mask;
     3fc:	00d7d7b3          	srl	a5,a5,a3
inline uint32_t mmio_region_read_mask32(mmio_region_t base, ptrdiff_t offset,
                                        uint32_t mask, uint32_t mask_index) {
  return bitfield_field32_read(
      mmio_region_read32(base, offset),
      (bitfield_field32_t){.mask = mask, .index = mask_index});
}
     400:	00c7f533          	and	a0,a5,a2
     404:	8082                	ret

00000406 <mmio_region_get_bit32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     406:	99f1                	andi	a1,a1,-4
     408:	952e                	add	a0,a0,a1
     40a:	4108                	lw	a0,0(a0)
     40c:	00c55533          	srl	a0,a0,a2
MMIO_WARN_UNUSED_RESULT
MMIO_DEPRECATED
inline bool mmio_region_get_bit32(mmio_region_t base, ptrdiff_t offset,
                                  uint32_t bit_index) {
  return bitfield_bit32_read(mmio_region_read32(base, offset), bit_index);
}
     410:	8905                	andi	a0,a0,1
     412:	8082                	ret

00000414 <mmio_region_nonatomic_clear_mask32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     414:	99f1                	andi	a1,a1,-4
     416:	952e                	add	a0,a0,a1
     418:	411c                	lw	a5,0(a0)
  bitfield &= ~(field.mask << field.index);
     41a:	00d61633          	sll	a2,a2,a3
     41e:	fff64613          	not	a2,a2
     422:	8e7d                	and	a2,a2,a5
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     424:	c110                	sw	a2,0(a0)
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      0x0);
  mmio_region_write32(base, offset, register_value);
}
     426:	8082                	ret

00000428 <mmio_region_nonatomic_set_mask32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     428:	99f1                	andi	a1,a1,-4
     42a:	952e                	add	a0,a0,a1
     42c:	411c                	lw	a5,0(a0)
     42e:	00d61633          	sll	a2,a2,a3
  bitfield |= (value & field.mask) << field.index;
     432:	8e5d                	or	a2,a2,a5
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     434:	c110                	sw	a2,0(a0)
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
     436:	8082                	ret

00000438 <mmio_region_write_only_set_mask32>:
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     438:	99f1                	andi	a1,a1,-4
  bitfield &= ~(field.mask << field.index);
     43a:	00d61633          	sll	a2,a2,a3
     43e:	952e                	add	a0,a0,a1
     440:	c110                	sw	a2,0(a0)
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(
      register_value, (bitfield_field32_t){.mask = mask, .index = mask_index},
      ~0x0u);
  mmio_region_write32(base, offset, register_value);
}
     442:	8082                	ret

00000444 <mmio_region_nonatomic_set_field32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     444:	99f1                	andi	a1,a1,-4
     446:	952e                	add	a0,a0,a1
     448:	410c                	lw	a1,0(a0)
     44a:	00d617b3          	sll	a5,a2,a3
 */
MMIO_DEPRECATED
inline void mmio_region_nonatomic_set_field32(mmio_region_t base,
                                              ptrdiff_t offset,
                                              bitfield_field32_t field,
                                              uint32_t value) {
     44e:	1141                	addi	sp,sp,-16
     450:	fff7c793          	not	a5,a5
  bitfield |= (value & field.mask) << field.index;
     454:	8f71                	and	a4,a4,a2
     456:	c636                	sw	a3,12(sp)
  bitfield &= ~(field.mask << field.index);
     458:	8fed                	and	a5,a5,a1
  bitfield |= (value & field.mask) << field.index;
     45a:	00d716b3          	sll	a3,a4,a3
     45e:	8edd                	or	a3,a3,a5
     460:	c432                	sw	a2,8(sp)
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     462:	c114                	sw	a3,0(a0)
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
     464:	0141                	addi	sp,sp,16
     466:	8082                	ret

00000468 <mmio_region_write_only_set_field32>:
     468:	8f71                	and	a4,a4,a2
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     46a:	99f1                	andi	a1,a1,-4
     46c:	00d71733          	sll	a4,a4,a3
     470:	952e                	add	a0,a0,a1
 */
MMIO_DEPRECATED
inline void mmio_region_write_only_set_field32(mmio_region_t base,
                                               ptrdiff_t offset,
                                               bitfield_field32_t field,
                                               uint32_t value) {
     472:	1141                	addi	sp,sp,-16
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     474:	c118                	sw	a4,0(a0)
  uint32_t register_value = 0x0u;
  register_value = bitfield_field32_write(register_value, field, value);
  mmio_region_write32(base, offset, register_value);
}
     476:	0141                	addi	sp,sp,16
     478:	8082                	ret

0000047a <mmio_region_nonatomic_clear_bit32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     47a:	99f1                	andi	a1,a1,-4
     47c:	952e                	add	a0,a0,a1
     47e:	4118                	lw	a4,0(a0)
  bitfield &= ~(field.mask << field.index);
     480:	4785                	li	a5,1
     482:	00c797b3          	sll	a5,a5,a2
     486:	fff7c793          	not	a5,a5
     48a:	8ff9                	and	a5,a5,a4
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     48c:	c11c                	sw	a5,0(a0)
                                              ptrdiff_t offset,
                                              uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, false);
  mmio_region_write32(base, offset, register_value);
}
     48e:	8082                	ret

00000490 <mmio_region_nonatomic_set_bit32>:
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
     490:	99f1                	andi	a1,a1,-4
     492:	952e                	add	a0,a0,a1
     494:	4118                	lw	a4,0(a0)
     496:	4785                	li	a5,1
     498:	00c797b3          	sll	a5,a5,a2
  bitfield |= (value & field.mask) << field.index;
     49c:	8fd9                	or	a5,a5,a4
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     49e:	c11c                	sw	a5,0(a0)
                                            ptrdiff_t offset,
                                            uint32_t bit_index) {
  uint32_t register_value = mmio_region_read32(base, offset);
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
     4a0:	8082                	ret

000004a2 <mmio_region_write_only_set_bit32>:
  bitfield &= ~(field.mask << field.index);
     4a2:	4785                	li	a5,1
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
     4a4:	99f1                	andi	a1,a1,-4
     4a6:	00c797b3          	sll	a5,a5,a2
     4aa:	952e                	add	a0,a0,a1
     4ac:	c11c                	sw	a5,0(a0)
                                             ptrdiff_t offset,
                                             uint32_t bit_index) {
  uint32_t register_value = 0x0u;
  register_value = bitfield_bit32_write(register_value, bit_index, true);
  mmio_region_write32(base, offset, register_value);
}
     4ae:	8082                	ret

000004b0 <mmio_region_memcpy_from_mmio32>:

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
     4b0:	4705                	li	a4,1
     4b2:	b5b1                	j	2fe <mmio_region_memcpy32>

000004b4 <mmio_region_memcpy_to_mmio32>:
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
     4b4:	4701                	li	a4,0
     4b6:	b5a1                	j	2fe <mmio_region_memcpy32>

000004b8 <dma_is_ready>:
    return DMA_CONFIG_OK;
}


__attribute__((optimize("O0"))) uint32_t dma_is_ready(void)
{
     4b8:	1101                	addi	sp,sp,-32
     4ba:	ce22                	sw	s0,28(sp)
     4bc:	1000                	addi	s0,sp,32
    /* The transaction READY bit is read from the status register*/
    uint32_t ret = ( dma_cb.peri->STATUS & (1<<DMA_STATUS_READY_BIT) );
     4be:	67b5                	lui	a5,0xd
     4c0:	d1878793          	addi	a5,a5,-744 # cd18 <dma_cb>
     4c4:	479c                	lw	a5,8(a5)
     4c6:	4b9c                	lw	a5,16(a5)
     4c8:	8b85                	andi	a5,a5,1
     4ca:	fef42623          	sw	a5,-20(s0)
    return ret;
     4ce:	fec42783          	lw	a5,-20(s0)
}
     4d2:	853e                	mv	a0,a5
     4d4:	4472                	lw	s0,28(sp)
     4d6:	6105                	addi	sp,sp,32
     4d8:	8082                	ret

000004da <dma_intr_handler_trans_done>:
    dma_cb.peri->MODE = DMA_TRANS_MODE_SINGLE;
}


__attribute__((weak, optimize("O0"))) void dma_intr_handler_trans_done()
{
     4da:	1141                	addi	sp,sp,-16
     4dc:	c622                	sw	s0,12(sp)
     4de:	0800                	addi	s0,sp,16
     * This is a weak implementation.
     * Create your own function called
     * void dma_intr_handler_trans_done()
     * to override this one.
     */
}
     4e0:	0001                	nop
     4e2:	4432                	lw	s0,12(sp)
     4e4:	0141                	addi	sp,sp,16
     4e6:	8082                	ret

000004e8 <dma_intr_handler_window_done>:
     4e8:	1141                	addi	sp,sp,-16
     4ea:	c622                	sw	s0,12(sp)
     4ec:	0800                	addi	s0,sp,16
     4ee:	4432                	lw	s0,12(sp)
     4f0:	0141                	addi	sp,sp,16
     4f2:	b7e5                	j	4da <dma_intr_handler_trans_done>

000004f4 <dma_window_ratio_warning_threshold>:
     * to override this one.
     */
}

__attribute__((weak, optimize("O0"))) uint8_t dma_window_ratio_warning_threshold()
{
     4f4:	1141                	addi	sp,sp,-16
     4f6:	c622                	sw	s0,12(sp)
     4f8:	0800                	addi	s0,sp,16
     * Create your own function called
     * void dma_window_ratio_warning_threshold()
     * to override this one.
     * Make it return 0 to disable this warning.
     */
    return DMA_DEFAULT_TRANS_TO_WIND_SIZE_RATIO_THRESHOLD;
     4fa:	4791                	li	a5,4
}
     4fc:	853e                	mv	a0,a5
     4fe:	4432                	lw	s0,12(sp)
     500:	0141                	addi	sp,sp,16
     502:	8082                	ret

00000504 <dma_init>:
    dma_cb.peri = peri ? peri : dma_peri;
     504:	e119                	bnez	a0,50a <dma_init+0x6>
     506:	20060537          	lui	a0,0x20060
     50a:	67b5                	lui	a5,0xd
     50c:	d1878793          	addi	a5,a5,-744 # cd18 <dma_cb>
     510:	c788                	sw	a0,8(a5)
    dma_cb.trans = NULL;
     512:	0007a023          	sw	zero,0(a5)
    dma_cb.peri->SRC_PTR       = 0;
     516:	00052023          	sw	zero,0(a0) # 20060000 <_sp+0x200520f0>
    dma_cb.peri->DST_PTR       = 0;
     51a:	00052223          	sw	zero,4(a0)
    dma_cb.peri->SIZE          = 0;
     51e:	00052623          	sw	zero,12(a0)
    dma_cb.peri->PTR_INC       = 0;
     522:	00052a23          	sw	zero,20(a0)
    dma_cb.peri->SLOT          = 0;
     526:	00052c23          	sw	zero,24(a0)
    dma_cb.peri->DATA_TYPE     = 0;
     52a:	00052e23          	sw	zero,28(a0)
    dma_cb.peri->MODE          = 0;
     52e:	02052023          	sw	zero,32(a0)
    dma_cb.peri->WINDOW_SIZE   = 0;
     532:	02052223          	sw	zero,36(a0)
    dma_cb.peri->INTERRUPT_EN  = 0;
     536:	02052623          	sw	zero,44(a0)
}
     53a:	8082                	ret

0000053c <dma_load_transaction>:
{
     53c:	1141                	addi	sp,sp,-16
     53e:	c24a                	sw	s2,4(sp)
    if( p_trans->flags & DMA_CONFIG_CRITICAL_ERROR )
     540:	02452903          	lw	s2,36(a0)
{
     544:	c606                	sw	ra,12(sp)
     546:	c426                	sw	s1,8(sp)
    if( p_trans->flags & DMA_CONFIG_CRITICAL_ERROR )
     548:	20097913          	andi	s2,s2,512
     54c:	00090d63          	beqz	s2,566 <dma_load_transaction+0x2a>
        dma_cb.trans = NULL;
     550:	67b5                	lui	a5,0xd
     552:	d007ac23          	sw	zero,-744(a5) # cd18 <dma_cb>
        return DMA_CONFIG_CRITICAL_ERROR;
     556:	20000913          	li	s2,512
}
     55a:	40b2                	lw	ra,12(sp)
     55c:	44a2                	lw	s1,8(sp)
     55e:	854a                	mv	a0,s2
     560:	4912                	lw	s2,4(sp)
     562:	0141                	addi	sp,sp,16
     564:	8082                	ret
     566:	84aa                	mv	s1,a0
    if( !dma_is_ready() )
     568:	3f81                	jal	4b8 <dma_is_ready>
     56a:	c56d                	beqz	a0,654 <dma_load_transaction+0x118>
    dma_cb.trans = p_trans;
     56c:	67b5                	lui	a5,0xd
     56e:	d1878793          	addi	a5,a5,-744 # cd18 <dma_cb>
     572:	c384                	sw	s1,0(a5)
    dma_cb.peri->INTERRUPT_EN = INTR_EN_NONE;
     574:	479c                	lw	a5,8(a5)
    CSR_CLEAR_BITS(CSR_REG_MIE, DMA_CSR_REG_MIE_MASK );
     576:	00081737          	lui	a4,0x81
     57a:	80070713          	addi	a4,a4,-2048 # 80800 <_sp+0x728f0>
    dma_cb.peri->INTERRUPT_EN = INTR_EN_NONE;
     57e:	0207a623          	sw	zero,44(a5)
    CSR_CLEAR_BITS(CSR_REG_MIE, DMA_CSR_REG_MIE_MASK );
     582:	30473073          	csrc	mie,a4
    if( dma_cb.trans->end != DMA_TRANS_END_POLLING )
     586:	5094                	lw	a3,32(s1)
     588:	ce81                	beqz	a3,5a0 <dma_load_transaction+0x64>
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8 );
     58a:	46a1                	li	a3,8
     58c:	3006a073          	csrs	mstatus,a3
        CSR_SET_BITS(CSR_REG_MIE, DMA_CSR_REG_MIE_MASK );
     590:	30472073          	csrs	mie,a4
        dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
     594:	4705                	li	a4,1
     596:	d7d8                	sw	a4,44(a5)
        if( p_trans->win_du > 0 )
     598:	4cd8                	lw	a4,28(s1)
     59a:	c319                	beqz	a4,5a0 <dma_load_transaction+0x64>
            dma_cb.peri->INTERRUPT_EN |= INTR_EN_WINDOW_DONE;
     59c:	470d                	li	a4,3
     59e:	d7d8                	sw	a4,44(a5)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
     5a0:	4094                	lw	a3,0(s1)
    if(dma_cb.trans->mode != DMA_TRANS_MODE_ADDRESS)
     5a2:	0184a803          	lw	a6,24(s1)
        dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
     5a6:	0044a883          	lw	a7,4(s1)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
     5aa:	42d8                	lw	a4,4(a3)
     5ac:	c398                	sw	a4,0(a5)
    if(dma_cb.trans->mode != DMA_TRANS_MODE_ADDRESS)
     5ae:	4709                	li	a4,2
     5b0:	08e80e63          	beq	a6,a4,64c <dma_load_transaction+0x110>
        dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
     5b4:	0048a703          	lw	a4,4(a7)
     5b8:	c3d8                	sw	a4,4(a5)

static inline uint32_t get_increment_b( dma_target_t * p_tgt )
{
    uint32_t inc_b = 0;
    /* If the target uses a trigger, the increment remains 0. */
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
     5ba:	4ad0                	lw	a2,20(a3)
        * Otherwise, the target-specific increment is used transformed into
        * bytes).
        */
        if( inc_b == 0 )
        {
            uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE( dma_cb.trans->type );
     5bc:	48cc                	lw	a1,20(s1)
    uint32_t inc_b = 0;
     5be:	4701                	li	a4,0
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
     5c0:	ea19                	bnez	a2,5d6 <dma_load_transaction+0x9a>
        inc_b = dma_cb.trans->inc_b;
     5c2:	00c4d703          	lhu	a4,12(s1)
        if( inc_b == 0 )
     5c6:	eb01                	bnez	a4,5d6 <dma_load_transaction+0x9a>
            inc_b = ( p_tgt->inc_du * dataSize_b );
     5c8:	0086d683          	lhu	a3,8(a3)
            uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE( dma_cb.trans->type );
     5cc:	4711                	li	a4,4
     5ce:	40b75733          	sra	a4,a4,a1
            inc_b = ( p_tgt->inc_du * dataSize_b );
     5d2:	02d70733          	mul	a4,a4,a3
    uint32_t value  =  (( uint32_t * ) dma_cb.peri ) [ index ];
     5d6:	4bd4                	lw	a3,20(a5)
    value           |= (p_val & p_mask) << p_sel;
     5d8:	0ff77713          	zext.b	a4,a4
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
     5dc:	0148a503          	lw	a0,20(a7)
    value           &= ~( p_mask << p_sel );
     5e0:	f006f693          	andi	a3,a3,-256
    value           |= (p_val & p_mask) << p_sel;
     5e4:	8f55                	or	a4,a4,a3
    (( uint32_t * ) dma_cb.peri ) [ index ] = value;
     5e6:	cbd8                	sw	a4,20(a5)
    if(dma_cb.trans->mode != DMA_TRANS_MODE_ADDRESS)
     5e8:	4689                	li	a3,2
     5ea:	02d80a63          	beq	a6,a3,61e <dma_load_transaction+0xe2>
    uint32_t inc_b = 0;
     5ee:	4681                	li	a3,0
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
     5f0:	e919                	bnez	a0,606 <dma_load_transaction+0xca>
        inc_b = dma_cb.trans->inc_b;
     5f2:	00c4d683          	lhu	a3,12(s1)
        if( inc_b == 0 )
     5f6:	ea81                	bnez	a3,606 <dma_load_transaction+0xca>
            inc_b = ( p_tgt->inc_du * dataSize_b );
     5f8:	0088d883          	lhu	a7,8(a7)
            uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE( dma_cb.trans->type );
     5fc:	4691                	li	a3,4
     5fe:	40b6d6b3          	sra	a3,a3,a1
            inc_b = ( p_tgt->inc_du * dataSize_b );
     602:	031686b3          	mul	a3,a3,a7
    value           &= ~( p_mask << p_sel );
     606:	78c1                	lui	a7,0xffff0
     608:	0ff88893          	addi	a7,a7,255 # ffff00ff <_sp+0xfffe21ef>
     60c:	01177733          	and	a4,a4,a7
    value           |= (p_val & p_mask) << p_sel;
     610:	68c1                	lui	a7,0x10
     612:	06a2                	slli	a3,a3,0x8
     614:	18fd                	addi	a7,a7,-1
     616:	0116f6b3          	and	a3,a3,a7
     61a:	8ed9                	or	a3,a3,a4
    (( uint32_t * ) dma_cb.peri ) [ index ] = value;
     61c:	cbd4                	sw	a3,20(a5)
    dma_cb.peri->WINDOW_SIZE =   dma_cb.trans->win_du
     61e:	4cd8                	lw	a4,28(s1)
    dma_cb.peri->MODE = dma_cb.trans->mode;
     620:	0307a023          	sw	a6,32(a5)
                            : dma_cb.trans->size_b;
     624:	e311                	bnez	a4,628 <dma_load_transaction+0xec>
     626:	4898                	lw	a4,16(s1)
    uint32_t value  =  (( uint32_t * ) dma_cb.peri ) [ index ];
     628:	4f94                	lw	a3,24(a5)
    dma_cb.peri->WINDOW_SIZE =   dma_cb.trans->win_du
     62a:	d3d8                	sw	a4,36(a5)
    value           &= ~( p_mask << p_sel );
     62c:	7741                	lui	a4,0xffff0
     62e:	8ef9                	and	a3,a3,a4
    value           |= (p_val & p_mask) << p_sel;
     630:	6741                	lui	a4,0x10
     632:	177d                	addi	a4,a4,-1
     634:	8e79                	and	a2,a2,a4
     636:	8e55                	or	a2,a2,a3
    value           &= ~( p_mask << p_sel );
     638:	8e79                	and	a2,a2,a4
    uint32_t value  =  (( uint32_t * ) dma_cb.peri ) [ index ];
     63a:	4fd8                	lw	a4,28(a5)
    value           |= (p_val & p_mask) << p_sel;
     63c:	0542                	slli	a0,a0,0x10
     63e:	898d                	andi	a1,a1,3
    value           &= ~( p_mask << p_sel );
     640:	9b71                	andi	a4,a4,-4
    value           |= (p_val & p_mask) << p_sel;
     642:	8d51                	or	a0,a0,a2
     644:	8dd9                	or	a1,a1,a4
    (( uint32_t * ) dma_cb.peri ) [ index ] = value;
     646:	cf88                	sw	a0,24(a5)
     648:	cfcc                	sw	a1,28(a5)
}
     64a:	bf01                	j	55a <dma_load_transaction+0x1e>
        dma_cb.peri->ADDR_PTR = dma_cb.trans->src_addr->ptr;
     64c:	4498                	lw	a4,8(s1)
     64e:	4358                	lw	a4,4(a4)
     650:	c798                	sw	a4,8(a5)
        dma_cb.peri->ADDR_PTR = dma_cb.trans->src_addr->ptr;
     652:	b7a5                	j	5ba <dma_load_transaction+0x7e>
        return DMA_CONFIG_TRANS_OVERRIDE;
     654:	10000913          	li	s2,256
     658:	b709                	j	55a <dma_load_transaction+0x1e>

0000065a <dma_launch>:
    if(     ( p_trans == NULL )
     65a:	cd05                	beqz	a0,692 <dma_launch+0x38>
{
     65c:	1141                	addi	sp,sp,-16
     65e:	c426                	sw	s1,8(sp)
        ||  ( dma_cb.trans != p_trans ) ) // @ToDo: Check per-element.
     660:	64b5                	lui	s1,0xd
     662:	d1848493          	addi	s1,s1,-744 # cd18 <dma_cb>
     666:	4098                	lw	a4,0(s1)
{
     668:	c606                	sw	ra,12(sp)
        return DMA_CONFIG_CRITICAL_ERROR;
     66a:	20000793          	li	a5,512
        ||  ( dma_cb.trans != p_trans ) ) // @ToDo: Check per-element.
     66e:	00a71d63          	bne	a4,a0,688 <dma_launch+0x2e>
    if( !dma_is_ready() )
     672:	3599                	jal	4b8 <dma_is_ready>
        return DMA_CONFIG_TRANS_OVERRIDE;
     674:	10000793          	li	a5,256
    if( !dma_is_ready() )
     678:	c901                	beqz	a0,688 <dma_launch+0x2e>
    dma_cb.peri->SIZE = dma_cb.trans->size_b;
     67a:	4098                	lw	a4,0(s1)
     67c:	449c                	lw	a5,8(s1)
    dma_cb.intrFlag = 0;
     67e:	00048223          	sb	zero,4(s1)
    dma_cb.peri->SIZE = dma_cb.trans->size_b;
     682:	4b18                	lw	a4,16(a4)
     684:	c7d8                	sw	a4,12(a5)
    return DMA_CONFIG_OK;
     686:	4781                	li	a5,0
}
     688:	40b2                	lw	ra,12(sp)
     68a:	44a2                	lw	s1,8(sp)
     68c:	853e                	mv	a0,a5
     68e:	0141                	addi	sp,sp,16
     690:	8082                	ret
        return DMA_CONFIG_CRITICAL_ERROR;
     692:	20000793          	li	a5,512
}
     696:	853e                	mv	a0,a5
     698:	8082                	ret

0000069a <dma_get_window_count>:
    return dma_cb.peri->WINDOW_COUNT;
     69a:	67b5                	lui	a5,0xd
     69c:	d1878793          	addi	a5,a5,-744 # cd18 <dma_cb>
     6a0:	479c                	lw	a5,8(a5)
}
     6a2:	5788                	lw	a0,40(a5)
     6a4:	8082                	ret

000006a6 <dma_stop_circular>:
    dma_cb.peri->MODE = DMA_TRANS_MODE_SINGLE;
     6a6:	67b5                	lui	a5,0xd
     6a8:	d1878793          	addi	a5,a5,-744 # cd18 <dma_cb>
     6ac:	479c                	lw	a5,8(a5)
     6ae:	0207a023          	sw	zero,32(a5)
}
     6b2:	8082                	ret

000006b4 <fic_irq_dma>:
    dma_cb.intrFlag = 1;
     6b4:	67b5                	lui	a5,0xd
     6b6:	4705                	li	a4,1
     6b8:	d0e78e23          	sb	a4,-740(a5) # cd1c <dma_cb+0x4>
    dma_intr_handler_trans_done();
     6bc:	bd39                	j	4da <dma_intr_handler_trans_done>

000006be <handler_irq_dma>:
    dma_intr_handler_window_done();
     6be:	b52d                	j	4e8 <dma_intr_handler_window_done>

000006c0 <validate_target>:
    if( p_tgt->env != NULL )
     6c0:	4114                	lw	a3,0(a0)
{
     6c2:	872a                	mv	a4,a0
    dma_config_flags_t flags = DMA_CONFIG_OK;
     6c4:	4501                	li	a0,0
    if( p_tgt->env != NULL )
     6c6:	c6a9                	beqz	a3,710 <validate_target+0x50>
    if( (uint8_t*)p_env->end < (uint8_t*)p_env->start )
     6c8:	0046a803          	lw	a6,4(a3)
     6cc:	0006a883          	lw	a7,0(a3)
        if( p_tgt->size_du != 0 )
     6d0:	4750                	lw	a2,12(a4)
            uint8_t isOutb = is_region_outbound(  p_tgt->ptr,
     6d2:	434c                	lw	a1,4(a4)
    if( (uint8_t*)p_env->end < (uint8_t*)p_env->start )
     6d4:	011837b3          	sltu	a5,a6,a7
     6d8:	00679513          	slli	a0,a5,0x6
        if( p_tgt->size_du != 0 )
     6dc:	c605                	beqz	a2,704 <validate_target+0x44>
            uint8_t isOutb = is_region_outbound(  p_tgt->ptr,
     6de:	00875783          	lhu	a5,8(a4) # 10008 <_sp+0x20f8>
    uint32_t affectedUnits      = ( p_size_du - 1 ) * p_inc_du + 1;
     6e2:	167d                	addi	a2,a2,-1
    uint32_t rangeSize          = DMA_DATA_TYPE_2_SIZE(p_type) * affectedUnits;
     6e4:	01072303          	lw	t1,16(a4)
    uint32_t affectedUnits      = ( p_size_du - 1 ) * p_inc_du + 1;
     6e8:	02c787b3          	mul	a5,a5,a2
    uint32_t rangeSize          = DMA_DATA_TYPE_2_SIZE(p_type) * affectedUnits;
     6ec:	4611                	li	a2,4
     6ee:	40665633          	sra	a2,a2,t1
    uint32_t affectedUnits      = ( p_size_du - 1 ) * p_inc_du + 1;
     6f2:	0785                	addi	a5,a5,1
    uint32_t rangeSize          = DMA_DATA_TYPE_2_SIZE(p_type) * affectedUnits;
     6f4:	02c787b3          	mul	a5,a5,a2
    uint32_t lasByteInsideRange = p_start + rangeSize -1;
     6f8:	17fd                	addi	a5,a5,-1
     6fa:	97ae                	add	a5,a5,a1
            if( isOutb )
     6fc:	00f87463          	bgeu	a6,a5,704 <validate_target+0x44>
                flags |= DMA_CONFIG_OUTBOUNDS;
     700:	02056513          	ori	a0,a0,32
        if( beforeEnv || afterEnv )
     704:	0115e463          	bltu	a1,a7,70c <validate_target+0x4c>
     708:	00b87463          	bgeu	a6,a1,710 <validate_target+0x50>
            flags |= DMA_CONFIG_OUTBOUNDS;
     70c:	02056513          	ori	a0,a0,32
    if( p_tgt->trig == DMA_TRIG_MEMORY ){ /* If it is a memory region. */
     710:	4b5c                	lw	a5,20(a4)
     712:	e799                	bnez	a5,720 <validate_target+0x60>
        if( ( p_tgt->inc_du == 0 ) ){
     714:	00875783          	lhu	a5,8(a4)
     718:	eb81                	bnez	a5,728 <validate_target+0x68>
            flags |= DMA_CONFIG_INCOMPATIBLE;
     71a:	04056513          	ori	a0,a0,64
    return flags;
     71e:	a029                	j	728 <validate_target+0x68>
        if( (     (p_tgt->env != NULL)
     720:	feed                	bnez	a3,71a <validate_target+0x5a>
              ||  ( p_tgt->inc_du != 0 ) ) )
     722:	00875783          	lhu	a5,8(a4)
     726:	fbf5                	bnez	a5,71a <validate_target+0x5a>
}
     728:	8082                	ret

0000072a <dma_validate_transaction>:
{
     72a:	1101                	addi	sp,sp,-32
     72c:	c84e                	sw	s3,16(sp)
    uint8_t errorSrc = validate_target( p_trans->src );
     72e:	00052983          	lw	s3,0(a0)
{
     732:	cc26                	sw	s1,24(sp)
     734:	84aa                	mv	s1,a0
    uint8_t errorSrc = validate_target( p_trans->src );
     736:	854e                	mv	a0,s3
{
     738:	ce06                	sw	ra,28(sp)
     73a:	ca4a                	sw	s2,20(sp)
     73c:	c652                	sw	s4,12(sp)
     73e:	c456                	sw	s5,8(sp)
     740:	c25a                	sw	s6,4(sp)
     742:	8a2e                	mv	s4,a1
     744:	8ab2                	mv	s5,a2
    uint8_t errorSrc = validate_target( p_trans->src );
     746:	3fad                	jal	6c0 <validate_target>
    uint8_t errorDst = validate_target( p_trans->dst );
     748:	0044a903          	lw	s2,4(s1)
    uint8_t errorSrc = validate_target( p_trans->src );
     74c:	0ff57b13          	zext.b	s6,a0
    uint8_t errorDst = validate_target( p_trans->dst );
     750:	854a                	mv	a0,s2
     752:	37bd                	jal	6c0 <validate_target>
    p_trans->flags |= errorSrc ? (errorSrc | DMA_CONFIG_SRC ) : DMA_CONFIG_OK;
     754:	50dc                	lw	a5,36(s1)
    uint8_t errorDst = validate_target( p_trans->dst );
     756:	0ff57513          	zext.b	a0,a0
    p_trans->flags |= errorSrc ? (errorSrc | DMA_CONFIG_SRC ) : DMA_CONFIG_OK;
     75a:	001b6713          	ori	a4,s6,1
     75e:	000b1363          	bnez	s6,764 <dma_validate_transaction+0x3a>
     762:	4701                	li	a4,0
     764:	8fd9                	or	a5,a5,a4
    p_trans->flags |= errorDst ? (errorDst | DMA_CONFIG_SRC ) : DMA_CONFIG_OK;
     766:	4701                	li	a4,0
     768:	c119                	beqz	a0,76e <dma_validate_transaction+0x44>
     76a:	00156713          	ori	a4,a0,1
     76e:	00e7e533          	or	a0,a5,a4
     772:	d0c8                	sw	a0,36(s1)
    if( p_trans->flags & DMA_CONFIG_CRITICAL_ERROR )
     774:	20057793          	andi	a5,a0,512
     778:	ef81                	bnez	a5,790 <dma_validate_transaction+0x66>
    if( p_check )
     77a:	020a8963          	beqz	s5,7ac <dma_validate_transaction+0x82>
        if(     p_trans->src->trig != DMA_TRIG_MEMORY
     77e:	0149a703          	lw	a4,20(s3)
     782:	01492783          	lw	a5,20(s2)
     786:	cf11                	beqz	a4,7a2 <dma_validate_transaction+0x78>
            &&  p_trans->dst->trig != DMA_TRIG_MEMORY )
     788:	c395                	beqz	a5,7ac <dma_validate_transaction+0x82>
            p_trans->flags |= DMA_CONFIG_CRITICAL_ERROR;
     78a:	24056513          	ori	a0,a0,576
            p_trans->flags |= DMA_CONFIG_CRITICAL_ERROR;
     78e:	d0c8                	sw	a0,36(s1)
}
     790:	40f2                	lw	ra,28(sp)
     792:	44e2                	lw	s1,24(sp)
     794:	4952                	lw	s2,20(sp)
     796:	49c2                	lw	s3,16(sp)
     798:	4a32                	lw	s4,12(sp)
     79a:	4aa2                	lw	s5,8(sp)
     79c:	4b12                	lw	s6,4(sp)
     79e:	6105                	addi	sp,sp,32
     7a0:	8082                	ret
            && p_trans->dst->trig == DMA_TRIG_MEMORY
     7a2:	e789                	bnez	a5,7ac <dma_validate_transaction+0x82>
            && p_trans->mode      == DMA_TRANS_MODE_CIRCULAR )
     7a4:	4c98                	lw	a4,24(s1)
     7a6:	4785                	li	a5,1
     7a8:	fef701e3          	beq	a4,a5,78a <dma_validate_transaction+0x60>
    uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE(p_trans->src->type);
     7ac:	0109a803          	lw	a6,16(s3)
    p_trans->size_b = p_trans->src->size_du * dataSize_b;
     7b0:	00c9a783          	lw	a5,12(s3)
    uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE(p_trans->src->type);
     7b4:	4891                	li	a7,4
     7b6:	4108d8b3          	sra	a7,a7,a6
    p_trans->size_b = p_trans->src->size_du * dataSize_b;
     7ba:	02f888b3          	mul	a7,a7,a5
    p_trans->flags = DMA_CONFIG_OK;
     7be:	0204a223          	sw	zero,36(s1)
    p_trans->type = p_trans->src->type;
     7c2:	0104aa23          	sw	a6,20(s1)
    p_trans->inc_b = 0;
     7c6:	00049623          	sh	zero,12(s1)
    p_trans->size_b = p_trans->src->size_du * dataSize_b;
     7ca:	0114a823          	sw	a7,16(s1)
    if( p_check  )
     7ce:	100a8b63          	beqz	s5,8e4 <__heap_size+0xe4>
        if( p_trans->src->trig == DMA_TRIG_MEMORY )
     7d2:	0149a703          	lw	a4,20(s3)
        uint8_t misalignment = 0;
     7d6:	4681                	li	a3,0
        if( p_trans->src->trig == DMA_TRIG_MEMORY )
     7d8:	e315                	bnez	a4,7fc <dma_validate_transaction+0xd2>
            misalignment = get_misalignment_b( p_trans->src->ptr, p_trans->type );
     7da:	0049a703          	lw	a4,4(s3)
    if(  p_type == DMA_DATA_TYPE_WORD )
     7de:	00081c63          	bnez	a6,7f6 <dma_validate_transaction+0xcc>
        if( ( (uint32_t)p_ptr & DMA_WORD_ALIGN_MASK )  != 0 )
     7e2:	00377693          	andi	a3,a4,3
    uint8_t misalignment = 0;
     7e6:	00d036b3          	snez	a3,a3
        if( ( (uint32_t)p_ptr & DMA_HALF_WORD_ALIGN_MASK ) != 0 )
     7ea:	8b05                	andi	a4,a4,1
     7ec:	cb01                	beqz	a4,7fc <dma_validate_transaction+0xd2>
            misalignment++;
     7ee:	0685                	addi	a3,a3,1
     7f0:	0ff6f693          	zext.b	a3,a3
     7f4:	a021                	j	7fc <dma_validate_transaction+0xd2>
    if( p_type <= DMA_DATA_TYPE_HALF_WORD )
     7f6:	4605                	li	a2,1
     7f8:	fec809e3          	beq	a6,a2,7ea <dma_validate_transaction+0xc0>
        if( p_trans->dst->trig == DMA_TRIG_MEMORY )
     7fc:	01492603          	lw	a2,20(s2)
        uint8_t dstMisalignment = 0;
     800:	4701                	li	a4,0
        if( p_trans->dst->trig == DMA_TRIG_MEMORY )
     802:	e215                	bnez	a2,826 <__heap_size+0x26>
            dstMisalignment = get_misalignment_b( p_trans->dst->ptr, p_trans->type );
     804:	00492603          	lw	a2,4(s2)
    if(  p_type == DMA_DATA_TYPE_WORD )
     808:	00081c63          	bnez	a6,820 <__heap_size+0x20>
        if( ( (uint32_t)p_ptr & DMA_WORD_ALIGN_MASK )  != 0 )
     80c:	00367713          	andi	a4,a2,3
    uint8_t misalignment = 0;
     810:	00e03733          	snez	a4,a4
        if( ( (uint32_t)p_ptr & DMA_HALF_WORD_ALIGN_MASK ) != 0 )
     814:	8a05                	andi	a2,a2,1
     816:	ca01                	beqz	a2,826 <__heap_size+0x26>
            misalignment++;
     818:	0705                	addi	a4,a4,1
     81a:	0ff77713          	zext.b	a4,a4
     81e:	a021                	j	826 <__heap_size+0x26>
    if( p_type <= DMA_DATA_TYPE_HALF_WORD )
     820:	4585                	li	a1,1
     822:	feb809e3          	beq	a6,a1,814 <__heap_size+0x14>
        p_trans->flags  |= ( dstMisalignment ? DMA_CONFIG_DST : DMA_CONFIG_OK );
     826:	00e03533          	snez	a0,a4
        p_trans->flags  |= ( misalignment ? DMA_CONFIG_SRC : DMA_CONFIG_OK );
     82a:	00d03633          	snez	a2,a3
        p_trans->flags  |= ( dstMisalignment ? DMA_CONFIG_DST : DMA_CONFIG_OK );
     82e:	0506                	slli	a0,a0,0x1
     830:	8d51                	or	a0,a0,a2
        if( misalignment < dstMisalignment )
     832:	8636                	mv	a2,a3
     834:	00e6f363          	bgeu	a3,a4,83a <__heap_size+0x3a>
     838:	863a                	mv	a2,a4
     83a:	0ff67713          	zext.b	a4,a2
        if( misalignment != 0 )
     83e:	e719                	bnez	a4,84c <__heap_size+0x4c>
        p_trans->flags  |= ( dstMisalignment ? DMA_CONFIG_DST : DMA_CONFIG_OK );
     840:	d0c8                	sw	a0,36(s1)
        if( p_trans->src->size_du == 0 )
     842:	e3a9                	bnez	a5,884 <__heap_size+0x84>
            p_trans->flags |= DMA_CONFIG_CRITICAL_ERROR;
     844:	50dc                	lw	a5,36(s1)
     846:	2017e513          	ori	a0,a5,513
     84a:	b791                	j	78e <dma_validate_transaction+0x64>
            p_trans->flags |= DMA_CONFIG_MISALIGN;
     84c:	00456693          	ori	a3,a0,4
     850:	d0d4                	sw	a3,36(s1)
            if( !p_enRealign)
     852:	000a1563          	bnez	s4,85c <__heap_size+0x5c>
                return p_trans->flags |= DMA_CONFIG_CRITICAL_ERROR;
     856:	20456513          	ori	a0,a0,516
     85a:	bf15                	j	78e <dma_validate_transaction+0x64>
            if(    ( p_trans->src->inc_du > 1 )
     85c:	0089d603          	lhu	a2,8(s3)
     860:	4685                	li	a3,1
     862:	00c6e663          	bltu	a3,a2,86e <__heap_size+0x6e>
                || ( p_trans->dst->inc_du > 1 ) )
     866:	00895603          	lhu	a2,8(s2)
     86a:	00c6f563          	bgeu	a3,a2,874 <__heap_size+0x74>
                p_trans->flags |= DMA_CONFIG_CRITICAL_ERROR;
     86e:	21456513          	ori	a0,a0,532
     872:	bf31                	j	78e <dma_validate_transaction+0x64>
            p_trans->type += misalignment;
     874:	9742                	add	a4,a4,a6
            p_trans->inc_b = DMA_DATA_TYPE_2_SIZE( p_trans->type );
     876:	4691                	li	a3,4
            p_trans->type += misalignment;
     878:	c8d8                	sw	a4,20(s1)
            p_trans->inc_b = DMA_DATA_TYPE_2_SIZE( p_trans->type );
     87a:	40e6d733          	sra	a4,a3,a4
     87e:	00e49623          	sh	a4,12(s1)
     882:	b7c1                	j	842 <__heap_size+0x42>
        uint8_t isEnv = p_trans->dst->env;
     884:	00092703          	lw	a4,0(s2)
        uint8_t isOutb = is_region_outbound(
     888:	00492683          	lw	a3,4(s2)
                                    p_trans->type,
     88c:	48cc                	lw	a1,20(s1)
        uint8_t isOutb = is_region_outbound(
     88e:	4350                	lw	a2,4(a4)
        if( isEnv && isOutb )
     890:	0ff77713          	zext.b	a4,a4
                                    p_trans->dst->inc_du );
     894:	00895503          	lhu	a0,8(s2)
        if( isEnv && isOutb )
     898:	c315                	beqz	a4,8bc <__heap_size+0xbc>
    uint32_t affectedUnits      = ( p_size_du - 1 ) * p_inc_du + 1;
     89a:	17fd                	addi	a5,a5,-1
     89c:	02a787b3          	mul	a5,a5,a0
    uint32_t rangeSize          = DMA_DATA_TYPE_2_SIZE(p_type) * affectedUnits;
     8a0:	4711                	li	a4,4
     8a2:	40b75733          	sra	a4,a4,a1
    uint32_t affectedUnits      = ( p_size_du - 1 ) * p_inc_du + 1;
     8a6:	0785                	addi	a5,a5,1
    uint32_t rangeSize          = DMA_DATA_TYPE_2_SIZE(p_type) * affectedUnits;
     8a8:	02e787b3          	mul	a5,a5,a4
    uint32_t lasByteInsideRange = p_start + rangeSize -1;
     8ac:	17fd                	addi	a5,a5,-1
     8ae:	97b6                	add	a5,a5,a3
        if( isEnv && isOutb )
     8b0:	00f67663          	bgeu	a2,a5,8bc <__heap_size+0xbc>
            p_trans->flags |= DMA_CONFIG_CRITICAL_ERROR;
     8b4:	50dc                	lw	a5,36(s1)
     8b6:	2227e513          	ori	a0,a5,546
     8ba:	bdd1                	j	78e <dma_validate_transaction+0x64>
        if( p_trans->win_du > p_trans->size_b )
     8bc:	4cdc                	lw	a5,28(s1)
     8be:	00f8f663          	bgeu	a7,a5,8ca <__heap_size+0xca>
            p_trans->flags |= DMA_CONFIG_CRITICAL_ERROR;
     8c2:	50dc                	lw	a5,36(s1)
     8c4:	2807e513          	ori	a0,a5,640
     8c8:	b5d9                	j	78e <dma_validate_transaction+0x64>
        uint32_t threshold = dma_window_ratio_warning_threshold();
     8ca:	312d                	jal	4f4 <dma_window_ratio_warning_threshold>
        uint32_t ratio = p_trans->size_b / p_trans->win_du;
     8cc:	4cd4                	lw	a3,28(s1)
     8ce:	4898                	lw	a4,16(s1)
        if(     p_trans->win_du
     8d0:	ca91                	beqz	a3,8e4 <__heap_size+0xe4>
            p_trans->flags |= DMA_CONFIG_WINDOW_SIZE;
     8d2:	50dc                	lw	a5,36(s1)
            &&  threshold
     8d4:	c901                	beqz	a0,8e4 <__heap_size+0xe4>
        uint32_t ratio = p_trans->size_b / p_trans->win_du;
     8d6:	02d75733          	divu	a4,a4,a3
            &&  ( ratio > threshold) )
     8da:	00e57563          	bgeu	a0,a4,8e4 <__heap_size+0xe4>
            p_trans->flags |= DMA_CONFIG_WINDOW_SIZE;
     8de:	0807e793          	ori	a5,a5,128
     8e2:	d0dc                	sw	a5,36(s1)
    return p_trans->flags;
     8e4:	50c8                	lw	a0,36(s1)
     8e6:	b56d                	j	790 <dma_validate_transaction+0x66>

000008e8 <validate_environment>:
    if( (uint8_t*)p_env->end < (uint8_t*)p_env->start )
     8e8:	415c                	lw	a5,4(a0)
     8ea:	4118                	lw	a4,0(a0)
     8ec:	00e7b533          	sltu	a0,a5,a4
}
     8f0:	051a                	slli	a0,a0,0x6
     8f2:	8082                	ret

000008f4 <fic_irq_timer_1>:
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    return kFastIntrCtrlOk_e;
}

__attribute__((weak, optimize("O0"))) void fic_irq_timer_1(void)
{
     8f4:	1141                	addi	sp,sp,-16
     8f6:	c622                	sw	s0,12(sp)
     8f8:	0800                	addi	s0,sp,16
    /* Users should implement their non-weak version */
}
     8fa:	0001                	nop
     8fc:	4432                	lw	s0,12(sp)
     8fe:	0141                	addi	sp,sp,16
     900:	8082                	ret

00000902 <fic_irq_timer_2>:
     902:	1141                	addi	sp,sp,-16
     904:	c622                	sw	s0,12(sp)
     906:	0800                	addi	s0,sp,16
     908:	4432                	lw	s0,12(sp)
     90a:	0141                	addi	sp,sp,16
     90c:	b7e5                	j	8f4 <fic_irq_timer_1>

0000090e <fic_irq_timer_3>:
     90e:	1141                	addi	sp,sp,-16
     910:	c622                	sw	s0,12(sp)
     912:	0800                	addi	s0,sp,16
     914:	4432                	lw	s0,12(sp)
     916:	0141                	addi	sp,sp,16
     918:	bff1                	j	8f4 <fic_irq_timer_1>
     91a:	1141                	addi	sp,sp,-16
     91c:	c622                	sw	s0,12(sp)
     91e:	0800                	addi	s0,sp,16
     920:	4432                	lw	s0,12(sp)
     922:	0141                	addi	sp,sp,16
     924:	bfc1                	j	8f4 <fic_irq_timer_1>

00000926 <fic_irq_spi>:
     926:	1141                	addi	sp,sp,-16
     928:	c622                	sw	s0,12(sp)
     92a:	0800                	addi	s0,sp,16
     92c:	4432                	lw	s0,12(sp)
     92e:	0141                	addi	sp,sp,16
     930:	b7d1                	j	8f4 <fic_irq_timer_1>

00000932 <fic_irq_spi_flash>:
     932:	1141                	addi	sp,sp,-16
     934:	c622                	sw	s0,12(sp)
     936:	0800                	addi	s0,sp,16
     938:	4432                	lw	s0,12(sp)
     93a:	0141                	addi	sp,sp,16
     93c:	bf65                	j	8f4 <fic_irq_timer_1>

0000093e <fic_irq_gpio_0>:
     93e:	1141                	addi	sp,sp,-16
     940:	c622                	sw	s0,12(sp)
     942:	0800                	addi	s0,sp,16
     944:	4432                	lw	s0,12(sp)
     946:	0141                	addi	sp,sp,16
     948:	b775                	j	8f4 <fic_irq_timer_1>

0000094a <fic_irq_gpio_1>:
     94a:	1141                	addi	sp,sp,-16
     94c:	c622                	sw	s0,12(sp)
     94e:	0800                	addi	s0,sp,16
     950:	4432                	lw	s0,12(sp)
     952:	0141                	addi	sp,sp,16
     954:	b745                	j	8f4 <fic_irq_timer_1>

00000956 <fic_irq_gpio_2>:
     956:	1141                	addi	sp,sp,-16
     958:	c622                	sw	s0,12(sp)
     95a:	0800                	addi	s0,sp,16
     95c:	4432                	lw	s0,12(sp)
     95e:	0141                	addi	sp,sp,16
     960:	bf51                	j	8f4 <fic_irq_timer_1>

00000962 <fic_irq_gpio_3>:
     962:	1141                	addi	sp,sp,-16
     964:	c622                	sw	s0,12(sp)
     966:	0800                	addi	s0,sp,16
     968:	4432                	lw	s0,12(sp)
     96a:	0141                	addi	sp,sp,16
     96c:	b761                	j	8f4 <fic_irq_timer_1>

0000096e <fic_irq_gpio_4>:
     96e:	1141                	addi	sp,sp,-16
     970:	c622                	sw	s0,12(sp)
     972:	0800                	addi	s0,sp,16
     974:	4432                	lw	s0,12(sp)
     976:	0141                	addi	sp,sp,16
     978:	bfb5                	j	8f4 <fic_irq_timer_1>

0000097a <fic_irq_gpio_5>:
     97a:	1141                	addi	sp,sp,-16
     97c:	c622                	sw	s0,12(sp)
     97e:	0800                	addi	s0,sp,16
     980:	4432                	lw	s0,12(sp)
     982:	0141                	addi	sp,sp,16
     984:	bf85                	j	8f4 <fic_irq_timer_1>

00000986 <fic_irq_gpio_6>:
     986:	1141                	addi	sp,sp,-16
     988:	c622                	sw	s0,12(sp)
     98a:	0800                	addi	s0,sp,16
     98c:	4432                	lw	s0,12(sp)
     98e:	0141                	addi	sp,sp,16
     990:	b795                	j	8f4 <fic_irq_timer_1>

00000992 <fic_irq_gpio_7>:
     992:	1141                	addi	sp,sp,-16
     994:	c622                	sw	s0,12(sp)
     996:	0800                	addi	s0,sp,16
     998:	4432                	lw	s0,12(sp)
     99a:	0141                	addi	sp,sp,16
     99c:	bfa1                	j	8f4 <fic_irq_timer_1>

0000099e <enable_fast_interrupt>:
{
     99e:	1141                	addi	sp,sp,-16
     9a0:	c426                	sw	s1,8(sp)
    uint32_t reg = fast_intr_ctrl_peri->FAST_INTR_ENABLE;
     9a2:	200704b7          	lui	s1,0x20070
     9a6:	449c                	lw	a5,8(s1)
{
     9a8:	862e                	mv	a2,a1
    reg = bitfield_bit32_write(reg, fast_interrupt, enable);
     9aa:	85aa                	mv	a1,a0
     9ac:	853e                	mv	a0,a5
{
     9ae:	c606                	sw	ra,12(sp)
    reg = bitfield_bit32_write(reg, fast_interrupt, enable);
     9b0:	3845                	jal	260 <bitfield_bit32_write>
}
     9b2:	40b2                	lw	ra,12(sp)
    fast_intr_ctrl_peri->FAST_INTR_ENABLE = reg;
     9b4:	c488                	sw	a0,8(s1)
}
     9b6:	44a2                	lw	s1,8(sp)
     9b8:	4501                	li	a0,0
     9ba:	0141                	addi	sp,sp,16
     9bc:	8082                	ret

000009be <enable_all_fast_interrupts>:
    fast_intr_ctrl_peri->FAST_INTR_ENABLE = enable ? 0x7fff : 0x0000;
     9be:	4781                	li	a5,0
     9c0:	c119                	beqz	a0,9c6 <enable_all_fast_interrupts+0x8>
     9c2:	67a1                	lui	a5,0x8
     9c4:	17fd                	addi	a5,a5,-1
     9c6:	20070737          	lui	a4,0x20070
     9ca:	c71c                	sw	a5,8(a4)
}
     9cc:	4501                	li	a0,0
     9ce:	8082                	ret

000009d0 <clear_fast_interrupt>:
 */
BITFIELD_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
     9d0:	4785                	li	a5,1
     9d2:	00a797b3          	sll	a5,a5,a0
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     9d6:	20070737          	lui	a4,0x20070
     9da:	c35c                	sw	a5,4(a4)
}
     9dc:	4501                	li	a0,0
     9de:	8082                	ret

000009e0 <handler_irq_fast_timer_1>:
/*                            LOCAL FUNCTIONS                               */
/**                                                                        **/
/****************************************************************************/

void handler_irq_fast_timer_1(void)
{
     9e0:	7139                	addi	sp,sp,-64
     9e2:	ce3a                	sw	a4,28(sp)
     9e4:	cc3e                	sw	a5,24(sp)
     9e6:	de06                	sw	ra,60(sp)
     9e8:	dc16                	sw	t0,56(sp)
     9ea:	da1a                	sw	t1,52(sp)
     9ec:	d81e                	sw	t2,48(sp)
     9ee:	d62a                	sw	a0,44(sp)
     9f0:	d42e                	sw	a1,40(sp)
     9f2:	d232                	sw	a2,36(sp)
     9f4:	d036                	sw	a3,32(sp)
     9f6:	ca42                	sw	a6,20(sp)
     9f8:	c846                	sw	a7,16(sp)
     9fa:	c672                	sw	t3,12(sp)
     9fc:	c476                	sw	t4,8(sp)
     9fe:	c27a                	sw	t5,4(sp)
     a00:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     a02:	200707b7          	lui	a5,0x20070
     a06:	4705                	li	a4,1
     a08:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kTimer_1_fic_e);
    // call the weak fic handler
    fic_irq_timer_1();
     a0a:	35ed                	jal	8f4 <fic_irq_timer_1>
}
     a0c:	50f2                	lw	ra,60(sp)
     a0e:	52e2                	lw	t0,56(sp)
     a10:	5352                	lw	t1,52(sp)
     a12:	53c2                	lw	t2,48(sp)
     a14:	5532                	lw	a0,44(sp)
     a16:	55a2                	lw	a1,40(sp)
     a18:	5612                	lw	a2,36(sp)
     a1a:	5682                	lw	a3,32(sp)
     a1c:	4772                	lw	a4,28(sp)
     a1e:	47e2                	lw	a5,24(sp)
     a20:	4852                	lw	a6,20(sp)
     a22:	48c2                	lw	a7,16(sp)
     a24:	4e32                	lw	t3,12(sp)
     a26:	4ea2                	lw	t4,8(sp)
     a28:	4f12                	lw	t5,4(sp)
     a2a:	4f82                	lw	t6,0(sp)
     a2c:	6121                	addi	sp,sp,64
     a2e:	30200073          	mret
     a32:	0001                	nop

00000a34 <handler_irq_fast_timer_2>:

void handler_irq_fast_timer_2(void)
{
     a34:	7139                	addi	sp,sp,-64
     a36:	ce3a                	sw	a4,28(sp)
     a38:	cc3e                	sw	a5,24(sp)
     a3a:	de06                	sw	ra,60(sp)
     a3c:	dc16                	sw	t0,56(sp)
     a3e:	da1a                	sw	t1,52(sp)
     a40:	d81e                	sw	t2,48(sp)
     a42:	d62a                	sw	a0,44(sp)
     a44:	d42e                	sw	a1,40(sp)
     a46:	d232                	sw	a2,36(sp)
     a48:	d036                	sw	a3,32(sp)
     a4a:	ca42                	sw	a6,20(sp)
     a4c:	c846                	sw	a7,16(sp)
     a4e:	c672                	sw	t3,12(sp)
     a50:	c476                	sw	t4,8(sp)
     a52:	c27a                	sw	t5,4(sp)
     a54:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     a56:	200707b7          	lui	a5,0x20070
     a5a:	4709                	li	a4,2
     a5c:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kTimer_2_fic_e);
    // call the weak fic handler
    fic_irq_timer_2();
     a5e:	3555                	jal	902 <fic_irq_timer_2>
}
     a60:	50f2                	lw	ra,60(sp)
     a62:	52e2                	lw	t0,56(sp)
     a64:	5352                	lw	t1,52(sp)
     a66:	53c2                	lw	t2,48(sp)
     a68:	5532                	lw	a0,44(sp)
     a6a:	55a2                	lw	a1,40(sp)
     a6c:	5612                	lw	a2,36(sp)
     a6e:	5682                	lw	a3,32(sp)
     a70:	4772                	lw	a4,28(sp)
     a72:	47e2                	lw	a5,24(sp)
     a74:	4852                	lw	a6,20(sp)
     a76:	48c2                	lw	a7,16(sp)
     a78:	4e32                	lw	t3,12(sp)
     a7a:	4ea2                	lw	t4,8(sp)
     a7c:	4f12                	lw	t5,4(sp)
     a7e:	4f82                	lw	t6,0(sp)
     a80:	6121                	addi	sp,sp,64
     a82:	30200073          	mret
     a86:	0001                	nop

00000a88 <handler_irq_fast_timer_3>:

void handler_irq_fast_timer_3(void)
{
     a88:	7139                	addi	sp,sp,-64
     a8a:	ce3a                	sw	a4,28(sp)
     a8c:	cc3e                	sw	a5,24(sp)
     a8e:	de06                	sw	ra,60(sp)
     a90:	dc16                	sw	t0,56(sp)
     a92:	da1a                	sw	t1,52(sp)
     a94:	d81e                	sw	t2,48(sp)
     a96:	d62a                	sw	a0,44(sp)
     a98:	d42e                	sw	a1,40(sp)
     a9a:	d232                	sw	a2,36(sp)
     a9c:	d036                	sw	a3,32(sp)
     a9e:	ca42                	sw	a6,20(sp)
     aa0:	c846                	sw	a7,16(sp)
     aa2:	c672                	sw	t3,12(sp)
     aa4:	c476                	sw	t4,8(sp)
     aa6:	c27a                	sw	t5,4(sp)
     aa8:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     aaa:	200707b7          	lui	a5,0x20070
     aae:	4711                	li	a4,4
     ab0:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kTimer_3_fic_e);
    // call the weak fic handler
    fic_irq_timer_3();
     ab2:	3db1                	jal	90e <fic_irq_timer_3>
}
     ab4:	50f2                	lw	ra,60(sp)
     ab6:	52e2                	lw	t0,56(sp)
     ab8:	5352                	lw	t1,52(sp)
     aba:	53c2                	lw	t2,48(sp)
     abc:	5532                	lw	a0,44(sp)
     abe:	55a2                	lw	a1,40(sp)
     ac0:	5612                	lw	a2,36(sp)
     ac2:	5682                	lw	a3,32(sp)
     ac4:	4772                	lw	a4,28(sp)
     ac6:	47e2                	lw	a5,24(sp)
     ac8:	4852                	lw	a6,20(sp)
     aca:	48c2                	lw	a7,16(sp)
     acc:	4e32                	lw	t3,12(sp)
     ace:	4ea2                	lw	t4,8(sp)
     ad0:	4f12                	lw	t5,4(sp)
     ad2:	4f82                	lw	t6,0(sp)
     ad4:	6121                	addi	sp,sp,64
     ad6:	30200073          	mret
     ada:	0001                	nop

00000adc <handler_irq_fast_dma>:

void handler_irq_fast_dma(void)
{
     adc:	7139                	addi	sp,sp,-64
     ade:	ce3a                	sw	a4,28(sp)
     ae0:	cc3e                	sw	a5,24(sp)
     ae2:	de06                	sw	ra,60(sp)
     ae4:	dc16                	sw	t0,56(sp)
     ae6:	da1a                	sw	t1,52(sp)
     ae8:	d81e                	sw	t2,48(sp)
     aea:	d62a                	sw	a0,44(sp)
     aec:	d42e                	sw	a1,40(sp)
     aee:	d232                	sw	a2,36(sp)
     af0:	d036                	sw	a3,32(sp)
     af2:	ca42                	sw	a6,20(sp)
     af4:	c846                	sw	a7,16(sp)
     af6:	c672                	sw	t3,12(sp)
     af8:	c476                	sw	t4,8(sp)
     afa:	c27a                	sw	t5,4(sp)
     afc:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     afe:	200707b7          	lui	a5,0x20070
     b02:	4721                	li	a4,8
     b04:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kDma_fic_e);
    // call the weak fic handler
    fic_irq_dma();
     b06:	367d                	jal	6b4 <fic_irq_dma>
}
     b08:	50f2                	lw	ra,60(sp)
     b0a:	52e2                	lw	t0,56(sp)
     b0c:	5352                	lw	t1,52(sp)
     b0e:	53c2                	lw	t2,48(sp)
     b10:	5532                	lw	a0,44(sp)
     b12:	55a2                	lw	a1,40(sp)
     b14:	5612                	lw	a2,36(sp)
     b16:	5682                	lw	a3,32(sp)
     b18:	4772                	lw	a4,28(sp)
     b1a:	47e2                	lw	a5,24(sp)
     b1c:	4852                	lw	a6,20(sp)
     b1e:	48c2                	lw	a7,16(sp)
     b20:	4e32                	lw	t3,12(sp)
     b22:	4ea2                	lw	t4,8(sp)
     b24:	4f12                	lw	t5,4(sp)
     b26:	4f82                	lw	t6,0(sp)
     b28:	6121                	addi	sp,sp,64
     b2a:	30200073          	mret
     b2e:	0001                	nop

00000b30 <handler_irq_fast_spi>:

void handler_irq_fast_spi(void)
{
     b30:	7139                	addi	sp,sp,-64
     b32:	ce3a                	sw	a4,28(sp)
     b34:	cc3e                	sw	a5,24(sp)
     b36:	de06                	sw	ra,60(sp)
     b38:	dc16                	sw	t0,56(sp)
     b3a:	da1a                	sw	t1,52(sp)
     b3c:	d81e                	sw	t2,48(sp)
     b3e:	d62a                	sw	a0,44(sp)
     b40:	d42e                	sw	a1,40(sp)
     b42:	d232                	sw	a2,36(sp)
     b44:	d036                	sw	a3,32(sp)
     b46:	ca42                	sw	a6,20(sp)
     b48:	c846                	sw	a7,16(sp)
     b4a:	c672                	sw	t3,12(sp)
     b4c:	c476                	sw	t4,8(sp)
     b4e:	c27a                	sw	t5,4(sp)
     b50:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     b52:	200707b7          	lui	a5,0x20070
     b56:	4741                	li	a4,16
     b58:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kSpi_fic_e);
    // call the weak fic handler
    fic_irq_spi();
     b5a:	33f1                	jal	926 <fic_irq_spi>
}
     b5c:	50f2                	lw	ra,60(sp)
     b5e:	52e2                	lw	t0,56(sp)
     b60:	5352                	lw	t1,52(sp)
     b62:	53c2                	lw	t2,48(sp)
     b64:	5532                	lw	a0,44(sp)
     b66:	55a2                	lw	a1,40(sp)
     b68:	5612                	lw	a2,36(sp)
     b6a:	5682                	lw	a3,32(sp)
     b6c:	4772                	lw	a4,28(sp)
     b6e:	47e2                	lw	a5,24(sp)
     b70:	4852                	lw	a6,20(sp)
     b72:	48c2                	lw	a7,16(sp)
     b74:	4e32                	lw	t3,12(sp)
     b76:	4ea2                	lw	t4,8(sp)
     b78:	4f12                	lw	t5,4(sp)
     b7a:	4f82                	lw	t6,0(sp)
     b7c:	6121                	addi	sp,sp,64
     b7e:	30200073          	mret
     b82:	0001                	nop

00000b84 <handler_irq_fast_spi_flash>:

void handler_irq_fast_spi_flash(void)
{
     b84:	7139                	addi	sp,sp,-64
     b86:	ce3a                	sw	a4,28(sp)
     b88:	cc3e                	sw	a5,24(sp)
     b8a:	de06                	sw	ra,60(sp)
     b8c:	dc16                	sw	t0,56(sp)
     b8e:	da1a                	sw	t1,52(sp)
     b90:	d81e                	sw	t2,48(sp)
     b92:	d62a                	sw	a0,44(sp)
     b94:	d42e                	sw	a1,40(sp)
     b96:	d232                	sw	a2,36(sp)
     b98:	d036                	sw	a3,32(sp)
     b9a:	ca42                	sw	a6,20(sp)
     b9c:	c846                	sw	a7,16(sp)
     b9e:	c672                	sw	t3,12(sp)
     ba0:	c476                	sw	t4,8(sp)
     ba2:	c27a                	sw	t5,4(sp)
     ba4:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     ba6:	200707b7          	lui	a5,0x20070
     baa:	02000713          	li	a4,32
     bae:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kSpiFlash_fic_e);
    // call the weak fic handler
    fic_irq_spi_flash();
     bb0:	3349                	jal	932 <fic_irq_spi_flash>
}
     bb2:	50f2                	lw	ra,60(sp)
     bb4:	52e2                	lw	t0,56(sp)
     bb6:	5352                	lw	t1,52(sp)
     bb8:	53c2                	lw	t2,48(sp)
     bba:	5532                	lw	a0,44(sp)
     bbc:	55a2                	lw	a1,40(sp)
     bbe:	5612                	lw	a2,36(sp)
     bc0:	5682                	lw	a3,32(sp)
     bc2:	4772                	lw	a4,28(sp)
     bc4:	47e2                	lw	a5,24(sp)
     bc6:	4852                	lw	a6,20(sp)
     bc8:	48c2                	lw	a7,16(sp)
     bca:	4e32                	lw	t3,12(sp)
     bcc:	4ea2                	lw	t4,8(sp)
     bce:	4f12                	lw	t5,4(sp)
     bd0:	4f82                	lw	t6,0(sp)
     bd2:	6121                	addi	sp,sp,64
     bd4:	30200073          	mret

00000bd8 <handler_irq_fast_gpio_0>:

void handler_irq_fast_gpio_0(void)
{
     bd8:	7139                	addi	sp,sp,-64
     bda:	ce3a                	sw	a4,28(sp)
     bdc:	cc3e                	sw	a5,24(sp)
     bde:	de06                	sw	ra,60(sp)
     be0:	dc16                	sw	t0,56(sp)
     be2:	da1a                	sw	t1,52(sp)
     be4:	d81e                	sw	t2,48(sp)
     be6:	d62a                	sw	a0,44(sp)
     be8:	d42e                	sw	a1,40(sp)
     bea:	d232                	sw	a2,36(sp)
     bec:	d036                	sw	a3,32(sp)
     bee:	ca42                	sw	a6,20(sp)
     bf0:	c846                	sw	a7,16(sp)
     bf2:	c672                	sw	t3,12(sp)
     bf4:	c476                	sw	t4,8(sp)
     bf6:	c27a                	sw	t5,4(sp)
     bf8:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     bfa:	200707b7          	lui	a5,0x20070
     bfe:	04000713          	li	a4,64
     c02:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_0_fic_e);
    // call the weak fic handler
    fic_irq_gpio_0();
     c04:	3b2d                	jal	93e <fic_irq_gpio_0>
}
     c06:	50f2                	lw	ra,60(sp)
     c08:	52e2                	lw	t0,56(sp)
     c0a:	5352                	lw	t1,52(sp)
     c0c:	53c2                	lw	t2,48(sp)
     c0e:	5532                	lw	a0,44(sp)
     c10:	55a2                	lw	a1,40(sp)
     c12:	5612                	lw	a2,36(sp)
     c14:	5682                	lw	a3,32(sp)
     c16:	4772                	lw	a4,28(sp)
     c18:	47e2                	lw	a5,24(sp)
     c1a:	4852                	lw	a6,20(sp)
     c1c:	48c2                	lw	a7,16(sp)
     c1e:	4e32                	lw	t3,12(sp)
     c20:	4ea2                	lw	t4,8(sp)
     c22:	4f12                	lw	t5,4(sp)
     c24:	4f82                	lw	t6,0(sp)
     c26:	6121                	addi	sp,sp,64
     c28:	30200073          	mret

00000c2c <handler_irq_fast_gpio_1>:

void handler_irq_fast_gpio_1(void)
{
     c2c:	7139                	addi	sp,sp,-64
     c2e:	ce3a                	sw	a4,28(sp)
     c30:	cc3e                	sw	a5,24(sp)
     c32:	de06                	sw	ra,60(sp)
     c34:	dc16                	sw	t0,56(sp)
     c36:	da1a                	sw	t1,52(sp)
     c38:	d81e                	sw	t2,48(sp)
     c3a:	d62a                	sw	a0,44(sp)
     c3c:	d42e                	sw	a1,40(sp)
     c3e:	d232                	sw	a2,36(sp)
     c40:	d036                	sw	a3,32(sp)
     c42:	ca42                	sw	a6,20(sp)
     c44:	c846                	sw	a7,16(sp)
     c46:	c672                	sw	t3,12(sp)
     c48:	c476                	sw	t4,8(sp)
     c4a:	c27a                	sw	t5,4(sp)
     c4c:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     c4e:	200707b7          	lui	a5,0x20070
     c52:	08000713          	li	a4,128
     c56:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_1_fic_e);
    // call the weak fic handler
    fic_irq_gpio_1();
     c58:	39cd                	jal	94a <fic_irq_gpio_1>
}
     c5a:	50f2                	lw	ra,60(sp)
     c5c:	52e2                	lw	t0,56(sp)
     c5e:	5352                	lw	t1,52(sp)
     c60:	53c2                	lw	t2,48(sp)
     c62:	5532                	lw	a0,44(sp)
     c64:	55a2                	lw	a1,40(sp)
     c66:	5612                	lw	a2,36(sp)
     c68:	5682                	lw	a3,32(sp)
     c6a:	4772                	lw	a4,28(sp)
     c6c:	47e2                	lw	a5,24(sp)
     c6e:	4852                	lw	a6,20(sp)
     c70:	48c2                	lw	a7,16(sp)
     c72:	4e32                	lw	t3,12(sp)
     c74:	4ea2                	lw	t4,8(sp)
     c76:	4f12                	lw	t5,4(sp)
     c78:	4f82                	lw	t6,0(sp)
     c7a:	6121                	addi	sp,sp,64
     c7c:	30200073          	mret

00000c80 <handler_irq_fast_gpio_2>:

void handler_irq_fast_gpio_2(void)
{
     c80:	7139                	addi	sp,sp,-64
     c82:	ce3a                	sw	a4,28(sp)
     c84:	cc3e                	sw	a5,24(sp)
     c86:	de06                	sw	ra,60(sp)
     c88:	dc16                	sw	t0,56(sp)
     c8a:	da1a                	sw	t1,52(sp)
     c8c:	d81e                	sw	t2,48(sp)
     c8e:	d62a                	sw	a0,44(sp)
     c90:	d42e                	sw	a1,40(sp)
     c92:	d232                	sw	a2,36(sp)
     c94:	d036                	sw	a3,32(sp)
     c96:	ca42                	sw	a6,20(sp)
     c98:	c846                	sw	a7,16(sp)
     c9a:	c672                	sw	t3,12(sp)
     c9c:	c476                	sw	t4,8(sp)
     c9e:	c27a                	sw	t5,4(sp)
     ca0:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     ca2:	200707b7          	lui	a5,0x20070
     ca6:	10000713          	li	a4,256
     caa:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_2_fic_e);
    // call the weak fic handler
    fic_irq_gpio_2();
     cac:	316d                	jal	956 <fic_irq_gpio_2>
}
     cae:	50f2                	lw	ra,60(sp)
     cb0:	52e2                	lw	t0,56(sp)
     cb2:	5352                	lw	t1,52(sp)
     cb4:	53c2                	lw	t2,48(sp)
     cb6:	5532                	lw	a0,44(sp)
     cb8:	55a2                	lw	a1,40(sp)
     cba:	5612                	lw	a2,36(sp)
     cbc:	5682                	lw	a3,32(sp)
     cbe:	4772                	lw	a4,28(sp)
     cc0:	47e2                	lw	a5,24(sp)
     cc2:	4852                	lw	a6,20(sp)
     cc4:	48c2                	lw	a7,16(sp)
     cc6:	4e32                	lw	t3,12(sp)
     cc8:	4ea2                	lw	t4,8(sp)
     cca:	4f12                	lw	t5,4(sp)
     ccc:	4f82                	lw	t6,0(sp)
     cce:	6121                	addi	sp,sp,64
     cd0:	30200073          	mret

00000cd4 <handler_irq_fast_gpio_3>:

void handler_irq_fast_gpio_3(void)
{
     cd4:	7139                	addi	sp,sp,-64
     cd6:	ce3a                	sw	a4,28(sp)
     cd8:	cc3e                	sw	a5,24(sp)
     cda:	de06                	sw	ra,60(sp)
     cdc:	dc16                	sw	t0,56(sp)
     cde:	da1a                	sw	t1,52(sp)
     ce0:	d81e                	sw	t2,48(sp)
     ce2:	d62a                	sw	a0,44(sp)
     ce4:	d42e                	sw	a1,40(sp)
     ce6:	d232                	sw	a2,36(sp)
     ce8:	d036                	sw	a3,32(sp)
     cea:	ca42                	sw	a6,20(sp)
     cec:	c846                	sw	a7,16(sp)
     cee:	c672                	sw	t3,12(sp)
     cf0:	c476                	sw	t4,8(sp)
     cf2:	c27a                	sw	t5,4(sp)
     cf4:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     cf6:	200707b7          	lui	a5,0x20070
     cfa:	20000713          	li	a4,512
     cfe:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_3_fic_e);
    // call the weak fic handler
    fic_irq_gpio_3();
     d00:	318d                	jal	962 <fic_irq_gpio_3>
}
     d02:	50f2                	lw	ra,60(sp)
     d04:	52e2                	lw	t0,56(sp)
     d06:	5352                	lw	t1,52(sp)
     d08:	53c2                	lw	t2,48(sp)
     d0a:	5532                	lw	a0,44(sp)
     d0c:	55a2                	lw	a1,40(sp)
     d0e:	5612                	lw	a2,36(sp)
     d10:	5682                	lw	a3,32(sp)
     d12:	4772                	lw	a4,28(sp)
     d14:	47e2                	lw	a5,24(sp)
     d16:	4852                	lw	a6,20(sp)
     d18:	48c2                	lw	a7,16(sp)
     d1a:	4e32                	lw	t3,12(sp)
     d1c:	4ea2                	lw	t4,8(sp)
     d1e:	4f12                	lw	t5,4(sp)
     d20:	4f82                	lw	t6,0(sp)
     d22:	6121                	addi	sp,sp,64
     d24:	30200073          	mret

00000d28 <handler_irq_fast_gpio_4>:

void handler_irq_fast_gpio_4(void)
{
     d28:	7139                	addi	sp,sp,-64
     d2a:	ce3a                	sw	a4,28(sp)
     d2c:	cc3e                	sw	a5,24(sp)
     d2e:	de06                	sw	ra,60(sp)
     d30:	dc16                	sw	t0,56(sp)
     d32:	da1a                	sw	t1,52(sp)
     d34:	d81e                	sw	t2,48(sp)
     d36:	d62a                	sw	a0,44(sp)
     d38:	d42e                	sw	a1,40(sp)
     d3a:	d232                	sw	a2,36(sp)
     d3c:	d036                	sw	a3,32(sp)
     d3e:	ca42                	sw	a6,20(sp)
     d40:	c846                	sw	a7,16(sp)
     d42:	c672                	sw	t3,12(sp)
     d44:	c476                	sw	t4,8(sp)
     d46:	c27a                	sw	t5,4(sp)
     d48:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     d4a:	200707b7          	lui	a5,0x20070
     d4e:	40000713          	li	a4,1024
     d52:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_4_fic_e);
    // call the weak fic handler
    fic_irq_gpio_4();
     d54:	3929                	jal	96e <fic_irq_gpio_4>
}
     d56:	50f2                	lw	ra,60(sp)
     d58:	52e2                	lw	t0,56(sp)
     d5a:	5352                	lw	t1,52(sp)
     d5c:	53c2                	lw	t2,48(sp)
     d5e:	5532                	lw	a0,44(sp)
     d60:	55a2                	lw	a1,40(sp)
     d62:	5612                	lw	a2,36(sp)
     d64:	5682                	lw	a3,32(sp)
     d66:	4772                	lw	a4,28(sp)
     d68:	47e2                	lw	a5,24(sp)
     d6a:	4852                	lw	a6,20(sp)
     d6c:	48c2                	lw	a7,16(sp)
     d6e:	4e32                	lw	t3,12(sp)
     d70:	4ea2                	lw	t4,8(sp)
     d72:	4f12                	lw	t5,4(sp)
     d74:	4f82                	lw	t6,0(sp)
     d76:	6121                	addi	sp,sp,64
     d78:	30200073          	mret

00000d7c <handler_irq_fast_gpio_5>:

void handler_irq_fast_gpio_5(void)
{
     d7c:	7139                	addi	sp,sp,-64
     d7e:	cc3e                	sw	a5,24(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     d80:	6785                	lui	a5,0x1
{
     d82:	ce3a                	sw	a4,28(sp)
     d84:	de06                	sw	ra,60(sp)
     d86:	dc16                	sw	t0,56(sp)
     d88:	da1a                	sw	t1,52(sp)
     d8a:	d81e                	sw	t2,48(sp)
     d8c:	d62a                	sw	a0,44(sp)
     d8e:	d42e                	sw	a1,40(sp)
     d90:	d232                	sw	a2,36(sp)
     d92:	d036                	sw	a3,32(sp)
     d94:	ca42                	sw	a6,20(sp)
     d96:	c846                	sw	a7,16(sp)
     d98:	c672                	sw	t3,12(sp)
     d9a:	c476                	sw	t4,8(sp)
     d9c:	c27a                	sw	t5,4(sp)
     d9e:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     da0:	20070737          	lui	a4,0x20070
     da4:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
     da8:	c35c                	sw	a5,4(a4)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_5_fic_e);
    // call the weak fic handler
    fic_irq_gpio_5();
     daa:	3ec1                	jal	97a <fic_irq_gpio_5>
}
     dac:	50f2                	lw	ra,60(sp)
     dae:	52e2                	lw	t0,56(sp)
     db0:	5352                	lw	t1,52(sp)
     db2:	53c2                	lw	t2,48(sp)
     db4:	5532                	lw	a0,44(sp)
     db6:	55a2                	lw	a1,40(sp)
     db8:	5612                	lw	a2,36(sp)
     dba:	5682                	lw	a3,32(sp)
     dbc:	4772                	lw	a4,28(sp)
     dbe:	47e2                	lw	a5,24(sp)
     dc0:	4852                	lw	a6,20(sp)
     dc2:	48c2                	lw	a7,16(sp)
     dc4:	4e32                	lw	t3,12(sp)
     dc6:	4ea2                	lw	t4,8(sp)
     dc8:	4f12                	lw	t5,4(sp)
     dca:	4f82                	lw	t6,0(sp)
     dcc:	6121                	addi	sp,sp,64
     dce:	30200073          	mret
     dd2:	0001                	nop

00000dd4 <handler_irq_fast_gpio_6>:

void handler_irq_fast_gpio_6(void)
{
     dd4:	7139                	addi	sp,sp,-64
     dd6:	ce3a                	sw	a4,28(sp)
     dd8:	cc3e                	sw	a5,24(sp)
     dda:	de06                	sw	ra,60(sp)
     ddc:	dc16                	sw	t0,56(sp)
     dde:	da1a                	sw	t1,52(sp)
     de0:	d81e                	sw	t2,48(sp)
     de2:	d62a                	sw	a0,44(sp)
     de4:	d42e                	sw	a1,40(sp)
     de6:	d232                	sw	a2,36(sp)
     de8:	d036                	sw	a3,32(sp)
     dea:	ca42                	sw	a6,20(sp)
     dec:	c846                	sw	a7,16(sp)
     dee:	c672                	sw	t3,12(sp)
     df0:	c476                	sw	t4,8(sp)
     df2:	c27a                	sw	t5,4(sp)
     df4:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     df6:	200707b7          	lui	a5,0x20070
     dfa:	6705                	lui	a4,0x1
     dfc:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_6_fic_e);
    // call the weak fic handler
    fic_irq_gpio_6();
     dfe:	3661                	jal	986 <fic_irq_gpio_6>
}
     e00:	50f2                	lw	ra,60(sp)
     e02:	52e2                	lw	t0,56(sp)
     e04:	5352                	lw	t1,52(sp)
     e06:	53c2                	lw	t2,48(sp)
     e08:	5532                	lw	a0,44(sp)
     e0a:	55a2                	lw	a1,40(sp)
     e0c:	5612                	lw	a2,36(sp)
     e0e:	5682                	lw	a3,32(sp)
     e10:	4772                	lw	a4,28(sp)
     e12:	47e2                	lw	a5,24(sp)
     e14:	4852                	lw	a6,20(sp)
     e16:	48c2                	lw	a7,16(sp)
     e18:	4e32                	lw	t3,12(sp)
     e1a:	4ea2                	lw	t4,8(sp)
     e1c:	4f12                	lw	t5,4(sp)
     e1e:	4f82                	lw	t6,0(sp)
     e20:	6121                	addi	sp,sp,64
     e22:	30200073          	mret
     e26:	0001                	nop

00000e28 <handler_irq_fast_gpio_7>:

void handler_irq_fast_gpio_7(void)
{
     e28:	7139                	addi	sp,sp,-64
     e2a:	ce3a                	sw	a4,28(sp)
     e2c:	cc3e                	sw	a5,24(sp)
     e2e:	de06                	sw	ra,60(sp)
     e30:	dc16                	sw	t0,56(sp)
     e32:	da1a                	sw	t1,52(sp)
     e34:	d81e                	sw	t2,48(sp)
     e36:	d62a                	sw	a0,44(sp)
     e38:	d42e                	sw	a1,40(sp)
     e3a:	d232                	sw	a2,36(sp)
     e3c:	d036                	sw	a3,32(sp)
     e3e:	ca42                	sw	a6,20(sp)
     e40:	c846                	sw	a7,16(sp)
     e42:	c672                	sw	t3,12(sp)
     e44:	c476                	sw	t4,8(sp)
     e46:	c27a                	sw	t5,4(sp)
     e48:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
     e4a:	200707b7          	lui	a5,0x20070
     e4e:	6709                	lui	a4,0x2
     e50:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_7_fic_e);
    // call the weak fic handler
    fic_irq_gpio_7();
     e52:	3681                	jal	992 <fic_irq_gpio_7>
}
     e54:	50f2                	lw	ra,60(sp)
     e56:	52e2                	lw	t0,56(sp)
     e58:	5352                	lw	t1,52(sp)
     e5a:	53c2                	lw	t2,48(sp)
     e5c:	5532                	lw	a0,44(sp)
     e5e:	55a2                	lw	a1,40(sp)
     e60:	5612                	lw	a2,36(sp)
     e62:	5682                	lw	a3,32(sp)
     e64:	4772                	lw	a4,28(sp)
     e66:	47e2                	lw	a5,24(sp)
     e68:	4852                	lw	a6,20(sp)
     e6a:	48c2                	lw	a7,16(sp)
     e6c:	4e32                	lw	t3,12(sp)
     e6e:	4ea2                	lw	t4,8(sp)
     e70:	4f12                	lw	t5,4(sp)
     e72:	4f82                	lw	t6,0(sp)
     e74:	6121                	addi	sp,sp,64
     e76:	30200073          	mret

00000e7a <gpio_handler_irq_dummy>:
/*                            LOCAL FUNCTIONS                               */
/**                                                                        **/
/****************************************************************************/

__attribute__((optimize("O0"))) static void gpio_handler_irq_dummy( uint32_t dummy )
{
     e7a:	1101                	addi	sp,sp,-32
     e7c:	ce22                	sw	s0,28(sp)
     e7e:	1000                	addi	s0,sp,32
     e80:	fea42623          	sw	a0,-20(s0)
  return;
     e84:	0001                	nop
}
     e86:	4472                	lw	s0,28(sp)
     e88:	6105                	addi	sp,sp,32
     e8a:	8082                	ret

00000e8c <gpio_assign_irq_handler>:
  if( intr_id >= GPIO_INTR_START && intr_id <= GPIO_INTR_END )
     e8c:	155d                	addi	a0,a0,-9
     e8e:	47dd                	li	a5,23
     e90:	00a7ea63          	bltu	a5,a0,ea4 <gpio_assign_irq_handler+0x18>
    gpio_handlers[ intr_id - GPIO_INTR_START ] = handler;
     e94:	67b5                	lui	a5,0xd
     e96:	050a                	slli	a0,a0,0x2
     e98:	d2478793          	addi	a5,a5,-732 # cd24 <gpio_handlers>
     e9c:	97aa                	add	a5,a5,a0
     e9e:	c38c                	sw	a1,0(a5)
    return GpioOk;
     ea0:	4501                	li	a0,0
     ea2:	8082                	ret
  return GpioError;
     ea4:	4505                	li	a0,1
}
     ea6:	8082                	ret

00000ea8 <gpio_reset_handlers_list>:
    for( uint8_t i = 0; i < GPIO_INTR_QTY; i++ )
     ea8:	67b5                	lui	a5,0xd
     eaa:	d2478793          	addi	a5,a5,-732 # cd24 <gpio_handlers>
        gpio_handlers[ i ] = &gpio_handler_irq_dummy;
     eae:	6705                	lui	a4,0x1
     eb0:	06078693          	addi	a3,a5,96
     eb4:	e7a70713          	addi	a4,a4,-390 # e7a <gpio_handler_irq_dummy>
     eb8:	c398                	sw	a4,0(a5)
    for( uint8_t i = 0; i < GPIO_INTR_QTY; i++ )
     eba:	0791                	addi	a5,a5,4
     ebc:	fed79ee3          	bne	a5,a3,eb8 <gpio_reset_handlers_list+0x10>
}
     ec0:	8082                	ret

00000ec2 <handler_irq_gpio>:
    gpio_handlers[ id - GPIO_INTR_START ]();
     ec2:	155d                	addi	a0,a0,-9
     ec4:	67b5                	lui	a5,0xd
     ec6:	050a                	slli	a0,a0,0x2
     ec8:	d2478793          	addi	a5,a5,-732 # cd24 <gpio_handlers>
     ecc:	97aa                	add	a5,a5,a0
     ece:	439c                	lw	a5,0(a5)
     ed0:	8782                	jr	a5

00000ed2 <gpio_set_mode>:
    if (pin >= 0 && pin < 1*GPIO_MODE_NUM_PINS)
     ed2:	47bd                	li	a5,15
                                       uint32_t mask, 
                                       uint32_t index,
                                       uint32_t value) 
{
  bitfield &= ~(mask << index);
  bitfield |= (value & mask) << index;
     ed4:	898d                	andi	a1,a1,3
        gpio_peri->GPIO_MODE0 = bitfield_write(gpio_peri->GPIO_MODE0,
     ed6:	30020737          	lui	a4,0x30020
    if (pin >= 0 && pin < 1*GPIO_MODE_NUM_PINS)
     eda:	02a7e063          	bltu	a5,a0,efa <gpio_set_mode+0x28>
        gpio_peri->GPIO_MODE0 = bitfield_write(gpio_peri->GPIO_MODE0,
     ede:	4714                	lw	a3,8(a4)
                                               BIT_MASK_3, 2*pin, mode);
     ee0:	0506                	slli	a0,a0,0x1
  bitfield &= ~(mask << index);
     ee2:	478d                	li	a5,3
     ee4:	00a797b3          	sll	a5,a5,a0
     ee8:	fff7c793          	not	a5,a5
     eec:	8ff5                	and	a5,a5,a3
  bitfield |= (value & mask) << index;
     eee:	00a595b3          	sll	a1,a1,a0
     ef2:	8ddd                	or	a1,a1,a5
        gpio_peri->GPIO_MODE0 = bitfield_write(gpio_peri->GPIO_MODE0,
     ef4:	c70c                	sw	a1,8(a4)
}
     ef6:	4501                	li	a0,0
     ef8:	8082                	ret
                                               BIT_MASK_3, 2*(pin-GPIO_MODE_NUM_PINS), mode);
     efa:	1541                	addi	a0,a0,-16
        gpio_peri->GPIO_MODE1 = bitfield_write(gpio_peri->GPIO_MODE1,
     efc:	4754                	lw	a3,12(a4)
                                               BIT_MASK_3, 2*(pin-GPIO_MODE_NUM_PINS), mode);
     efe:	0506                	slli	a0,a0,0x1
  bitfield &= ~(mask << index);
     f00:	478d                	li	a5,3
     f02:	00a797b3          	sll	a5,a5,a0
     f06:	fff7c793          	not	a5,a5
     f0a:	8ff5                	and	a5,a5,a3
  bitfield |= (value & mask) << index;
     f0c:	00a595b3          	sll	a1,a1,a0
     f10:	8ddd                	or	a1,a1,a5
        gpio_peri->GPIO_MODE1 = bitfield_write(gpio_peri->GPIO_MODE1,
     f12:	c74c                	sw	a1,12(a4)
     f14:	b7cd                	j	ef6 <gpio_set_mode+0x24>

00000f16 <gpio_en_input_sampling>:
    if (pin > (MAX_PIN-1) || pin < 0)
     f16:	47fd                	li	a5,31
     f18:	00a7ee63          	bltu	a5,a0,f34 <gpio_en_input_sampling+0x1e>
    gpio_peri->GPIO_EN0 = bitfield_write(gpio_peri->GPIO_EN0,
     f1c:	30020737          	lui	a4,0x30020
     f20:	08072683          	lw	a3,128(a4) # 30020080 <_sp+0x30012170>
  bitfield &= ~(mask << index);
     f24:	4785                	li	a5,1
     f26:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
     f2a:	8d55                	or	a0,a0,a3
     f2c:	08a72023          	sw	a0,128(a4)
    return GpioOk;
     f30:	4501                	li	a0,0
     f32:	8082                	ret
        return GpioPinNotAcceptable;
     f34:	4509                	li	a0,2
}
     f36:	8082                	ret

00000f38 <gpio_dis_input_sampling>:
    if (pin > (MAX_PIN-1) || pin < 0)
     f38:	47fd                	li	a5,31
     f3a:	02a7e063          	bltu	a5,a0,f5a <gpio_dis_input_sampling+0x22>
    gpio_peri->GPIO_EN0 = bitfield_write(gpio_peri->GPIO_EN0,
     f3e:	30020737          	lui	a4,0x30020
     f42:	08072683          	lw	a3,128(a4) # 30020080 <_sp+0x30012170>
  bitfield &= ~(mask << index);
     f46:	4785                	li	a5,1
     f48:	00a797b3          	sll	a5,a5,a0
     f4c:	fff7c793          	not	a5,a5
     f50:	8ff5                	and	a5,a5,a3
     f52:	08f72023          	sw	a5,128(a4)
    return GpioOk;
     f56:	4501                	li	a0,0
     f58:	8082                	ret
        return GpioPinNotAcceptable;
     f5a:	4509                	li	a0,2
}
     f5c:	8082                	ret

00000f5e <gpio_reset_all>:
{
     f5e:	1141                	addi	sp,sp,-16
     f60:	c606                	sw	ra,12(sp)
    gpio_peri->GPIO_MODE0 = 0;
     f62:	300207b7          	lui	a5,0x30020
     f66:	0007a423          	sw	zero,8(a5) # 30020008 <_sp+0x300120f8>
    gpio_peri->GPIO_MODE1 = 0;
     f6a:	0007a623          	sw	zero,12(a5)
    gpio_peri->GPIO_EN0 = 0;
     f6e:	0807a023          	sw	zero,128(a5)
    gpio_peri->GPIO_CLEAR0 = 0;
     f72:	2807a023          	sw	zero,640(a5)
    gpio_peri->GPIO_SET0 = 0;
     f76:	2007a023          	sw	zero,512(a5)
    gpio_peri->GPIO_TOGGLE0 = 0;
     f7a:	3007a023          	sw	zero,768(a5)
    gpio_peri->INTRPT_RISE_EN0 = 0;
     f7e:	3807a023          	sw	zero,896(a5)
    gpio_peri->INTRPT_FALL_EN0 = 0;
     f82:	4007a023          	sw	zero,1024(a5)
    gpio_peri->INTRPT_LVL_HIGH_EN0 = 0;
     f86:	4807a023          	sw	zero,1152(a5)
    gpio_peri->INTRPT_LVL_LOW_EN0 = 0;
     f8a:	5007a023          	sw	zero,1280(a5)
    gpio_peri->INTRPT_STATUS0 = 0xFFFFFFFF;
     f8e:	577d                	li	a4,-1
     f90:	58e7a023          	sw	a4,1408(a5)
    gpio_reset_handlers_list( );
     f94:	3f11                	jal	ea8 <gpio_reset_handlers_list>
}
     f96:	40b2                	lw	ra,12(sp)
     f98:	0141                	addi	sp,sp,16
     f9a:	8082                	ret

00000f9c <gpio_read>:
    if (pin > (MAX_PIN-1) || pin < 0)
     f9c:	47fd                	li	a5,31
     f9e:	00a7ed63          	bltu	a5,a0,fb8 <gpio_read+0x1c>
    *val = bitfield_read(gpio_peri->GPIO_IN0, BIT_MASK_1, pin);
     fa2:	300207b7          	lui	a5,0x30020
     fa6:	1007a783          	lw	a5,256(a5) # 30020100 <_sp+0x300121f0>
     faa:	00a7d533          	srl	a0,a5,a0
     fae:	8905                	andi	a0,a0,1
     fb0:	00a58023          	sb	a0,0(a1)
    return GpioOk;
     fb4:	4501                	li	a0,0
     fb6:	8082                	ret
        return GpioPinNotAcceptable;
     fb8:	4509                	li	a0,2
}
     fba:	8082                	ret

00000fbc <gpio_toggle>:
    if (pin > (MAX_PIN-1) || pin < 0)
     fbc:	47fd                	li	a5,31
     fbe:	02a7ea63          	bltu	a5,a0,ff2 <gpio_toggle+0x36>
    gpio_peri->GPIO_OUT0 = bitfield_write(gpio_peri->GPIO_OUT0, BIT_MASK_1,
     fc2:	300206b7          	lui	a3,0x30020
     fc6:	1806a603          	lw	a2,384(a3) # 30020180 <_sp+0x30012270>
        pin, !(bitfield_read(gpio_peri->GPIO_OUT0, BIT_MASK_1, pin)));
     fca:	1806a783          	lw	a5,384(a3)
     fce:	4705                	li	a4,1
     fd0:	00a71733          	sll	a4,a4,a0
  return (bitfield >> index) & mask;
     fd4:	00a7d7b3          	srl	a5,a5,a0
  bitfield |= (value & mask) << index;
     fd8:	fff7c793          	not	a5,a5
  bitfield &= ~(mask << index);
     fdc:	fff74713          	not	a4,a4
  bitfield |= (value & mask) << index;
     fe0:	8b85                	andi	a5,a5,1
  bitfield &= ~(mask << index);
     fe2:	8f71                	and	a4,a4,a2
  bitfield |= (value & mask) << index;
     fe4:	00a797b3          	sll	a5,a5,a0
     fe8:	8fd9                	or	a5,a5,a4
    gpio_peri->GPIO_OUT0 = bitfield_write(gpio_peri->GPIO_OUT0, BIT_MASK_1,
     fea:	18f6a023          	sw	a5,384(a3)
    return GpioOk;
     fee:	4501                	li	a0,0
     ff0:	8082                	ret
        return GpioPinNotAcceptable;
     ff2:	4509                	li	a0,2
}
     ff4:	8082                	ret

00000ff6 <gpio_write>:
    if (pin > (MAX_PIN-1) || pin < 0)
     ff6:	47fd                	li	a5,31
     ff8:	02a7e363          	bltu	a5,a0,101e <gpio_write+0x28>
    gpio_peri->GPIO_OUT0 = bitfield_write(gpio_peri->GPIO_OUT0,
     ffc:	30020737          	lui	a4,0x30020
    1000:	18072683          	lw	a3,384(a4) # 30020180 <_sp+0x30012270>
  bitfield &= ~(mask << index);
    1004:	4785                	li	a5,1
    1006:	00a797b3          	sll	a5,a5,a0
    100a:	fff7c793          	not	a5,a5
    100e:	8ff5                	and	a5,a5,a3
  bitfield |= (value & mask) << index;
    1010:	00a595b3          	sll	a1,a1,a0
    1014:	8ddd                	or	a1,a1,a5
    1016:	18b72023          	sw	a1,384(a4)
    return GpioOk;
    101a:	4501                	li	a0,0
    101c:	8082                	ret
        return GpioPinNotAcceptable;
    101e:	4509                	li	a0,2
}
    1020:	8082                	ret

00001022 <gpio_intr_en_rise>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1022:	47fd                	li	a5,31
    1024:	00a7ee63          	bltu	a5,a0,1040 <gpio_intr_en_rise+0x1e>
        gpio_peri->INTRPT_RISE_EN0, BIT_MASK_1, pin, GPIO_INTR_ENABLE);
    1028:	30020737          	lui	a4,0x30020
    102c:	38072683          	lw	a3,896(a4) # 30020380 <_sp+0x30012470>
  bitfield &= ~(mask << index);
    1030:	4785                	li	a5,1
    1032:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    1036:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_RISE_EN0 =  bitfield_write(
    1038:	38a72023          	sw	a0,896(a4)
    return GpioOk;
    103c:	4501                	li	a0,0
    103e:	8082                	ret
        return GpioPinNotAcceptable;
    1040:	4509                	li	a0,2
}
    1042:	8082                	ret

00001044 <gpio_intr_en_fall>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1044:	47fd                	li	a5,31
    1046:	00a7ee63          	bltu	a5,a0,1062 <gpio_intr_en_fall+0x1e>
    gpio_peri->INTRPT_FALL_EN0 =  bitfield_write(gpio_peri->INTRPT_FALL_EN0,
    104a:	30020737          	lui	a4,0x30020
    104e:	40072683          	lw	a3,1024(a4) # 30020400 <_sp+0x300124f0>
  bitfield &= ~(mask << index);
    1052:	4785                	li	a5,1
    1054:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    1058:	8d55                	or	a0,a0,a3
    105a:	40a72023          	sw	a0,1024(a4)
    return GpioOk;
    105e:	4501                	li	a0,0
    1060:	8082                	ret
        return GpioPinNotAcceptable;
    1062:	4509                	li	a0,2
}
    1064:	8082                	ret

00001066 <gpio_intr_en_lvl_high>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1066:	47fd                	li	a5,31
    1068:	00a7ee63          	bltu	a5,a0,1084 <gpio_intr_en_lvl_high+0x1e>
        gpio_peri->INTRPT_LVL_HIGH_EN0, BIT_MASK_1, pin, GPIO_INTR_ENABLE);
    106c:	30020737          	lui	a4,0x30020
    1070:	48072683          	lw	a3,1152(a4) # 30020480 <_sp+0x30012570>
  bitfield &= ~(mask << index);
    1074:	4785                	li	a5,1
    1076:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    107a:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_LVL_HIGH_EN0 =  bitfield_write(
    107c:	48a72023          	sw	a0,1152(a4)
    return GpioOk;
    1080:	4501                	li	a0,0
    1082:	8082                	ret
        return GpioPinNotAcceptable;
    1084:	4509                	li	a0,2
}
    1086:	8082                	ret

00001088 <gpio_intr_en_lvl_low>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1088:	47fd                	li	a5,31
    108a:	00a7ee63          	bltu	a5,a0,10a6 <gpio_intr_en_lvl_low+0x1e>
        gpio_peri->INTRPT_LVL_LOW_EN0, BIT_MASK_1, pin, GPIO_INTR_ENABLE);
    108e:	30020737          	lui	a4,0x30020
    1092:	50072683          	lw	a3,1280(a4) # 30020500 <_sp+0x300125f0>
  bitfield &= ~(mask << index);
    1096:	4785                	li	a5,1
    1098:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    109c:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_LVL_LOW_EN0 =  bitfield_write(
    109e:	50a72023          	sw	a0,1280(a4)
    return GpioOk;
    10a2:	4501                	li	a0,0
    10a4:	8082                	ret
        return GpioPinNotAcceptable;
    10a6:	4509                	li	a0,2
}
    10a8:	8082                	ret

000010aa <gpio_intr_dis_rise>:
    if (pin > (MAX_PIN-1) || pin < 0)
    10aa:	47fd                	li	a5,31
    10ac:	02a7e063          	bltu	a5,a0,10cc <gpio_intr_dis_rise+0x22>
        gpio_peri->INTRPT_RISE_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    10b0:	30020737          	lui	a4,0x30020
    10b4:	38072683          	lw	a3,896(a4) # 30020380 <_sp+0x30012470>
  bitfield &= ~(mask << index);
    10b8:	4785                	li	a5,1
    10ba:	00a797b3          	sll	a5,a5,a0
    10be:	fff7c793          	not	a5,a5
    10c2:	8ff5                	and	a5,a5,a3
    gpio_peri->INTRPT_RISE_EN0 =  bitfield_write(
    10c4:	38f72023          	sw	a5,896(a4)
    return GpioOk;
    10c8:	4501                	li	a0,0
    10ca:	8082                	ret
        return GpioPinNotAcceptable;
    10cc:	4509                	li	a0,2
}
    10ce:	8082                	ret

000010d0 <gpio_intr_dis_fall>:
    if (pin > (MAX_PIN-1) || pin < 0)
    10d0:	47fd                	li	a5,31
    10d2:	02a7e063          	bltu	a5,a0,10f2 <gpio_intr_dis_fall+0x22>
        gpio_peri->INTRPT_FALL_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    10d6:	30020737          	lui	a4,0x30020
    10da:	40072683          	lw	a3,1024(a4) # 30020400 <_sp+0x300124f0>
    10de:	4785                	li	a5,1
    10e0:	00a797b3          	sll	a5,a5,a0
    10e4:	fff7c793          	not	a5,a5
    10e8:	8ff5                	and	a5,a5,a3
    gpio_peri->INTRPT_FALL_EN0 =  bitfield_write(
    10ea:	40f72023          	sw	a5,1024(a4)
    return GpioOk;
    10ee:	4501                	li	a0,0
    10f0:	8082                	ret
        return GpioPinNotAcceptable;
    10f2:	4509                	li	a0,2
}
    10f4:	8082                	ret

000010f6 <gpio_intr_dis_lvl_high>:
    if (pin > (MAX_PIN-1) || pin < 0)
    10f6:	47fd                	li	a5,31
    10f8:	02a7e063          	bltu	a5,a0,1118 <gpio_intr_dis_lvl_high+0x22>
        gpio_peri->INTRPT_LVL_HIGH_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    10fc:	30020737          	lui	a4,0x30020
    1100:	48072683          	lw	a3,1152(a4) # 30020480 <_sp+0x30012570>
    1104:	4785                	li	a5,1
    1106:	00a797b3          	sll	a5,a5,a0
    110a:	fff7c793          	not	a5,a5
    110e:	8ff5                	and	a5,a5,a3
    gpio_peri->INTRPT_LVL_HIGH_EN0 =  bitfield_write(
    1110:	48f72023          	sw	a5,1152(a4)
    return GpioOk;
    1114:	4501                	li	a0,0
    1116:	8082                	ret
        return GpioPinNotAcceptable;
    1118:	4509                	li	a0,2
}
    111a:	8082                	ret

0000111c <gpio_intr_dis_lvl_low>:
    if (pin > (MAX_PIN-1) || pin < 0)
    111c:	47fd                	li	a5,31
    111e:	02a7e063          	bltu	a5,a0,113e <gpio_intr_dis_lvl_low+0x22>
        gpio_peri->INTRPT_LVL_LOW_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    1122:	30020737          	lui	a4,0x30020
    1126:	50072683          	lw	a3,1280(a4) # 30020500 <_sp+0x300125f0>
    112a:	4785                	li	a5,1
    112c:	00a797b3          	sll	a5,a5,a0
    1130:	fff7c793          	not	a5,a5
    1134:	8ff5                	and	a5,a5,a3
    gpio_peri->INTRPT_LVL_LOW_EN0 =  bitfield_write(
    1136:	50f72023          	sw	a5,1280(a4)
    return GpioOk;
    113a:	4501                	li	a0,0
    113c:	8082                	ret
        return GpioPinNotAcceptable;
    113e:	4509                	li	a0,2
}
    1140:	8082                	ret

00001142 <gpio_intr_dis_all>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1142:	47fd                	li	a5,31
    1144:	04a7e063          	bltu	a5,a0,1184 <gpio_intr_dis_all+0x42>
        gpio_peri->INTRPT_RISE_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    1148:	30020737          	lui	a4,0x30020
    114c:	38070613          	addi	a2,a4,896 # 30020380 <_sp+0x30012470>
    1150:	4214                	lw	a3,0(a2)
    1152:	4785                	li	a5,1
    1154:	00a79533          	sll	a0,a5,a0
    1158:	fff54513          	not	a0,a0
    115c:	00a6f7b3          	and	a5,a3,a0
    gpio_peri->INTRPT_RISE_EN0 =  bitfield_write(
    1160:	c21c                	sw	a5,0(a2)
        gpio_peri->INTRPT_FALL_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    1162:	40070693          	addi	a3,a4,1024
    1166:	429c                	lw	a5,0(a3)
    1168:	8fe9                	and	a5,a5,a0
    gpio_peri->INTRPT_FALL_EN0 =  bitfield_write(
    116a:	c29c                	sw	a5,0(a3)
        gpio_peri->INTRPT_LVL_HIGH_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    116c:	48070693          	addi	a3,a4,1152
    1170:	429c                	lw	a5,0(a3)
        gpio_peri->INTRPT_LVL_LOW_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    1172:	50070713          	addi	a4,a4,1280
    1176:	8fe9                	and	a5,a5,a0
    gpio_peri->INTRPT_LVL_HIGH_EN0 =  bitfield_write(
    1178:	c29c                	sw	a5,0(a3)
        gpio_peri->INTRPT_LVL_LOW_EN0, BIT_MASK_1, pin, GPIO_INTR_DISABLE);
    117a:	431c                	lw	a5,0(a4)
    117c:	8fe9                	and	a5,a5,a0
    gpio_peri->INTRPT_LVL_LOW_EN0 =  bitfield_write(
    117e:	c31c                	sw	a5,0(a4)
    return GpioOk;
    1180:	4501                	li	a0,0
    1182:	8082                	ret
        return GpioPinNotAcceptable;
    1184:	4509                	li	a0,2
}
    1186:	8082                	ret

00001188 <gpio_intr_en>:
{
    1188:	1141                	addi	sp,sp,-16
    118a:	c426                	sw	s1,8(sp)
    118c:	c606                	sw	ra,12(sp)
    118e:	c24a                	sw	s2,4(sp)
    if (pin > (MAX_PIN-1) || pin < 0)
    1190:	47fd                	li	a5,31
        return GpioPinNotAcceptable;
    1192:	4489                	li	s1,2
    if (pin > (MAX_PIN-1) || pin < 0)
    1194:	02a7e263          	bltu	a5,a0,11b8 <gpio_intr_en+0x30>
    1198:	892a                	mv	s2,a0
    119a:	84ae                	mv	s1,a1
    gpio_intr_dis_all(pin);
    119c:	375d                	jal	1142 <gpio_intr_dis_all>
    switch(type)
    119e:	4799                	li	a5,6
    11a0:	0297ef63          	bltu	a5,s1,11de <gpio_intr_en+0x56>
    11a4:	6735                	lui	a4,0xd
    11a6:	00249793          	slli	a5,s1,0x2
    11aa:	80070713          	addi	a4,a4,-2048 # c800 <__udivdi3+0x8d82>
    11ae:	97ba                	add	a5,a5,a4
    11b0:	439c                	lw	a5,0(a5)
        gpio_intr_en_fall(pin);
    11b2:	854a                	mv	a0,s2
    switch(type)
    11b4:	8782                	jr	a5
        gpio_intr_en_rise(pin);
    11b6:	35b5                	jal	1022 <gpio_intr_en_rise>
}
    11b8:	40b2                	lw	ra,12(sp)
    11ba:	4912                	lw	s2,4(sp)
    11bc:	8526                	mv	a0,s1
    11be:	44a2                	lw	s1,8(sp)
    11c0:	0141                	addi	sp,sp,16
    11c2:	8082                	ret
        gpio_intr_en_rise(pin);
    11c4:	3db9                	jal	1022 <gpio_intr_en_rise>
        gpio_intr_en_fall(pin);
    11c6:	854a                	mv	a0,s2
    11c8:	3db5                	jal	1044 <gpio_intr_en_fall>
    return GpioOk;
    11ca:	4481                	li	s1,0
        break;
    11cc:	b7f5                	j	11b8 <gpio_intr_en+0x30>
        gpio_intr_en_rise(pin);
    11ce:	3d91                	jal	1022 <gpio_intr_en_rise>
        gpio_intr_en_lvl_low(pin);
    11d0:	854a                	mv	a0,s2
    11d2:	3d5d                	jal	1088 <gpio_intr_en_lvl_low>
        break;
    11d4:	bfdd                	j	11ca <gpio_intr_en+0x42>
        gpio_intr_en_fall(pin);
    11d6:	35bd                	jal	1044 <gpio_intr_en_fall>
        gpio_intr_en_lvl_high(pin);
    11d8:	854a                	mv	a0,s2
    11da:	3571                	jal	1066 <gpio_intr_en_lvl_high>
    11dc:	b7fd                	j	11ca <gpio_intr_en+0x42>
    switch(type)
    11de:	4491                	li	s1,4
    11e0:	bfe1                	j	11b8 <gpio_intr_en+0x30>

000011e2 <gpio_intr_check_stat_rise>:
    if (pin > (MAX_PIN-1) || pin < 0)
    11e2:	47fd                	li	a5,31
    11e4:	00a7ed63          	bltu	a5,a0,11fe <gpio_intr_check_stat_rise+0x1c>
    *is_pending = bitfield_read(gpio_peri->INTRPT_RISE_STATUS0, BIT_MASK_1, pin);
    11e8:	300207b7          	lui	a5,0x30020
    11ec:	6007a783          	lw	a5,1536(a5) # 30020600 <_sp+0x300126f0>
  return (bitfield >> index) & mask;
    11f0:	00a7d7b3          	srl	a5,a5,a0
    11f4:	8b85                	andi	a5,a5,1
    return GpioOk;
    11f6:	4501                	li	a0,0
    11f8:	00f58023          	sb	a5,0(a1)
}
    11fc:	8082                	ret
        *is_pending = GPIO_INTR_IS_NOT_TRIGGERED;
    11fe:	4781                	li	a5,0
        return GpioPinNotAcceptable;
    1200:	4509                	li	a0,2
    1202:	bfdd                	j	11f8 <gpio_intr_check_stat_rise+0x16>

00001204 <gpio_intr_check_stat_fall>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1204:	47fd                	li	a5,31
    1206:	00a7ed63          	bltu	a5,a0,1220 <gpio_intr_check_stat_fall+0x1c>
    *is_pending = bitfield_read(gpio_peri->INTRPT_FALL_STATUS0, BIT_MASK_1, pin);
    120a:	300207b7          	lui	a5,0x30020
    120e:	6807a783          	lw	a5,1664(a5) # 30020680 <_sp+0x30012770>
    1212:	00a7d7b3          	srl	a5,a5,a0
    1216:	8b85                	andi	a5,a5,1
    return GpioOk;
    1218:	4501                	li	a0,0
    121a:	00f58023          	sb	a5,0(a1)
}
    121e:	8082                	ret
        *is_pending = GPIO_INTR_IS_NOT_TRIGGERED;
    1220:	4781                	li	a5,0
        return GpioPinNotAcceptable;
    1222:	4509                	li	a0,2
    1224:	bfdd                	j	121a <gpio_intr_check_stat_fall+0x16>

00001226 <gpio_intr_check_stat_lvl_low>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1226:	47fd                	li	a5,31
    1228:	00a7ed63          	bltu	a5,a0,1242 <gpio_intr_check_stat_lvl_low+0x1c>
    *is_pending = bitfield_read(gpio_peri->INTRPT_LVL_LOW_STATUS0, BIT_MASK_1, pin);
    122c:	300207b7          	lui	a5,0x30020
    1230:	7807a783          	lw	a5,1920(a5) # 30020780 <_sp+0x30012870>
    1234:	00a7d7b3          	srl	a5,a5,a0
    1238:	8b85                	andi	a5,a5,1
    return GpioOk;
    123a:	4501                	li	a0,0
    123c:	00f58023          	sb	a5,0(a1)
}
    1240:	8082                	ret
        *is_pending = GPIO_INTR_IS_NOT_TRIGGERED;
    1242:	4781                	li	a5,0
        return GpioPinNotAcceptable;
    1244:	4509                	li	a0,2
    1246:	bfdd                	j	123c <gpio_intr_check_stat_lvl_low+0x16>

00001248 <gpio_intr_check_stat_lvl_high>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1248:	47fd                	li	a5,31
    124a:	00a7ed63          	bltu	a5,a0,1264 <gpio_intr_check_stat_lvl_high+0x1c>
     *is_pending = bitfield_read(gpio_peri->INTRPT_LVL_HIGH_STATUS0, BIT_MASK_1, pin);
    124e:	300207b7          	lui	a5,0x30020
    1252:	7007a783          	lw	a5,1792(a5) # 30020700 <_sp+0x300127f0>
    1256:	00a7d7b3          	srl	a5,a5,a0
    125a:	8b85                	andi	a5,a5,1
    return GpioOk;
    125c:	4501                	li	a0,0
    125e:	00f58023          	sb	a5,0(a1)
}
    1262:	8082                	ret
        *is_pending = GPIO_INTR_IS_NOT_TRIGGERED;
    1264:	4781                	li	a5,0
        return GpioPinNotAcceptable;
    1266:	4509                	li	a0,2
    1268:	bfdd                	j	125e <gpio_intr_check_stat_lvl_high+0x16>

0000126a <gpio_intr_check_stat>:
    if (pin > (MAX_PIN-1) || pin < 0)
    126a:	47fd                	li	a5,31
    126c:	00a7ed63          	bltu	a5,a0,1286 <gpio_intr_check_stat+0x1c>
    *is_pending = bitfield_read(gpio_peri->INTRPT_STATUS0, BIT_MASK_1, pin);
    1270:	300207b7          	lui	a5,0x30020
    1274:	5807a783          	lw	a5,1408(a5) # 30020580 <_sp+0x30012670>
    1278:	00a7d7b3          	srl	a5,a5,a0
    127c:	8b85                	andi	a5,a5,1
    return GpioOk;
    127e:	4501                	li	a0,0
    1280:	00f58023          	sb	a5,0(a1)
}
    1284:	8082                	ret
        *is_pending = GPIO_INTR_IS_NOT_TRIGGERED;
    1286:	4781                	li	a5,0
        return GpioPinNotAcceptable;
    1288:	4509                	li	a0,2
    128a:	bfdd                	j	1280 <gpio_intr_check_stat+0x16>

0000128c <gpio_intr_clear_stat_rise>:
    if (pin > (MAX_PIN-1) || pin < 0)
    128c:	47fd                	li	a5,31
    128e:	00a7ee63          	bltu	a5,a0,12aa <gpio_intr_clear_stat_rise+0x1e>
        gpio_peri->INTRPT_RISE_STATUS0, BIT_MASK_1, pin, GPIO_INTR_CLEAR);
    1292:	30020737          	lui	a4,0x30020
    1296:	60072683          	lw	a3,1536(a4) # 30020600 <_sp+0x300126f0>
  bitfield &= ~(mask << index);
    129a:	4785                	li	a5,1
    129c:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    12a0:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_RISE_STATUS0 = bitfield_write(
    12a2:	60a72023          	sw	a0,1536(a4)
    return GpioOk;
    12a6:	4501                	li	a0,0
    12a8:	8082                	ret
        return GpioPinNotAcceptable;
    12aa:	4509                	li	a0,2
}
    12ac:	8082                	ret

000012ae <gpio_intr_clear_stat_fall>:
    if (pin > (MAX_PIN-1) || pin < 0)
    12ae:	47fd                	li	a5,31
    12b0:	00a7ee63          	bltu	a5,a0,12cc <gpio_intr_clear_stat_fall+0x1e>
        gpio_peri->INTRPT_FALL_STATUS0, BIT_MASK_1, pin, GPIO_INTR_CLEAR);
    12b4:	30020737          	lui	a4,0x30020
    12b8:	68072683          	lw	a3,1664(a4) # 30020680 <_sp+0x30012770>
  bitfield &= ~(mask << index);
    12bc:	4785                	li	a5,1
    12be:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    12c2:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_FALL_STATUS0 = bitfield_write(
    12c4:	68a72023          	sw	a0,1664(a4)
    return GpioOk;
    12c8:	4501                	li	a0,0
    12ca:	8082                	ret
        return GpioPinNotAcceptable;
    12cc:	4509                	li	a0,2
}
    12ce:	8082                	ret

000012d0 <gpio_intr_clear_stat_lvl_low>:
    if (pin > (MAX_PIN-1) || pin < 0)
    12d0:	47fd                	li	a5,31
    12d2:	00a7ee63          	bltu	a5,a0,12ee <gpio_intr_clear_stat_lvl_low+0x1e>
        gpio_peri->INTRPT_LVL_LOW_STATUS0, BIT_MASK_1, pin, GPIO_INTR_CLEAR);
    12d6:	30020737          	lui	a4,0x30020
    12da:	78072683          	lw	a3,1920(a4) # 30020780 <_sp+0x30012870>
  bitfield &= ~(mask << index);
    12de:	4785                	li	a5,1
    12e0:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    12e4:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_LVL_LOW_STATUS0 = bitfield_write(
    12e6:	78a72023          	sw	a0,1920(a4)
    return GpioOk;
    12ea:	4501                	li	a0,0
    12ec:	8082                	ret
        return GpioPinNotAcceptable;
    12ee:	4509                	li	a0,2
}
    12f0:	8082                	ret

000012f2 <gpio_intr_clear_stat_lvl_high>:
    if (pin > (MAX_PIN-1) || pin < 0)
    12f2:	47fd                	li	a5,31
    12f4:	00a7ee63          	bltu	a5,a0,1310 <gpio_intr_clear_stat_lvl_high+0x1e>
        gpio_peri->INTRPT_LVL_HIGH_STATUS0, BIT_MASK_1, pin, GPIO_INTR_CLEAR);
    12f8:	30020737          	lui	a4,0x30020
    12fc:	70072683          	lw	a3,1792(a4) # 30020700 <_sp+0x300127f0>
  bitfield &= ~(mask << index);
    1300:	4785                	li	a5,1
    1302:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    1306:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_LVL_HIGH_STATUS0 = bitfield_write(
    1308:	70a72023          	sw	a0,1792(a4)
    return GpioOk;
    130c:	4501                	li	a0,0
    130e:	8082                	ret
        return GpioPinNotAcceptable;
    1310:	4509                	li	a0,2
}
    1312:	8082                	ret

00001314 <gpio_intr_clear_stat>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1314:	47fd                	li	a5,31
    1316:	00a7ee63          	bltu	a5,a0,1332 <gpio_intr_clear_stat+0x1e>
        gpio_peri->INTRPT_STATUS0, BIT_MASK_1, pin, GPIO_INTR_CLEAR);
    131a:	30020737          	lui	a4,0x30020
    131e:	58072683          	lw	a3,1408(a4) # 30020580 <_sp+0x30012670>
  bitfield &= ~(mask << index);
    1322:	4785                	li	a5,1
    1324:	00a79533          	sll	a0,a5,a0
  bitfield |= (value & mask) << index;
    1328:	8d55                	or	a0,a0,a3
    gpio_peri->INTRPT_STATUS0 = bitfield_write(
    132a:	58a72023          	sw	a0,1408(a4)
    return GpioOk;
    132e:	4501                	li	a0,0
    1330:	8082                	ret
        return GpioPinNotAcceptable;
    1332:	4509                	li	a0,2
}
    1334:	8082                	ret

00001336 <gpio_intr_set_mode>:
        gpio_peri->CFG, BIT_MASK_1, GPIO_CFG_INTR_MODE_INDEX, mode);
    1336:	30020737          	lui	a4,0x30020
    133a:	435c                	lw	a5,4(a4)
    133c:	8905                	andi	a0,a0,1
  bitfield &= ~(mask << index);
    133e:	9bf9                	andi	a5,a5,-2
  bitfield |= (value & mask) << index;
    1340:	8d5d                	or	a0,a0,a5
    gpio_peri->CFG = bitfield_write(
    1342:	c348                	sw	a0,4(a4)
}
    1344:	8082                	ret

00001346 <gpio_reset>:
    if (pin > (MAX_PIN-1) || pin < 0)
    1346:	47fd                	li	a5,31
    1348:	04a7e763          	bltu	a5,a0,1396 <gpio_reset+0x50>
{
    134c:	1141                	addi	sp,sp,-16
    134e:	c426                	sw	s1,8(sp)
    1350:	84aa                	mv	s1,a0
    gpio_intr_set_mode (0);
    1352:	4501                	li	a0,0
{
    1354:	c606                	sw	ra,12(sp)
    gpio_intr_set_mode (0);
    1356:	37c5                	jal	1336 <gpio_intr_set_mode>
    gpio_set_mode (pin, GpioModeIn);
    1358:	4581                	li	a1,0
    135a:	8526                	mv	a0,s1
    135c:	3e9d                	jal	ed2 <gpio_set_mode>
    gpio_dis_input_sampling (pin);
    135e:	8526                	mv	a0,s1
    1360:	3ee1                	jal	f38 <gpio_dis_input_sampling>
    gpio_peri->GPIO_CLEAR0 = bitfield_write(gpio_peri->GPIO_CLEAR0,
    1362:	30020737          	lui	a4,0x30020
    1366:	28070613          	addi	a2,a4,640 # 30020280 <_sp+0x30012370>
    136a:	4214                	lw	a3,0(a2)
  bitfield &= ~(mask << index);
    136c:	4785                	li	a5,1
    136e:	009797b3          	sll	a5,a5,s1
    1372:	fff7c793          	not	a5,a5
    1376:	8efd                	and	a3,a3,a5
    1378:	c214                	sw	a3,0(a2)
    gpio_peri->GPIO_SET0 = bitfield_write(gpio_peri->GPIO_SET0,
    137a:	20070713          	addi	a4,a4,512
    137e:	4314                	lw	a3,0(a4)
    gpio_intr_dis_all(pin);
    1380:	8526                	mv	a0,s1
    1382:	8ff5                	and	a5,a5,a3
    gpio_peri->GPIO_SET0 = bitfield_write(gpio_peri->GPIO_SET0,
    1384:	c31c                	sw	a5,0(a4)
    gpio_intr_dis_all(pin);
    1386:	3b75                	jal	1142 <gpio_intr_dis_all>
    gpio_intr_clear_stat(pin);
    1388:	8526                	mv	a0,s1
    138a:	3769                	jal	1314 <gpio_intr_clear_stat>
}
    138c:	40b2                	lw	ra,12(sp)
    138e:	44a2                	lw	s1,8(sp)
    gpio_intr_clear_stat(pin);
    1390:	4501                	li	a0,0
}
    1392:	0141                	addi	sp,sp,16
    1394:	8082                	ret
        return GpioPinNotAcceptable;
    1396:	4509                	li	a0,2
}
    1398:	8082                	ret

0000139a <gpio_config>:
{
    139a:	1101                	addi	sp,sp,-32
    139c:	ce06                	sw	ra,28(sp)
    139e:	cc26                	sw	s1,24(sp)
    13a0:	ca4a                	sw	s2,20(sp)
    13a2:	00054903          	lbu	s2,0(a0)
    if (cfg.pin > (MAX_PIN-1) || cfg.pin < 0)
    13a6:	47fd                	li	a5,31
    13a8:	0527e263          	bltu	a5,s2,13ec <gpio_config+0x52>
    13ac:	414c                	lw	a1,4(a0)
    13ae:	84aa                	mv	s1,a0
    gpio_reset (cfg.pin);
    13b0:	854a                	mv	a0,s2
    13b2:	c62e                	sw	a1,12(sp)
    13b4:	3f49                	jal	1346 <gpio_reset>
    if ((cfg.mode < GpioModeIn) || (cfg.mode > GpioModeoutOpenDrain1))
    13b6:	45b2                	lw	a1,12(sp)
    13b8:	478d                	li	a5,3
        return GpioModeNotAcceptable;
    13ba:	450d                	li	a0,3
    if ((cfg.mode < GpioModeIn) || (cfg.mode > GpioModeoutOpenDrain1))
    13bc:	02b7e363          	bltu	a5,a1,13e2 <gpio_config+0x48>
    gpio_set_mode (cfg.pin, cfg.mode);
    13c0:	854a                	mv	a0,s2
    13c2:	3e01                	jal	ed2 <gpio_set_mode>
    if (cfg.en_input_sampling == true)
    13c4:	0084c783          	lbu	a5,8(s1) # 20070008 <_sp+0x200620f8>
    13c8:	c399                	beqz	a5,13ce <gpio_config+0x34>
        gpio_en_input_sampling (cfg.pin);
    13ca:	854a                	mv	a0,s2
    13cc:	36a9                	jal	f16 <gpio_en_input_sampling>
    if (cfg.en_intr == true)
    13ce:	0094c783          	lbu	a5,9(s1)
    return GpioOk;
    13d2:	4501                	li	a0,0
    if (cfg.en_intr == true)
    13d4:	c799                	beqz	a5,13e2 <gpio_config+0x48>
        if (gpio_intr_en (cfg.pin, cfg.intr_type) != GpioOk)
    13d6:	44cc                	lw	a1,12(s1)
    13d8:	854a                	mv	a0,s2
    13da:	337d                	jal	1188 <gpio_intr_en>
    13dc:	00a03533          	snez	a0,a0
    13e0:	050a                	slli	a0,a0,0x2
}
    13e2:	40f2                	lw	ra,28(sp)
    13e4:	44e2                	lw	s1,24(sp)
    13e6:	4952                	lw	s2,20(sp)
    13e8:	6105                	addi	sp,sp,32
    13ea:	8082                	ret
        return GpioPinNotAcceptable;
    13ec:	4509                	li	a0,2
    13ee:	bfd5                	j	13e2 <gpio_config+0x48>

000013f0 <handler_irq_dummy>:
/*                            LOCAL FUNCTIONS                               */
/**                                                                        **/
/****************************************************************************/

__attribute__((optimize("O0"))) static void handler_irq_dummy( uint32_t dummy )
{
    13f0:	1101                	addi	sp,sp,-32
    13f2:	ce22                	sw	s0,28(sp)
    13f4:	1000                	addi	s0,sp,32
    13f6:	fea42623          	sw	a0,-20(s0)
}
    13fa:	0001                	nop
    13fc:	4472                	lw	s0,28(sp)
    13fe:	6105                	addi	sp,sp,32
    1400:	8082                	ret
    1402:	0001                	nop

00001404 <handler_irq_external>:
{
    1404:	715d                	addi	sp,sp,-80
    1406:	cc4a                	sw	s2,24(sp)
  *claim_data = rv_plic_peri->CC0;
    1408:	30000937          	lui	s2,0x30000
{
    140c:	de26                	sw	s1,60(sp)
  *claim_data = rv_plic_peri->CC0;
    140e:	20c92483          	lw	s1,524(s2) # 3000020c <_sp+0x2fff22fc>
{
    1412:	d23e                	sw	a5,36(sp)
    handlers[int_id](int_id);
    1414:	67b5                	lui	a5,0xd
{
    1416:	d43a                	sw	a4,40(sp)
    handlers[int_id](int_id);
    1418:	d8478793          	addi	a5,a5,-636 # cd84 <handlers>
    141c:	00249713          	slli	a4,s1,0x2
    1420:	97ba                	add	a5,a5,a4
    1422:	439c                	lw	a5,0(a5)
{
    1424:	dc2a                	sw	a0,56(sp)
    1426:	c686                	sw	ra,76(sp)
    1428:	c496                	sw	t0,72(sp)
    142a:	c29a                	sw	t1,68(sp)
    142c:	c09e                	sw	t2,64(sp)
    142e:	da2e                	sw	a1,52(sp)
    1430:	d832                	sw	a2,48(sp)
    1432:	d636                	sw	a3,44(sp)
    1434:	d042                	sw	a6,32(sp)
    1436:	ce46                	sw	a7,28(sp)
    1438:	ca72                	sw	t3,20(sp)
    143a:	c876                	sw	t4,16(sp)
    143c:	c67a                	sw	t5,12(sp)
    143e:	c47e                	sw	t6,8(sp)
    handlers[int_id](int_id);
    1440:	8526                	mv	a0,s1
    1442:	9782                	jalr	a5
  rv_plic_peri->CC0 = *complete_data;
    1444:	20992623          	sw	s1,524(s2)
}
    1448:	40b6                	lw	ra,76(sp)
    144a:	42a6                	lw	t0,72(sp)
    144c:	4316                	lw	t1,68(sp)
    144e:	4386                	lw	t2,64(sp)
    1450:	54f2                	lw	s1,60(sp)
    1452:	5562                	lw	a0,56(sp)
    1454:	55d2                	lw	a1,52(sp)
    1456:	5642                	lw	a2,48(sp)
    1458:	56b2                	lw	a3,44(sp)
    145a:	5722                	lw	a4,40(sp)
    145c:	5792                	lw	a5,36(sp)
    145e:	5802                	lw	a6,32(sp)
    1460:	48f2                	lw	a7,28(sp)
    1462:	4962                	lw	s2,24(sp)
    1464:	4e52                	lw	t3,20(sp)
    1466:	4ec2                	lw	t4,16(sp)
    1468:	4f32                	lw	t5,12(sp)
    146a:	4fa2                	lw	t6,8(sp)
    146c:	6161                	addi	sp,sp,80
    146e:	30200073          	mret

00001472 <plic_irq_set_enabled>:
  if(irq >= RV_PLIC_PARAM_NUM_SRC)
    1472:	03f00793          	li	a5,63
{
    1476:	872a                	mv	a4,a0
  if(irq >= RV_PLIC_PARAM_NUM_SRC)
    1478:	02a7eb63          	bltu	a5,a0,14ae <plic_irq_set_enabled+0x3c>
  if (state != kPlicToggleEnabled && state!=kPlicToggleDisabled)
    147c:	4785                	li	a5,1
    return kPlicBadArg;
    147e:	4509                	li	a0,2
  if (state != kPlicToggleEnabled && state!=kPlicToggleDisabled)
    1480:	02b7e863          	bltu	a5,a1,14b0 <plic_irq_set_enabled+0x3e>

static ptrdiff_t plic_offset_from_reg0( uint32_t irq)
{
  return irq / RV_PLIC_PARAM_REG_WIDTH;
    1484:	00575693          	srli	a3,a4,0x5
  (&rv_plic_peri->IE00)[offset] = bitfield_write((&rv_plic_peri->IE00)[offset],
    1488:	30000637          	lui	a2,0x30000
    148c:	20060613          	addi	a2,a2,512 # 30000200 <_sp+0x2fff22f0>
    1490:	068a                	slli	a3,a3,0x2
    1492:	96b2                	add	a3,a3,a2
    1494:	4290                	lw	a2,0(a3)
    1496:	8b7d                	andi	a4,a4,31
    1498:	00e797b3          	sll	a5,a5,a4
    149c:	fff7c793          	not	a5,a5
    14a0:	8ff1                	and	a5,a5,a2
  bitfield |= (value & mask) << index;
    14a2:	00e595b3          	sll	a1,a1,a4
    14a6:	8ddd                	or	a1,a1,a5
    14a8:	c28c                	sw	a1,0(a3)
  return kPlicOk;
    14aa:	4501                	li	a0,0
    14ac:	8082                	ret
    return kPlicBadArg;
    14ae:	4509                	li	a0,2
}
    14b0:	8082                	ret

000014b2 <plic_irq_get_enabled>:
  if(irq >= RV_PLIC_PARAM_NUM_SRC)
    14b2:	03f00793          	li	a5,63
    14b6:	02a7e163          	bltu	a5,a0,14d8 <plic_irq_get_enabled+0x26>
  return irq / RV_PLIC_PARAM_REG_WIDTH;
    14ba:	00555793          	srli	a5,a0,0x5
  *state = bitfield_read((&rv_plic_peri->IE00)[offset], BIT_MASK_1, bit_index);
    14be:	30000737          	lui	a4,0x30000
    14c2:	20070713          	addi	a4,a4,512 # 30000200 <_sp+0x2fff22f0>
    14c6:	078a                	slli	a5,a5,0x2
    14c8:	97ba                	add	a5,a5,a4
    14ca:	439c                	lw	a5,0(a5)
  return (bitfield >> index) & mask;
    14cc:	00a7d7b3          	srl	a5,a5,a0
    14d0:	8b85                	andi	a5,a5,1
    14d2:	c19c                	sw	a5,0(a1)
  return kPlicOk;
    14d4:	4501                	li	a0,0
    14d6:	8082                	ret
    return kPlicBadArg;
    14d8:	4509                	li	a0,2
}
    14da:	8082                	ret

000014dc <plic_irq_set_trigger>:
  if(irq >= RV_PLIC_PARAM_NUM_SRC)
    14dc:	03f00793          	li	a5,63
    14e0:	02a7e963          	bltu	a5,a0,1512 <plic_irq_set_trigger+0x36>
  return irq / RV_PLIC_PARAM_REG_WIDTH;
    14e4:	00555693          	srli	a3,a0,0x5
  (&rv_plic_peri->LE0)[offset] = bitfield_write((&rv_plic_peri->LE0)[offset],
    14e8:	300007b7          	lui	a5,0x30000
    14ec:	07a1                	addi	a5,a5,8
    14ee:	068a                	slli	a3,a3,0x2
    14f0:	96be                	add	a3,a3,a5
    14f2:	429c                	lw	a5,0(a3)
    14f4:	897d                	andi	a0,a0,31
  bitfield &= ~(mask << index);
    14f6:	4705                	li	a4,1
    14f8:	00a71733          	sll	a4,a4,a0
    14fc:	fff74713          	not	a4,a4
    1500:	8f7d                	and	a4,a4,a5
  bitfield |= (value & mask) << index;
    1502:	0015f793          	andi	a5,a1,1
    1506:	00a797b3          	sll	a5,a5,a0
    150a:	8fd9                	or	a5,a5,a4
    150c:	c29c                	sw	a5,0(a3)
  return kPlicOk;
    150e:	4501                	li	a0,0
    1510:	8082                	ret
    return kPlicBadArg;
    1512:	4509                	li	a0,2
}
    1514:	8082                	ret

00001516 <plic_irq_set_priority>:
  if(irq >= RV_PLIC_PARAM_NUM_SRC || priority > plicMaxPriority)
    1516:	03f00713          	li	a4,63
{
    151a:	87aa                	mv	a5,a0
  if(irq >= RV_PLIC_PARAM_NUM_SRC || priority > plicMaxPriority)
    151c:	00a76e63          	bltu	a4,a0,1538 <plic_irq_set_priority+0x22>
    1520:	471d                	li	a4,7
    return kPlicBadArg;
    1522:	4509                	li	a0,2
  if(irq >= RV_PLIC_PARAM_NUM_SRC || priority > plicMaxPriority)
    1524:	00b76b63          	bltu	a4,a1,153a <plic_irq_set_priority+0x24>
  (&rv_plic_peri->PRIO0)[irq] = priority;
    1528:	30000737          	lui	a4,0x30000
    152c:	0741                	addi	a4,a4,16
    152e:	078a                	slli	a5,a5,0x2
    1530:	97ba                	add	a5,a5,a4
    1532:	c38c                	sw	a1,0(a5)
  return kPlicOk;
    1534:	4501                	li	a0,0
    1536:	8082                	ret
    return kPlicBadArg;
    1538:	4509                	li	a0,2
}
    153a:	8082                	ret

0000153c <plic_target_set_threshold>:
  if(threshold > plicMaxPriority)
    153c:	479d                	li	a5,7
    153e:	00a7e863          	bltu	a5,a0,154e <plic_target_set_threshold+0x12>
  rv_plic_peri->THRESHOLD0 = threshold;
    1542:	300007b7          	lui	a5,0x30000
    1546:	20a7a423          	sw	a0,520(a5) # 30000208 <_sp+0x2fff22f8>
  return kPlicOk;
    154a:	4501                	li	a0,0
    154c:	8082                	ret
    return kPlicBadArg;
    154e:	4509                	li	a0,2
}
    1550:	8082                	ret

00001552 <plic_irq_is_pending>:
{
    1552:	872a                	mv	a4,a0
  if(irq >= RV_PLIC_PARAM_NUM_SRC || is_pending == NULL)
    1554:	03f00793          	li	a5,63
    return kPlicBadArg;
    1558:	4509                	li	a0,2
  if(irq >= RV_PLIC_PARAM_NUM_SRC || is_pending == NULL)
    155a:	02e7e163          	bltu	a5,a4,157c <plic_irq_is_pending+0x2a>
    155e:	cd99                	beqz	a1,157c <plic_irq_is_pending+0x2a>
  return irq / RV_PLIC_PARAM_REG_WIDTH;
    1560:	00575693          	srli	a3,a4,0x5
  *is_pending = bitfield_read((&rv_plic_peri->IP0)[offset], BIT_MASK_1, bit_index);
    1564:	068a                	slli	a3,a3,0x2
    1566:	300007b7          	lui	a5,0x30000
    156a:	97b6                	add	a5,a5,a3
    156c:	439c                	lw	a5,0(a5)
  return kPlicOk;
    156e:	4501                	li	a0,0
  *is_pending = bitfield_read((&rv_plic_peri->IP0)[offset], BIT_MASK_1, bit_index);
    1570:	00e7d7b3          	srl	a5,a5,a4
    1574:	8b85                	andi	a5,a5,1
    1576:	00f58023          	sb	a5,0(a1)
  return kPlicOk;
    157a:	8082                	ret
}
    157c:	8082                	ret

0000157e <plic_irq_claim>:
  if (claim_data == NULL)
    157e:	c901                	beqz	a0,158e <plic_irq_claim+0x10>
  *claim_data = rv_plic_peri->CC0;
    1580:	300007b7          	lui	a5,0x30000
    1584:	20c7a783          	lw	a5,524(a5) # 3000020c <_sp+0x2fff22fc>
    1588:	c11c                	sw	a5,0(a0)
  return kPlicOk;
    158a:	4501                	li	a0,0
    158c:	8082                	ret
    return kPlicBadArg;
    158e:	4509                	li	a0,2
}
    1590:	8082                	ret

00001592 <plic_irq_complete>:
  if (complete_data == NULL)
    1592:	c901                	beqz	a0,15a2 <plic_irq_complete+0x10>
  rv_plic_peri->CC0 = *complete_data;
    1594:	4118                	lw	a4,0(a0)
    1596:	300007b7          	lui	a5,0x30000
  return kPlicOk;
    159a:	4501                	li	a0,0
  rv_plic_peri->CC0 = *complete_data;
    159c:	20e7a623          	sw	a4,524(a5) # 3000020c <_sp+0x2fff22fc>
  return kPlicOk;
    15a0:	8082                	ret
    return kPlicBadArg;
    15a2:	4509                	li	a0,2
}
    15a4:	8082                	ret

000015a6 <plic_software_irq_force>:
  rv_plic_peri->MSIP0 = 1;
    15a6:	300007b7          	lui	a5,0x30000
    15aa:	4705                	li	a4,1
    15ac:	20e7a823          	sw	a4,528(a5) # 30000210 <_sp+0x2fff2300>
}
    15b0:	8082                	ret

000015b2 <plic_software_irq_acknowledge>:
  rv_plic_peri->MSIP0 = 0;
    15b2:	300007b7          	lui	a5,0x30000
    15b6:	2007a823          	sw	zero,528(a5) # 30000210 <_sp+0x2fff2300>
}
    15ba:	8082                	ret

000015bc <plic_software_irq_is_pending>:
  return rv_plic_peri->MSIP0;
    15bc:	300007b7          	lui	a5,0x30000
    15c0:	2107a503          	lw	a0,528(a5) # 30000210 <_sp+0x2fff2300>
}
    15c4:	8082                	ret

000015c6 <plic_assign_external_irq_handler>:
  if( id >= EXT_IRQ_START && id <= QTY_INTR )
    15c6:	fcc50713          	addi	a4,a0,-52
    15ca:	47b1                	li	a5,12
    15cc:	00e7ea63          	bltu	a5,a4,15e0 <plic_assign_external_irq_handler+0x1a>
    handlers[ id ] = (handler_funct_t*) handler;
    15d0:	67b5                	lui	a5,0xd
    15d2:	050a                	slli	a0,a0,0x2
    15d4:	d8478793          	addi	a5,a5,-636 # cd84 <handlers>
    15d8:	97aa                	add	a5,a5,a0
    15da:	c38c                	sw	a1,0(a5)
    return kPlicOk;
    15dc:	4501                	li	a0,0
    15de:	8082                	ret
  return kPlicBadArg;
    15e0:	4509                	li	a0,2
}
    15e2:	8082                	ret

000015e4 <plic_reset_handlers_list>:
  handlers[NULL_INTR] = &handler_irq_dummy;
    15e4:	6605                	lui	a2,0x1
    15e6:	6735                	lui	a4,0xd
    15e8:	3f060793          	addi	a5,a2,1008 # 13f0 <handler_irq_dummy>
{
    15ec:	1141                	addi	sp,sp,-16
      handlers[i] = &handler_irq_gpio;
    15ee:	6505                	lui	a0,0x1
      handlers[i] = &handler_irq_uart;
    15f0:	6805                	lui	a6,0x1
  handlers[NULL_INTR] = &handler_irq_dummy;
    15f2:	d8f72223          	sw	a5,-636(a4) # cd84 <handlers>
{
    15f6:	c626                	sw	s1,12(sp)
    15f8:	c44a                	sw	s2,8(sp)
    15fa:	d8470693          	addi	a3,a4,-636
  handlers[NULL_INTR] = &handler_irq_dummy;
    15fe:	4e01                	li	t3,0
    1600:	4301                	li	t1,0
    1602:	4881                	li	a7,0
  for( uint8_t i = NULL_INTR +1; i < QTY_INTR; i++ )
    1604:	4785                	li	a5,1
    1606:	d8470713          	addi	a4,a4,-636
    160a:	3f060613          	addi	a2,a2,1008
    if ( i <= UART_ID_END)
    160e:	4f21                	li	t5,8
    else if ( i <= GPIO_ID_END)
    1610:	02000f93          	li	t6,32
    else if ( i <= I2C_ID_END)
    1614:	03000293          	li	t0,48
    else if ( i == SPI_ID)
    1618:	03100393          	li	t2,49
    else if ( i == I2S_ID)
    161c:	03200493          	li	s1,50
    else if ( i == DMA_ID)
    1620:	03300913          	li	s2,51
      handlers[i] = &handler_irq_i2c;
    1624:	00000593          	li	a1,0
      handlers[i] = &handler_irq_gpio;
    1628:	ec250513          	addi	a0,a0,-318 # ec2 <handler_irq_gpio>
      handlers[i] = &handler_irq_uart;
    162c:	73480813          	addi	a6,a6,1844 # 1734 <handler_irq_uart>
  for( uint8_t i = NULL_INTR +1; i < QTY_INTR; i++ )
    1630:	04000e93          	li	t4,64
    if ( i <= UART_ID_END)
    1634:	04ff6063          	bltu	t5,a5,1674 <plic_reset_handlers_list+0x90>
      handlers[i] = &handler_irq_uart;
    1638:	0106a223          	sw	a6,4(a3)
  for( uint8_t i = NULL_INTR +1; i < QTY_INTR; i++ )
    163c:	0785                	addi	a5,a5,1
    163e:	0ff7f793          	zext.b	a5,a5
    1642:	0691                	addi	a3,a3,4
    1644:	ffd798e3          	bne	a5,t4,1634 <plic_reset_handlers_list+0x50>
    1648:	000e0663          	beqz	t3,1654 <plic_reset_handlers_list+0x70>
    164c:	6be00793          	li	a5,1726
    1650:	0cf72623          	sw	a5,204(a4)
    1654:	00030663          	beqz	t1,1660 <plic_reset_handlers_list+0x7c>
    1658:	00000793          	li	a5,0
    165c:	0cf72423          	sw	a5,200(a4)
    1660:	00088663          	beqz	a7,166c <plic_reset_handlers_list+0x88>
    1664:	00000793          	li	a5,0
    1668:	0cf72223          	sw	a5,196(a4)
}
    166c:	44b2                	lw	s1,12(sp)
    166e:	4922                	lw	s2,8(sp)
    1670:	0141                	addi	sp,sp,16
    1672:	8082                	ret
    else if ( i <= GPIO_ID_END)
    1674:	00ffe463          	bltu	t6,a5,167c <plic_reset_handlers_list+0x98>
      handlers[i] = &handler_irq_gpio;
    1678:	c2c8                	sw	a0,4(a3)
    167a:	b7c9                	j	163c <plic_reset_handlers_list+0x58>
    else if ( i <= I2C_ID_END)
    167c:	00f2e463          	bltu	t0,a5,1684 <plic_reset_handlers_list+0xa0>
      handlers[i] = &handler_irq_i2c;
    1680:	c2cc                	sw	a1,4(a3)
    1682:	bf6d                	j	163c <plic_reset_handlers_list+0x58>
    else if ( i == SPI_ID)
    1684:	00778863          	beq	a5,t2,1694 <plic_reset_handlers_list+0xb0>
    else if ( i == I2S_ID)
    1688:	00978863          	beq	a5,s1,1698 <plic_reset_handlers_list+0xb4>
    else if ( i == DMA_ID)
    168c:	01278863          	beq	a5,s2,169c <plic_reset_handlers_list+0xb8>
      handlers[i] = &handler_irq_dummy;
    1690:	c2d0                	sw	a2,4(a3)
    1692:	b76d                	j	163c <plic_reset_handlers_list+0x58>
    1694:	4885                	li	a7,1
    1696:	b75d                	j	163c <plic_reset_handlers_list+0x58>
    1698:	4305                	li	t1,1
    169a:	b74d                	j	163c <plic_reset_handlers_list+0x58>
    169c:	4e05                	li	t3,1
    169e:	bf79                	j	163c <plic_reset_handlers_list+0x58>

000016a0 <plic_Init>:
    (&rv_plic_peri->LE0)[i] = 0;
    16a0:	300007b7          	lui	a5,0x30000
    16a4:	0007a423          	sw	zero,8(a5) # 30000008 <_sp+0x2fff20f8>
  for(uint8_t i=0; i<RV_PLIC_PARAM_NUM_SRC; i++)
    16a8:	30000737          	lui	a4,0x30000
    (&rv_plic_peri->LE0)[i] = 0;
    16ac:	0007a623          	sw	zero,12(a5)
  for(uint8_t i=0; i<RV_PLIC_PARAM_NUM_SRC; i++)
    16b0:	11070693          	addi	a3,a4,272 # 30000110 <_sp+0x2fff2200>
    (&rv_plic_peri->LE0)[i] = 0;
    16b4:	07c1                	addi	a5,a5,16
    (&rv_plic_peri->PRIO0)[i] = 0;
    16b6:	0007a023          	sw	zero,0(a5)
  for(uint8_t i=0; i<RV_PLIC_PARAM_NUM_SRC; i++)
    16ba:	0791                	addi	a5,a5,4
    16bc:	fed79de3          	bne	a5,a3,16b6 <plic_Init+0x16>
    (&rv_plic_peri->IE00)[i] = 0;
    16c0:	20070793          	addi	a5,a4,512
    16c4:	0007a023          	sw	zero,0(a5)
    16c8:	20470793          	addi	a5,a4,516
    16cc:	0007a023          	sw	zero,0(a5)
  rv_plic_peri->THRESHOLD0 = 0;
    16d0:	20072423          	sw	zero,520(a4)
  if(rv_plic_peri->THRESHOLD0 != 0)
    16d4:	20872783          	lw	a5,520(a4)
    16d8:	c799                	beqz	a5,16e6 <plic_Init+0x46>
    return kPlicError;
    16da:	4505                	li	a0,1
}
    16dc:	8082                	ret
    return kPlicError;
    16de:	4505                	li	a0,1
}
    16e0:	40f2                	lw	ra,28(sp)
    16e2:	6105                	addi	sp,sp,32
    16e4:	8082                	ret
{
    16e6:	1101                	addi	sp,sp,-32
    16e8:	ce06                	sw	ra,28(sp)
  rv_plic_peri->MSIP0 = 0;
    16ea:	20072823          	sw	zero,528(a4)
  if(rv_plic_peri->MSIP0 != 0)
    16ee:	21072503          	lw	a0,528(a4)
    16f2:	c62a                	sw	a0,12(sp)
    16f4:	f56d                	bnez	a0,16de <plic_Init+0x3e>
  plic_reset_handlers_list();
    16f6:	35fd                	jal	15e4 <plic_reset_handlers_list>
    16f8:	4532                	lw	a0,12(sp)
  return kPlicOk;
    16fa:	b7dd                	j	16e0 <plic_Init+0x40>
	...

000016fe <soc_ctrl_set_valid>:

#include "soc_ctrl.h"
#include "soc_ctrl_regs.h"  // Generated.

void soc_ctrl_set_valid(const soc_ctrl_t *soc_ctrl, uint8_t valid) {
  mmio_region_write8(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_EXIT_VALID_REG_OFFSET), valid);
    16fe:	411c                	lw	a5,0(a0)
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write8(mmio_region_t base, ptrdiff_t offset,
                               uint8_t value) {
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
    1700:	00b78023          	sb	a1,0(a5)
}
    1704:	8082                	ret

00001706 <soc_ctrl_set_exit_value>:

void soc_ctrl_set_exit_value(const soc_ctrl_t *soc_ctrl, uint32_t exit_value) {
  mmio_region_write32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_EXIT_VALUE_REG_OFFSET), exit_value);
    1706:	411c                	lw	a5,0(a0)
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    1708:	c3cc                	sw	a1,4(a5)
}
    170a:	8082                	ret

0000170c <soc_ctrl_get_frequency>:

uint32_t soc_ctrl_get_frequency(const soc_ctrl_t *soc_ctrl) {
  return mmio_region_read32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_SYSTEM_FREQUENCY_HZ_REG_OFFSET));
    170c:	411c                	lw	a5,0(a0)
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    170e:	4fc8                	lw	a0,28(a5)
}
    1710:	8082                	ret

00001712 <soc_ctrl_set_frequency>:

void soc_ctrl_set_frequency(const soc_ctrl_t *soc_ctrl, uint32_t frequency) {
  mmio_region_write32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_SYSTEM_FREQUENCY_HZ_REG_OFFSET), frequency);
    1712:	411c                	lw	a5,0(a0)
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    1714:	cfcc                	sw	a1,28(a5)
}
    1716:	8082                	ret

00001718 <soc_ctrl_select_spi_memio>:

void soc_ctrl_select_spi_memio(const soc_ctrl_t *soc_ctrl) {
  mmio_region_write32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_ENABLE_SPI_SEL_REG_OFFSET), 0x1);
    1718:	411c                	lw	a5,0(a0)
    171a:	4705                	li	a4,1
    171c:	cf98                	sw	a4,24(a5)
    171e:	cbd8                	sw	a4,20(a5)
  mmio_region_write32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_USE_SPIMEMIO_REG_OFFSET), SOC_CTRL_SPI_FLASH_MODE_SPIMEMIO);
}
    1720:	8082                	ret

00001722 <soc_ctrl_select_spi_host>:

void soc_ctrl_select_spi_host(const soc_ctrl_t *soc_ctrl) {
  mmio_region_write32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_ENABLE_SPI_SEL_REG_OFFSET), 0x1);
    1722:	411c                	lw	a5,0(a0)
    1724:	4705                	li	a4,1
    1726:	cf98                	sw	a4,24(a5)
    1728:	0007aa23          	sw	zero,20(a5)
  mmio_region_write32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_USE_SPIMEMIO_REG_OFFSET), SOC_CTRL_SPI_FLASH_MODE_SPIHOST);
}
    172c:	8082                	ret

0000172e <get_spi_flash_mode>:

uint32_t get_spi_flash_mode(const soc_ctrl_t *soc_ctrl) {
  return mmio_region_read32(soc_ctrl->base_addr, (ptrdiff_t)(SOC_CTRL_USE_SPIMEMIO_REG_OFFSET));
    172e:	411c                	lw	a5,0(a0)
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    1730:	4bc8                	lw	a0,20(a5)
    1732:	8082                	ret

00001734 <handler_irq_uart>:
size_t uart_sink(void *uart, const char *data, size_t len) {
  return uart_write((const uart_t *)uart, (const uint8_t *)data, len);
}

__attribute__((weak, optimize("O0"))) void handler_irq_uart(uint32_t id)
{
    1734:	1101                	addi	sp,sp,-32
    1736:	ce22                	sw	s0,28(sp)
    1738:	1000                	addi	s0,sp,32
    173a:	fea42623          	sw	a0,-20(s0)
 // Replace this function with a non-weak implementation
    173e:	0001                	nop
    1740:	4472                	lw	s0,28(sp)
    1742:	6105                	addi	sp,sp,32
    1744:	8082                	ret

00001746 <uart_init>:
  if (uart == NULL) {
    1746:	cd31                	beqz	a0,17a2 <uart_init+0x5c>
  if (uart->baudrate == 0 || uart->clk_freq_hz == 0) {
    1748:	414c                	lw	a1,4(a0)
system_error_t uart_init(const uart_t *uart) {
    174a:	1141                	addi	sp,sp,-16
    174c:	c426                	sw	s1,8(sp)
    174e:	c606                	sw	ra,12(sp)
    1750:	84aa                	mv	s1,a0
  if (uart->baudrate == 0 || uart->clk_freq_hz == 0) {
    1752:	cda9                	beqz	a1,17ac <uart_init+0x66>
    1754:	4510                	lw	a2,8(a0)
    1756:	ca39                	beqz	a2,17ac <uart_init+0x66>
  uint64_t nco =
    1758:	01459513          	slli	a0,a1,0x14
    175c:	4681                	li	a3,0
    175e:	81b1                	srli	a1,a1,0xc
    1760:	31e020ef          	jal	ra,3a7e <__udivdi3>
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
    1764:	01051713          	slli	a4,a0,0x10
    1768:	8341                	srli	a4,a4,0x10
  if (nco != nco_masked) {
    176a:	04a71663          	bne	a4,a0,17b6 <uart_init+0x70>
    176e:	e5a1                	bnez	a1,17b6 <uart_init+0x70>
  uart_reset(uart);
    1770:	409c                	lw	a5,0(s1)
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    1772:	468d                	li	a3,3
  bitfield |= (value & field.mask) << field.index;
    1774:	0742                	slli	a4,a4,0x10
    1776:	0007a623          	sw	zero,12(a5)
    177a:	cfd4                	sw	a3,28(a5)
    177c:	0207a223          	sw	zero,36(a5)
    1780:	0207a623          	sw	zero,44(a5)
    1784:	0007a223          	sw	zero,4(a5)
    1788:	56fd                	li	a3,-1
    178a:	c394                	sw	a3,0(a5)
    178c:	00376713          	ori	a4,a4,3
    1790:	c7d8                	sw	a4,12(a5)
    1792:	0007a223          	sw	zero,4(a5)
  return kErrorOk;
    1796:	73900513          	li	a0,1849
}
    179a:	40b2                	lw	ra,12(sp)
    179c:	44a2                	lw	s1,8(sp)
    179e:	0141                	addi	sp,sp,16
    17a0:	8082                	ret
    return kErrorUartInvalidArgument;
    17a2:	01415537          	lui	a0,0x1415
    17a6:	50350513          	addi	a0,a0,1283 # 1415503 <_sp+0x14075f3>
}
    17aa:	8082                	ret
    return kErrorUartInvalidArgument;
    17ac:	01415537          	lui	a0,0x1415
    return kErrorUartBadBaudRate;
    17b0:	50350513          	addi	a0,a0,1283 # 1415503 <_sp+0x14075f3>
    17b4:	b7dd                	j	179a <uart_init+0x54>
    17b6:	02415537          	lui	a0,0x2415
    17ba:	bfdd                	j	17b0 <uart_init+0x6a>

000017bc <uart_putchar>:
  while (uart_tx_full(uart)) {
    17bc:	4118                	lw	a4,0(a0)
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    17be:	4b1c                	lw	a5,16(a4)
    17c0:	8b85                	andi	a5,a5,1
    17c2:	fff5                	bnez	a5,17be <uart_putchar+0x2>
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    17c4:	cf0c                	sw	a1,24(a4)
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    17c6:	4b1c                	lw	a5,16(a4)
  return (bitfield >> field.index) & field.mask;
    17c8:	838d                	srli	a5,a5,0x3
  while (!uart_tx_idle(uart)) {
    17ca:	8b85                	andi	a5,a5,1
    17cc:	dfed                	beqz	a5,17c6 <uart_putchar+0xa>
}
    17ce:	8082                	ret

000017d0 <uart_getchar>:
  while (uart_rx_empty(uart));
    17d0:	4118                	lw	a4,0(a0)
    17d2:	4b1c                	lw	a5,16(a4)
    17d4:	8395                	srli	a5,a5,0x5
    17d6:	8b85                	andi	a5,a5,1
    17d8:	ffed                	bnez	a5,17d2 <uart_getchar+0x2>
    17da:	4b5c                	lw	a5,20(a4)
}
    17dc:	4505                	li	a0,1
  return bitfield_field32_read(reg, UART_RDATA_RDATA_FIELD);
    17de:	00f58023          	sb	a5,0(a1)
}
    17e2:	8082                	ret

000017e4 <uart_write>:
size_t uart_write(const uart_t *uart, const uint8_t *data, size_t len) {
    17e4:	1101                	addi	sp,sp,-32
    17e6:	cc26                	sw	s1,24(sp)
    17e8:	ca4a                	sw	s2,20(sp)
    17ea:	c84e                	sw	s3,16(sp)
    17ec:	c652                	sw	s4,12(sp)
    17ee:	ce06                	sw	ra,28(sp)
    17f0:	89aa                	mv	s3,a0
    17f2:	84ae                	mv	s1,a1
    17f4:	8932                	mv	s2,a2
    17f6:	00c58a33          	add	s4,a1,a2
  while (len) {
    17fa:	01449a63          	bne	s1,s4,180e <uart_write+0x2a>
}
    17fe:	40f2                	lw	ra,28(sp)
    1800:	44e2                	lw	s1,24(sp)
    1802:	49c2                	lw	s3,16(sp)
    1804:	4a32                	lw	s4,12(sp)
    1806:	854a                	mv	a0,s2
    1808:	4952                	lw	s2,20(sp)
    180a:	6105                	addi	sp,sp,32
    180c:	8082                	ret
    uart_putchar(uart, *data);
    180e:	0004c583          	lbu	a1,0(s1)
    1812:	854e                	mv	a0,s3
    data++;
    1814:	0485                	addi	s1,s1,1
    uart_putchar(uart, *data);
    1816:	375d                	jal	17bc <uart_putchar>
    len--;
    1818:	b7cd                	j	17fa <uart_write+0x16>

0000181a <uart_read>:
size_t uart_read(const uart_t *uart, const uint8_t *data, size_t len) {
    181a:	1101                	addi	sp,sp,-32
    181c:	cc26                	sw	s1,24(sp)
    181e:	ca4a                	sw	s2,20(sp)
    1820:	c84e                	sw	s3,16(sp)
    1822:	c652                	sw	s4,12(sp)
    1824:	ce06                	sw	ra,28(sp)
    1826:	89aa                	mv	s3,a0
    1828:	84ae                	mv	s1,a1
    182a:	8932                	mv	s2,a2
    182c:	00c58a33          	add	s4,a1,a2
  while (len) {
    1830:	01449a63          	bne	s1,s4,1844 <uart_read+0x2a>
}
    1834:	40f2                	lw	ra,28(sp)
    1836:	44e2                	lw	s1,24(sp)
    1838:	49c2                	lw	s3,16(sp)
    183a:	4a32                	lw	s4,12(sp)
    183c:	854a                	mv	a0,s2
    183e:	4952                	lw	s2,20(sp)
    1840:	6105                	addi	sp,sp,32
    1842:	8082                	ret
    uart_getchar(uart, data);
    1844:	85a6                	mv	a1,s1
    1846:	854e                	mv	a0,s3
    1848:	3761                	jal	17d0 <uart_getchar>
    data++;
    184a:	0485                	addi	s1,s1,1
    len--;
    184c:	b7d5                	j	1830 <uart_read+0x16>

0000184e <uart_sink>:
  return uart_write((const uart_t *)uart, (const uint8_t *)data, len);
    184e:	bf59                	j	17e4 <uart_write>

00001850 <print_exc_msg>:
/**
 * Default Error Handling
 * @param msg error message supplied by caller
 * TODO - this will be soon by a real print formatting
 */
static void print_exc_msg(const char *msg) {
    1850:	85aa                	mv	a1,a0
  printf("%s", msg);
    1852:	6535                	lui	a0,0xd
static void print_exc_msg(const char *msg) {
    1854:	1141                	addi	sp,sp,-16
  printf("%s", msg);
    1856:	81c50513          	addi	a0,a0,-2020 # c81c <__udivdi3+0x8d9e>
static void print_exc_msg(const char *msg) {
    185a:	c606                	sw	ra,12(sp)
  printf("%s", msg);
    185c:	29d5                	jal	1d50 <iprintf>
  CSR_READ(CSR_REG_MTVAL, &mtval);
    185e:	343025f3          	csrr	a1,mtval
  printf("MTVAL value is 0x%x\n", get_mtval());
    1862:	6535                	lui	a0,0xd
    1864:	82050513          	addi	a0,a0,-2016 # c820 <__udivdi3+0x8da2>
    1868:	21e5                	jal	1d50 <iprintf>
  while (1) {
    186a:	a001                	j	186a <print_exc_msg+0x1a>

0000186c <handler_irq_software>:
      while (1) {
      };
  }
}

__attribute__((weak)) void handler_irq_software(void) {
    186c:	7139                	addi	sp,sp,-64
    186e:	d62a                	sw	a0,44(sp)
  printf("Software IRQ triggered!\n");
    1870:	6535                	lui	a0,0xd
    1872:	83850513          	addi	a0,a0,-1992 # c838 <__udivdi3+0x8dba>
__attribute__((weak)) void handler_irq_software(void) {
    1876:	de06                	sw	ra,60(sp)
    1878:	dc16                	sw	t0,56(sp)
    187a:	da1a                	sw	t1,52(sp)
    187c:	d81e                	sw	t2,48(sp)
    187e:	d42e                	sw	a1,40(sp)
    1880:	d232                	sw	a2,36(sp)
    1882:	d036                	sw	a3,32(sp)
    1884:	ce3a                	sw	a4,28(sp)
    1886:	cc3e                	sw	a5,24(sp)
    1888:	ca42                	sw	a6,20(sp)
    188a:	c846                	sw	a7,16(sp)
    188c:	c672                	sw	t3,12(sp)
    188e:	c476                	sw	t4,8(sp)
    1890:	c27a                	sw	t5,4(sp)
    1892:	c07e                	sw	t6,0(sp)
  printf("Software IRQ triggered!\n");
    1894:	2bc9                	jal	1e66 <puts>
  while (1) {
    1896:	a001                	j	1896 <handler_irq_software+0x2a>

00001898 <handler_irq_timer>:
  }
}

__attribute__((weak)) void handler_irq_timer(void) {
    1898:	7139                	addi	sp,sp,-64
    189a:	d62a                	sw	a0,44(sp)
  printf("Timer IRQ triggered!\n");
    189c:	6535                	lui	a0,0xd
    189e:	85050513          	addi	a0,a0,-1968 # c850 <__udivdi3+0x8dd2>
__attribute__((weak)) void handler_irq_timer(void) {
    18a2:	de06                	sw	ra,60(sp)
    18a4:	dc16                	sw	t0,56(sp)
    18a6:	da1a                	sw	t1,52(sp)
    18a8:	d81e                	sw	t2,48(sp)
    18aa:	d42e                	sw	a1,40(sp)
    18ac:	d232                	sw	a2,36(sp)
    18ae:	d036                	sw	a3,32(sp)
    18b0:	ce3a                	sw	a4,28(sp)
    18b2:	cc3e                	sw	a5,24(sp)
    18b4:	ca42                	sw	a6,20(sp)
    18b6:	c846                	sw	a7,16(sp)
    18b8:	c672                	sw	t3,12(sp)
    18ba:	c476                	sw	t4,8(sp)
    18bc:	c27a                	sw	t5,4(sp)
    18be:	c07e                	sw	t6,0(sp)
  printf("Timer IRQ triggered!\n");
    18c0:	235d                	jal	1e66 <puts>
  while (1) {
    18c2:	a001                	j	18c2 <handler_irq_timer+0x2a>
  }
}

__attribute__((weak)) void handler_irq_external(void) {
    18c4:	7139                	addi	sp,sp,-64
    18c6:	d62a                	sw	a0,44(sp)
  printf("External IRQ triggered!\n");
    18c8:	6535                	lui	a0,0xd
    18ca:	86850513          	addi	a0,a0,-1944 # c868 <__udivdi3+0x8dea>
__attribute__((weak)) void handler_irq_external(void) {
    18ce:	de06                	sw	ra,60(sp)
    18d0:	dc16                	sw	t0,56(sp)
    18d2:	da1a                	sw	t1,52(sp)
    18d4:	d81e                	sw	t2,48(sp)
    18d6:	d42e                	sw	a1,40(sp)
    18d8:	d232                	sw	a2,36(sp)
    18da:	d036                	sw	a3,32(sp)
    18dc:	ce3a                	sw	a4,28(sp)
    18de:	cc3e                	sw	a5,24(sp)
    18e0:	ca42                	sw	a6,20(sp)
    18e2:	c846                	sw	a7,16(sp)
    18e4:	c672                	sw	t3,12(sp)
    18e6:	c476                	sw	t4,8(sp)
    18e8:	c27a                	sw	t5,4(sp)
    18ea:	c07e                	sw	t6,0(sp)
  printf("External IRQ triggered!\n");
    18ec:	2bad                	jal	1e66 <puts>
  while (1) {
    18ee:	a001                	j	18ee <handler_irq_timer+0x56>

000018f0 <handler_instr_acc_fault>:
  }
}

__attribute__((weak)) void handler_instr_acc_fault(void) {
    18f0:	715d                	addi	sp,sp,-80
  const char fault_msg[] =
    18f2:	65b5                	lui	a1,0xd
    18f4:	03500613          	li	a2,53
    18f8:	88058593          	addi	a1,a1,-1920 # c880 <__udivdi3+0x8e02>
    18fc:	0028                	addi	a0,sp,8
__attribute__((weak)) void handler_instr_acc_fault(void) {
    18fe:	c686                	sw	ra,76(sp)
  const char fault_msg[] =
    1900:	2ec5                	jal	1cf0 <memcpy>
      "Instruction access fault, mtval shows fault address\n";
  print_exc_msg(fault_msg);
    1902:	0028                	addi	a0,sp,8
    1904:	37b1                	jal	1850 <print_exc_msg>

00001906 <handler_instr_ill_fault>:
}

__attribute__((weak)) void handler_instr_ill_fault(void) {
    1906:	715d                	addi	sp,sp,-80
  const char fault_msg[] =
    1908:	65b5                	lui	a1,0xd
    190a:	03c00613          	li	a2,60
    190e:	8b858593          	addi	a1,a1,-1864 # c8b8 <__udivdi3+0x8e3a>
    1912:	0048                	addi	a0,sp,4
__attribute__((weak)) void handler_instr_ill_fault(void) {
    1914:	c686                	sw	ra,76(sp)
  const char fault_msg[] =
    1916:	2ee9                	jal	1cf0 <memcpy>
      "Illegal Instruction fault, mtval shows instruction content\n";
  print_exc_msg(fault_msg);
    1918:	0048                	addi	a0,sp,4
    191a:	3f1d                	jal	1850 <print_exc_msg>

0000191c <handler_bkpt>:
}

__attribute__((weak)) void handler_bkpt(void) {
    191c:	715d                	addi	sp,sp,-80
  const char exc_msg[] =
    191e:	65b5                	lui	a1,0xd
    1920:	03900613          	li	a2,57
    1924:	8f458593          	addi	a1,a1,-1804 # c8f4 <__udivdi3+0x8e76>
    1928:	0048                	addi	a0,sp,4
__attribute__((weak)) void handler_bkpt(void) {
    192a:	c686                	sw	ra,76(sp)
  const char exc_msg[] =
    192c:	26d1                	jal	1cf0 <memcpy>
      "Breakpoint triggerd, mtval shows the breakpoint address\n";
  print_exc_msg(exc_msg);
    192e:	0048                	addi	a0,sp,4
    1930:	3705                	jal	1850 <print_exc_msg>

00001932 <handler_lsu_fault>:
}

__attribute__((weak)) void handler_lsu_fault(void) {
    1932:	715d                	addi	sp,sp,-80
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address\n";
    1934:	65b5                	lui	a1,0xd
    1936:	03100613          	li	a2,49
    193a:	93058593          	addi	a1,a1,-1744 # c930 <__udivdi3+0x8eb2>
    193e:	0068                	addi	a0,sp,12
__attribute__((weak)) void handler_lsu_fault(void) {
    1940:	c686                	sw	ra,76(sp)
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address\n";
    1942:	267d                	jal	1cf0 <memcpy>
  print_exc_msg(exc_msg);
    1944:	0068                	addi	a0,sp,12
    1946:	3729                	jal	1850 <print_exc_msg>

00001948 <handler_ecall>:
}

__attribute__((weak)) void handler_ecall(void) {
  printf("Environment call encountered\n");
    1948:	6535                	lui	a0,0xd
__attribute__((weak)) void handler_ecall(void) {
    194a:	1141                	addi	sp,sp,-16
  printf("Environment call encountered\n");
    194c:	96450513          	addi	a0,a0,-1692 # c964 <__udivdi3+0x8ee6>
__attribute__((weak)) void handler_ecall(void) {
    1950:	c606                	sw	ra,12(sp)
  printf("Environment call encountered\n");
    1952:	2b11                	jal	1e66 <puts>
  while (1) {
    1954:	a001                	j	1954 <handler_ecall+0xc>
    1956:	0001                	nop

00001958 <handler_exception>:
__attribute__((weak)) void handler_exception(void) {
    1958:	7139                	addi	sp,sp,-64
    195a:	de06                	sw	ra,60(sp)
    195c:	dc16                	sw	t0,56(sp)
    195e:	da1a                	sw	t1,52(sp)
    1960:	d81e                	sw	t2,48(sp)
    1962:	d62a                	sw	a0,44(sp)
    1964:	d42e                	sw	a1,40(sp)
    1966:	d232                	sw	a2,36(sp)
    1968:	d036                	sw	a3,32(sp)
    196a:	ce3a                	sw	a4,28(sp)
    196c:	cc3e                	sw	a5,24(sp)
    196e:	ca42                	sw	a6,20(sp)
    1970:	c846                	sw	a7,16(sp)
    1972:	c672                	sw	t3,12(sp)
    1974:	c476                	sw	t4,8(sp)
    1976:	c27a                	sw	t5,4(sp)
    1978:	c07e                	sw	t6,0(sp)
  CSR_READ(CSR_REG_MCAUSE, &mcause);
    197a:	342027f3          	csrr	a5,mcause
  switch (exc_cause) {
    197e:	472d                	li	a4,11
  exc_cause = (exc_id_t)(mcause & kIdMax);
    1980:	8bfd                	andi	a5,a5,31
  switch (exc_cause) {
    1982:	04f76563          	bltu	a4,a5,19cc <handler_exception+0x74>
    1986:	6735                	lui	a4,0xd
    1988:	078a                	slli	a5,a5,0x2
    198a:	98470713          	addi	a4,a4,-1660 # c984 <__udivdi3+0x8f06>
    198e:	97ba                	add	a5,a5,a4
    1990:	439c                	lw	a5,0(a5)
    1992:	8782                	jr	a5
      handler_instr_acc_fault();
    1994:	3fb1                	jal	18f0 <handler_instr_acc_fault>
}
    1996:	50f2                	lw	ra,60(sp)
    1998:	52e2                	lw	t0,56(sp)
    199a:	5352                	lw	t1,52(sp)
    199c:	53c2                	lw	t2,48(sp)
    199e:	5532                	lw	a0,44(sp)
    19a0:	55a2                	lw	a1,40(sp)
    19a2:	5612                	lw	a2,36(sp)
    19a4:	5682                	lw	a3,32(sp)
    19a6:	4772                	lw	a4,28(sp)
    19a8:	47e2                	lw	a5,24(sp)
    19aa:	4852                	lw	a6,20(sp)
    19ac:	48c2                	lw	a7,16(sp)
    19ae:	4e32                	lw	t3,12(sp)
    19b0:	4ea2                	lw	t4,8(sp)
    19b2:	4f12                	lw	t5,4(sp)
    19b4:	4f82                	lw	t6,0(sp)
    19b6:	6121                	addi	sp,sp,64
    19b8:	30200073          	mret
      handler_instr_ill_fault();
    19bc:	37a9                	jal	1906 <handler_instr_ill_fault>
      break;
    19be:	bfe1                	j	1996 <handler_exception+0x3e>
      handler_bkpt();
    19c0:	3fb1                	jal	191c <handler_bkpt>
      break;
    19c2:	bfd1                	j	1996 <handler_exception+0x3e>
      handler_lsu_fault();
    19c4:	37bd                	jal	1932 <handler_lsu_fault>
      break;
    19c6:	bfc1                	j	1996 <handler_exception+0x3e>
      handler_ecall();
    19c8:	3741                	jal	1948 <handler_ecall>
      break;
    19ca:	b7f1                	j	1996 <handler_exception+0x3e>
      while (1) {
    19cc:	a001                	j	19cc <handler_exception+0x74>

000019ce <init>:
// Solderpad Hardware License, Version 2.1, see LICENSE.md for details.
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
int init()
{
    return 0;
    19ce:	4501                	li	a0,0
    19d0:	8082                	ret

000019d2 <nanosleep>:
    _write(STDOUT_FILENO, p, strlen(p));
}

int nanosleep(const struct timespec *rqtp, struct timespec *rmtp)
{
    errno = ENOSYS;
    19d2:	67b5                	lui	a5,0xd
    19d4:	05800713          	li	a4,88
    19d8:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    19dc:	557d                	li	a0,-1
    19de:	8082                	ret

000019e0 <_access>:

int _access(const char *file, int mode)
{
    errno = ENOSYS;
    19e0:	67b5                	lui	a5,0xd
    19e2:	05800713          	li	a4,88
    19e6:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    19ea:	557d                	li	a0,-1
    19ec:	8082                	ret

000019ee <_chdir>:

int _chdir(const char *path)
{
    errno = ENOSYS;
    19ee:	67b5                	lui	a5,0xd
    19f0:	05800713          	li	a4,88
    19f4:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    19f8:	557d                	li	a0,-1
    19fa:	8082                	ret

000019fc <_chmod>:

int _chmod(const char *path, mode_t mode)
{
    errno = ENOSYS;
    19fc:	67b5                	lui	a5,0xd
    19fe:	05800713          	li	a4,88
    1a02:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1a06:	557d                	li	a0,-1
    1a08:	8082                	ret

00001a0a <_chown>:

int _chown(const char *path, uid_t owner, gid_t group)
{
    errno = ENOSYS;
    1a0a:	67b5                	lui	a5,0xd
    1a0c:	05800713          	li	a4,88
    1a10:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1a14:	557d                	li	a0,-1
    1a16:	8082                	ret

00001a18 <_close>:

int _close(int file)
{
    return -1;
}
    1a18:	557d                	li	a0,-1
    1a1a:	8082                	ret

00001a1c <_execve>:

int _execve(const char *name, char *const argv[], char *const env[])
{
    errno = ENOMEM;
    1a1c:	67b5                	lui	a5,0xd
    1a1e:	4731                	li	a4,12
    1a20:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1a24:	557d                	li	a0,-1
    1a26:	8082                	ret

00001a28 <_exit>:

void _exit(int exit_status)
{
    1a28:	1101                	addi	sp,sp,-32
    soc_ctrl_t soc_ctrl;
    soc_ctrl.base_addr = mmio_region_from_addr((uintptr_t)SOC_CTRL_START_ADDRESS);
    1a2a:	200007b7          	lui	a5,0x20000
{
    1a2e:	85aa                	mv	a1,a0
    soc_ctrl_set_exit_value(&soc_ctrl, exit_status);
    1a30:	0068                	addi	a0,sp,12
{
    1a32:	ce06                	sw	ra,28(sp)
    soc_ctrl.base_addr = mmio_region_from_addr((uintptr_t)SOC_CTRL_START_ADDRESS);
    1a34:	c63e                	sw	a5,12(sp)
    soc_ctrl_set_exit_value(&soc_ctrl, exit_status);
    1a36:	39c1                	jal	1706 <soc_ctrl_set_exit_value>
    soc_ctrl_set_valid(&soc_ctrl, (uint8_t)1);
    1a38:	4585                	li	a1,1
    1a3a:	0068                	addi	a0,sp,12
    1a3c:	31c9                	jal	16fe <soc_ctrl_set_valid>

    asm volatile("wfi");
    1a3e:	10500073          	wfi

00001a42 <_faccessat>:
}

int _faccessat(int dirfd, const char *file, int mode, int flags)
{
    errno = ENOSYS;
    1a42:	67b5                	lui	a5,0xd
    1a44:	05800713          	li	a4,88
    1a48:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1a4c:	557d                	li	a0,-1
    1a4e:	8082                	ret

00001a50 <_fork>:

int _fork(void)
{
    errno = EAGAIN;
    1a50:	67b5                	lui	a5,0xd
    1a52:	472d                	li	a4,11
    1a54:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1a58:	557d                	li	a0,-1
    1a5a:	8082                	ret

00001a5c <_fstat>:

int _fstat(int file, struct stat *st)
{
    st->st_mode = S_IFCHR;
    1a5c:	6789                	lui	a5,0x2
    1a5e:	c1dc                	sw	a5,4(a1)
    return 0;
    // errno = -ENOSYS;
    // return -1;
}
    1a60:	4501                	li	a0,0
    1a62:	8082                	ret

00001a64 <_fstatat>:

int _fstatat(int dirfd, const char *file, struct stat *st, int flags)
{
    errno = ENOSYS;
    1a64:	67b5                	lui	a5,0xd
    1a66:	05800713          	li	a4,88
    1a6a:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1a6e:	557d                	li	a0,-1
    1a70:	8082                	ret

00001a72 <_ftime>:
    1a72:	67b5                	lui	a5,0xd
    1a74:	05800713          	li	a4,88
    1a78:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    1a7c:	557d                	li	a0,-1
    1a7e:	8082                	ret

00001a80 <_getcwd>:
    return -1;
}

char *_getcwd(char *buf, size_t size)
{
    errno = -ENOSYS;
    1a80:	67b5                	lui	a5,0xd
    1a82:	fa800713          	li	a4,-88
    1a86:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return NULL;
}
    1a8a:	4501                	li	a0,0
    1a8c:	8082                	ret

00001a8e <_getpid>:

int _getpid()
{
    return 1;
}
    1a8e:	4505                	li	a0,1
    1a90:	8082                	ret

00001a92 <_gettimeofday>:

int _gettimeofday(struct timeval *tp, void *tzp)
{
    errno = -ENOSYS;
    1a92:	67b5                	lui	a5,0xd
    1a94:	fa800713          	li	a4,-88
    1a98:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1a9c:	557d                	li	a0,-1
    1a9e:	8082                	ret

00001aa0 <_isatty>:

int _isatty(int file)
{
    return (file == STDOUT_FILENO);
    1aa0:	157d                	addi	a0,a0,-1
}
    1aa2:	00153513          	seqz	a0,a0
    1aa6:	8082                	ret

00001aa8 <_kill>:

int _kill(int pid, int sig)
{
    errno = EINVAL;
    1aa8:	67b5                	lui	a5,0xd
    1aaa:	4759                	li	a4,22
    1aac:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1ab0:	557d                	li	a0,-1
    1ab2:	8082                	ret

00001ab4 <_link>:

int _link(const char *old_name, const char *new_name)
{
    errno = EMLINK;
    1ab4:	67b5                	lui	a5,0xd
    1ab6:	477d                	li	a4,31
    1ab8:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1abc:	557d                	li	a0,-1
    1abe:	8082                	ret

00001ac0 <_lseek>:

off_t _lseek(int file, off_t ptr, int dir)
{
    return 0;
}
    1ac0:	4501                	li	a0,0
    1ac2:	8082                	ret

00001ac4 <_lstat>:
    1ac4:	67b5                	lui	a5,0xd
    1ac6:	05800713          	li	a4,88
    1aca:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    1ace:	557d                	li	a0,-1
    1ad0:	8082                	ret

00001ad2 <_open>:
}

int _open(const char *name, int flags, int mode)
{
    return -1;
}
    1ad2:	557d                	li	a0,-1
    1ad4:	8082                	ret

00001ad6 <_openat>:
    1ad6:	67b5                	lui	a5,0xd
    1ad8:	05800713          	li	a4,88
    1adc:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    1ae0:	557d                	li	a0,-1
    1ae2:	8082                	ret

00001ae4 <_read>:
}

ssize_t _read(int file, void *ptr, size_t len)
{
    return 0;
}
    1ae4:	4501                	li	a0,0
    1ae6:	8082                	ret

00001ae8 <_stat>:

int _stat(const char *file, struct stat *st)
{
    st->st_mode = S_IFCHR;
    1ae8:	6789                	lui	a5,0x2
    1aea:	c1dc                	sw	a5,4(a1)
    return 0;
    // errno = ENOSYS;
    // return -1;
}
    1aec:	4501                	li	a0,0
    1aee:	8082                	ret

00001af0 <_sysconf>:
    1af0:	557d                	li	a0,-1
    1af2:	8082                	ret

00001af4 <_times>:
}

clock_t _times(struct tms *buf)
{
    return -1;
}
    1af4:	557d                	li	a0,-1
    1af6:	8082                	ret

00001af8 <_unlink>:

int _unlink(const char *name)
{
    errno = ENOENT;
    1af8:	67b5                	lui	a5,0xd
    1afa:	4709                	li	a4,2
    1afc:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1b00:	557d                	li	a0,-1
    1b02:	8082                	ret

00001b04 <_utime>:
    1b04:	67b5                	lui	a5,0xd
    1b06:	05800713          	li	a4,88
    1b0a:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    1b0e:	557d                	li	a0,-1
    1b10:	8082                	ret

00001b12 <_wait>:
    return -1;
}

int _wait(int *status)
{
    errno = ECHILD;
    1b12:	67b5                	lui	a5,0xd
    1b14:	4729                	li	a4,10
    1b16:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
    return -1;
}
    1b1a:	557d                	li	a0,-1
    1b1c:	8082                	ret

00001b1e <_write>:

ssize_t _write(int file, const void *ptr, size_t len)
{
    if (file != STDOUT_FILENO) {
    1b1e:	4785                	li	a5,1
    1b20:	02f50263          	beq	a0,a5,1b44 <_write+0x26>
        errno = ENOSYS;
    1b24:	67b5                	lui	a5,0xd
    1b26:	05800713          	li	a4,88
    1b2a:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
        return -1;
    1b2e:	557d                	li	a0,-1
        return -1;
    }

    return uart_write(&uart,(uint8_t *)ptr,len);

}
    1b30:	8082                	ret
        errno = ENOSYS;
    1b32:	67b5                	lui	a5,0xd
    1b34:	05800713          	li	a4,88
    1b38:	d0e7a423          	sw	a4,-760(a5) # cd08 <errno>
        return -1;
    1b3c:	557d                	li	a0,-1
}
    1b3e:	50b2                	lw	ra,44(sp)
    1b40:	6145                	addi	sp,sp,48
    1b42:	8082                	ret
{
    1b44:	7179                	addi	sp,sp,-48
    soc_ctrl.base_addr = mmio_region_from_addr((uintptr_t)SOC_CTRL_START_ADDRESS);
    1b46:	200007b7          	lui	a5,0x20000
    1b4a:	c83e                	sw	a5,16(sp)
    uart.base_addr   = mmio_region_from_addr((uintptr_t)UART_START_ADDRESS);
    1b4c:	200b07b7          	lui	a5,0x200b0
    1b50:	ca3e                	sw	a5,20(sp)
    uart.baudrate    = UART_BAUDRATE;
    1b52:	67f1                	lui	a5,0x1c
    1b54:	20078793          	addi	a5,a5,512 # 1c200 <_sp+0xe2f0>
    uart.clk_freq_hz = soc_ctrl_get_frequency(&soc_ctrl);
    1b58:	0808                	addi	a0,sp,16
    uart.baudrate    = UART_BAUDRATE;
    1b5a:	cc3e                	sw	a5,24(sp)
{
    1b5c:	d606                	sw	ra,44(sp)
    1b5e:	c632                	sw	a2,12(sp)
    1b60:	c42e                	sw	a1,8(sp)
    uart.clk_freq_hz = soc_ctrl_get_frequency(&soc_ctrl);
    1b62:	366d                	jal	170c <soc_ctrl_get_frequency>
    1b64:	ce2a                	sw	a0,28(sp)
    if (uart_init(&uart) != kErrorOk) {
    1b66:	0848                	addi	a0,sp,20
    1b68:	3ef9                	jal	1746 <uart_init>
    1b6a:	73900793          	li	a5,1849
    1b6e:	fcf512e3          	bne	a0,a5,1b32 <_write+0x14>
    return uart_write(&uart,(uint8_t *)ptr,len);
    1b72:	4632                	lw	a2,12(sp)
    1b74:	45a2                	lw	a1,8(sp)
    1b76:	0848                	addi	a0,sp,20
    1b78:	31b5                	jal	17e4 <uart_write>
    1b7a:	b7d1                	j	1b3e <_write+0x20>

00001b7c <unimplemented_syscall>:
    _write(STDOUT_FILENO, p, strlen(p));
    1b7c:	65b5                	lui	a1,0xd
    1b7e:	02200613          	li	a2,34
    1b82:	9b458593          	addi	a1,a1,-1612 # c9b4 <__udivdi3+0x8f36>
    1b86:	4505                	li	a0,1
    1b88:	bf59                	j	1b1e <_write>

00001b8a <_brk>:
extern char __heap_end[];
static char *brk = __heap_start;

int _brk(void *addr)
{
    brk = addr;
    1b8a:	67b5                	lui	a5,0xd
    1b8c:	cea7ae23          	sw	a0,-772(a5) # ccfc <brk>
    return 0;
}
    1b90:	4501                	li	a0,0
    1b92:	8082                	ret

00001b94 <_sbrk>:

void *_sbrk(ptrdiff_t incr)
{
    char *old_brk = brk;

    if (__heap_start == __heap_end) {
    1b94:	6735                	lui	a4,0xd
    1b96:	67b5                	lui	a5,0xd
    char *old_brk = brk;
    1b98:	6635                	lui	a2,0xd
    if (__heap_start == __heap_end) {
    1b9a:	f1070713          	addi	a4,a4,-240 # cf10 <__BSS_END__>
    1b9e:	71078793          	addi	a5,a5,1808 # d710 <__heap_end>
{
    1ba2:	86aa                	mv	a3,a0
    char *old_brk = brk;
    1ba4:	cfc62503          	lw	a0,-772(a2) # ccfc <brk>
    if (__heap_start == __heap_end) {
    1ba8:	00f70d63          	beq	a4,a5,1bc2 <_sbrk+0x2e>
        return NULL;
    }

    if ((brk += incr) < __heap_end) {
    1bac:	00d50733          	add	a4,a0,a3
    1bb0:	00f77663          	bgeu	a4,a5,1bbc <_sbrk+0x28>
        brk += incr;
    1bb4:	9736                	add	a4,a4,a3
    1bb6:	cee62e23          	sw	a4,-772(a2)
    1bba:	8082                	ret
    } else {
        brk = __heap_end;
    1bbc:	cef62e23          	sw	a5,-772(a2)
    1bc0:	8082                	ret
        return NULL;
    1bc2:	4501                	li	a0,0
    }
    return old_brk;
}
    1bc4:	8082                	ret

00001bc6 <__no_irq_handler>:
/*	j __no_irq_handler */

.section .text.vecs
/* exception handling */
__no_irq_handler:
	la a0, no_exception_handler_msg
    1bc6:	0000b517          	auipc	a0,0xb
    1bca:	eb450513          	addi	a0,a0,-332 # ca7a <no_exception_handler_msg>
	jal ra, puts
    1bce:	298000ef          	jal	ra,1e66 <puts>
	j __no_irq_handler
    1bd2:	ff5ff06f          	j	1bc6 <__no_irq_handler>

00001bd6 <sw_irq_handler>:


sw_irq_handler:
	csrr t0, mcause
    1bd6:	342022f3          	csrr	t0,mcause
	slli t0, t0, 1  /* shift off the high bit */
    1bda:	00129293          	slli	t0,t0,0x1
	srli t0, t0, 1
    1bde:	0012d293          	srli	t0,t0,0x1
	li t1, 2
    1be2:	00200313          	li	t1,2
	beq t0, t1, handle_illegal_insn
    1be6:	02628c63          	beq	t0,t1,1c1e <handle_illegal_insn>
	li t1, 11
    1bea:	00b00313          	li	t1,11
	beq t0, t1, handle_ecall
    1bee:	00628863          	beq	t0,t1,1bfe <handle_ecall>
	li t1, 3
    1bf2:	00300313          	li	t1,3
	beq t0, t1, handle_ebreak
    1bf6:	00628c63          	beq	t0,t1,1c0e <handle_ebreak>
	j handle_unknown
    1bfa:	0340006f          	j	1c2e <handle_unknown>

00001bfe <handle_ecall>:

handle_ecall:
	la a0, ecall_msg
    1bfe:	0000b517          	auipc	a0,0xb
    1c02:	e1650513          	addi	a0,a0,-490 # ca14 <ecall_msg>
	jal ra, puts
    1c06:	260000ef          	jal	ra,1e66 <puts>
	j end_handler
    1c0a:	0340006f          	j	1c3e <end_handler>

00001c0e <handle_ebreak>:

handle_ebreak:
	la a0, ebreak_msg
    1c0e:	0000b517          	auipc	a0,0xb
    1c12:	e2750513          	addi	a0,a0,-473 # ca35 <ebreak_msg>
	jal ra, puts
    1c16:	250000ef          	jal	ra,1e66 <puts>
	j end_handler
    1c1a:	0240006f          	j	1c3e <end_handler>

00001c1e <handle_illegal_insn>:

handle_illegal_insn:
	la a0, illegal_insn_msg
    1c1e:	0000b517          	auipc	a0,0xb
    1c22:	dc750513          	addi	a0,a0,-569 # c9e5 <illegal_insn_msg>
	jal ra, puts
    1c26:	240000ef          	jal	ra,1e66 <puts>
	j end_handler
    1c2a:	0140006f          	j	1c3e <end_handler>

00001c2e <handle_unknown>:

handle_unknown:
	la a0, unknown_msg
    1c2e:	0000b517          	auipc	a0,0xb
    1c32:	e2950513          	addi	a0,a0,-471 # ca57 <unknown_msg>
	jal ra, puts
    1c36:	230000ef          	jal	ra,1e66 <puts>
	j end_handler
    1c3a:	0040006f          	j	1c3e <end_handler>

00001c3e <end_handler>:

end_handler:
	csrr a0, mepc
    1c3e:	34102573          	csrr	a0,mepc
	addi a0, a0, 4
    1c42:	00450513          	addi	a0,a0,4
	csrw mepc, a0
    1c46:	34151073          	csrw	mepc,a0
	mret
    1c4a:	30200073          	mret

00001c4e <verification_irq_handler>:
/* this interrupt can be generated for verification purposes, random or when the PC is equal to a given value*/
verification_irq_handler:
	mret
    1c4e:	30200073          	mret

00001c52 <atexit>:
    1c52:	85aa                	mv	a1,a0
    1c54:	4681                	li	a3,0
    1c56:	4601                	li	a2,0
    1c58:	4501                	li	a0,0
    1c5a:	a9e1                	j	2132 <__register_exitproc>

00001c5c <__libc_fini_array>:
    1c5c:	1141                	addi	sp,sp,-16
    1c5e:	67b5                	lui	a5,0xd
    1c60:	c422                	sw	s0,8(sp)
    1c62:	6435                	lui	s0,0xd
    1c64:	c9078713          	addi	a4,a5,-880 # cc90 <impure_data>
    1c68:	c9040413          	addi	s0,s0,-880 # cc90 <impure_data>
    1c6c:	8c19                	sub	s0,s0,a4
    1c6e:	c226                	sw	s1,4(sp)
    1c70:	c606                	sw	ra,12(sp)
    1c72:	8409                	srai	s0,s0,0x2
    1c74:	c9078493          	addi	s1,a5,-880
    1c78:	e411                	bnez	s0,1c84 <__libc_fini_array+0x28>
    1c7a:	40b2                	lw	ra,12(sp)
    1c7c:	4422                	lw	s0,8(sp)
    1c7e:	4492                	lw	s1,4(sp)
    1c80:	0141                	addi	sp,sp,16
    1c82:	8082                	ret
    1c84:	147d                	addi	s0,s0,-1
    1c86:	00241793          	slli	a5,s0,0x2
    1c8a:	97a6                	add	a5,a5,s1
    1c8c:	439c                	lw	a5,0(a5)
    1c8e:	9782                	jalr	a5
    1c90:	b7e5                	j	1c78 <__libc_fini_array+0x1c>

00001c92 <__libc_init_array>:
    1c92:	1141                	addi	sp,sp,-16
    1c94:	c422                	sw	s0,8(sp)
    1c96:	c226                	sw	s1,4(sp)
    1c98:	6435                	lui	s0,0xd
    1c9a:	64b5                	lui	s1,0xd
    1c9c:	c9048793          	addi	a5,s1,-880 # cc90 <impure_data>
    1ca0:	c9040413          	addi	s0,s0,-880 # cc90 <impure_data>
    1ca4:	8c1d                	sub	s0,s0,a5
    1ca6:	c04a                	sw	s2,0(sp)
    1ca8:	c606                	sw	ra,12(sp)
    1caa:	8409                	srai	s0,s0,0x2
    1cac:	c9048493          	addi	s1,s1,-880
    1cb0:	4901                	li	s2,0
    1cb2:	02891563          	bne	s2,s0,1cdc <__libc_init_array+0x4a>
    1cb6:	64b5                	lui	s1,0xd
    1cb8:	6435                	lui	s0,0xd
    1cba:	c9048793          	addi	a5,s1,-880 # cc90 <impure_data>
    1cbe:	c9040413          	addi	s0,s0,-880 # cc90 <impure_data>
    1cc2:	8c1d                	sub	s0,s0,a5
    1cc4:	8409                	srai	s0,s0,0x2
    1cc6:	c9048493          	addi	s1,s1,-880
    1cca:	4901                	li	s2,0
    1ccc:	00891d63          	bne	s2,s0,1ce6 <__libc_init_array+0x54>
    1cd0:	40b2                	lw	ra,12(sp)
    1cd2:	4422                	lw	s0,8(sp)
    1cd4:	4492                	lw	s1,4(sp)
    1cd6:	4902                	lw	s2,0(sp)
    1cd8:	0141                	addi	sp,sp,16
    1cda:	8082                	ret
    1cdc:	409c                	lw	a5,0(s1)
    1cde:	0905                	addi	s2,s2,1
    1ce0:	0491                	addi	s1,s1,4
    1ce2:	9782                	jalr	a5
    1ce4:	b7f9                	j	1cb2 <__libc_init_array+0x20>
    1ce6:	409c                	lw	a5,0(s1)
    1ce8:	0905                	addi	s2,s2,1
    1cea:	0491                	addi	s1,s1,4
    1cec:	9782                	jalr	a5
    1cee:	bff9                	j	1ccc <__libc_init_array+0x3a>

00001cf0 <memcpy>:
    1cf0:	832a                	mv	t1,a0
    1cf2:	ca09                	beqz	a2,1d04 <memcpy+0x14>
    1cf4:	00058383          	lb	t2,0(a1)
    1cf8:	00730023          	sb	t2,0(t1)
    1cfc:	167d                	addi	a2,a2,-1
    1cfe:	0305                	addi	t1,t1,1
    1d00:	0585                	addi	a1,a1,1
    1d02:	fa6d                	bnez	a2,1cf4 <memcpy+0x4>
    1d04:	8082                	ret

00001d06 <memset>:
    1d06:	832a                	mv	t1,a0
    1d08:	c611                	beqz	a2,1d14 <memset+0xe>
    1d0a:	00b30023          	sb	a1,0(t1)
    1d0e:	167d                	addi	a2,a2,-1
    1d10:	0305                	addi	t1,t1,1
    1d12:	fe65                	bnez	a2,1d0a <memset+0x4>
    1d14:	8082                	ret

00001d16 <_iprintf_r>:
    1d16:	7139                	addi	sp,sp,-64
    1d18:	cc22                	sw	s0,24(sp)
    1d1a:	ca26                	sw	s1,20(sp)
    1d1c:	ce06                	sw	ra,28(sp)
    1d1e:	d432                	sw	a2,40(sp)
    1d20:	d636                	sw	a3,44(sp)
    1d22:	d83a                	sw	a4,48(sp)
    1d24:	da3e                	sw	a5,52(sp)
    1d26:	dc42                	sw	a6,56(sp)
    1d28:	de46                	sw	a7,60(sp)
    1d2a:	842a                	mv	s0,a0
    1d2c:	84ae                	mv	s1,a1
    1d2e:	c509                	beqz	a0,1d38 <_iprintf_r+0x22>
    1d30:	4d1c                	lw	a5,24(a0)
    1d32:	e399                	bnez	a5,1d38 <_iprintf_r+0x22>
    1d34:	7c2000ef          	jal	ra,24f6 <__sinit>
    1d38:	440c                	lw	a1,8(s0)
    1d3a:	1034                	addi	a3,sp,40
    1d3c:	8626                	mv	a2,s1
    1d3e:	8522                	mv	a0,s0
    1d40:	c636                	sw	a3,12(sp)
    1d42:	4af000ef          	jal	ra,29f0 <_vfiprintf_r>
    1d46:	40f2                	lw	ra,28(sp)
    1d48:	4462                	lw	s0,24(sp)
    1d4a:	44d2                	lw	s1,20(sp)
    1d4c:	6121                	addi	sp,sp,64
    1d4e:	8082                	ret

00001d50 <iprintf>:
    1d50:	715d                	addi	sp,sp,-80
    1d52:	c2be                	sw	a5,68(sp)
    1d54:	67b5                	lui	a5,0xd
    1d56:	d422                	sw	s0,40(sp)
    1d58:	842a                	mv	s0,a0
    1d5a:	d007a503          	lw	a0,-768(a5) # cd00 <_impure_ptr>
    1d5e:	d606                	sw	ra,44(sp)
    1d60:	da2e                	sw	a1,52(sp)
    1d62:	dc32                	sw	a2,56(sp)
    1d64:	de36                	sw	a3,60(sp)
    1d66:	c0ba                	sw	a4,64(sp)
    1d68:	c4c2                	sw	a6,72(sp)
    1d6a:	c6c6                	sw	a7,76(sp)
    1d6c:	c519                	beqz	a0,1d7a <iprintf+0x2a>
    1d6e:	4d1c                	lw	a5,24(a0)
    1d70:	e789                	bnez	a5,1d7a <iprintf+0x2a>
    1d72:	c62a                	sw	a0,12(sp)
    1d74:	782000ef          	jal	ra,24f6 <__sinit>
    1d78:	4532                	lw	a0,12(sp)
    1d7a:	450c                	lw	a1,8(a0)
    1d7c:	1854                	addi	a3,sp,52
    1d7e:	8622                	mv	a2,s0
    1d80:	ce36                	sw	a3,28(sp)
    1d82:	46f000ef          	jal	ra,29f0 <_vfiprintf_r>
    1d86:	50b2                	lw	ra,44(sp)
    1d88:	5422                	lw	s0,40(sp)
    1d8a:	6161                	addi	sp,sp,80
    1d8c:	8082                	ret

00001d8e <_puts_r>:
    1d8e:	1101                	addi	sp,sp,-32
    1d90:	ca26                	sw	s1,20(sp)
    1d92:	c84a                	sw	s2,16(sp)
    1d94:	ce06                	sw	ra,28(sp)
    1d96:	cc22                	sw	s0,24(sp)
    1d98:	c64e                	sw	s3,12(sp)
    1d9a:	c452                	sw	s4,8(sp)
    1d9c:	84aa                	mv	s1,a0
    1d9e:	892e                	mv	s2,a1
    1da0:	c509                	beqz	a0,1daa <_puts_r+0x1c>
    1da2:	4d1c                	lw	a5,24(a0)
    1da4:	e399                	bnez	a5,1daa <_puts_r+0x1c>
    1da6:	750000ef          	jal	ra,24f6 <__sinit>
    1daa:	4c9c                	lw	a5,24(s1)
    1dac:	4480                	lw	s0,8(s1)
    1dae:	e781                	bnez	a5,1db6 <_puts_r+0x28>
    1db0:	8526                	mv	a0,s1
    1db2:	744000ef          	jal	ra,24f6 <__sinit>
    1db6:	67b5                	lui	a5,0xd
    1db8:	abc78793          	addi	a5,a5,-1348 # cabc <__sf_fake_stdin>
    1dbc:	02f41c63          	bne	s0,a5,1df4 <_puts_r+0x66>
    1dc0:	40c0                	lw	s0,4(s1)
    1dc2:	00c45783          	lhu	a5,12(s0)
    1dc6:	8ba1                	andi	a5,a5,8
    1dc8:	c7a1                	beqz	a5,1e10 <_puts_r+0x82>
    1dca:	481c                	lw	a5,16(s0)
    1dcc:	c3b1                	beqz	a5,1e10 <_puts_r+0x82>
    1dce:	59fd                	li	s3,-1
    1dd0:	4a29                	li	s4,10
    1dd2:	441c                	lw	a5,8(s0)
    1dd4:	00094583          	lbu	a1,0(s2)
    1dd8:	17fd                	addi	a5,a5,-1
    1dda:	e9a1                	bnez	a1,1e2a <_puts_r+0x9c>
    1ddc:	c41c                	sw	a5,8(s0)
    1dde:	0607dc63          	bgez	a5,1e56 <_puts_r+0xc8>
    1de2:	8622                	mv	a2,s0
    1de4:	45a9                	li	a1,10
    1de6:	8526                	mv	a0,s1
    1de8:	2241                	jal	1f68 <__swbuf_r>
    1dea:	57fd                	li	a5,-1
    1dec:	02f50663          	beq	a0,a5,1e18 <_puts_r+0x8a>
    1df0:	4529                	li	a0,10
    1df2:	a025                	j	1e1a <_puts_r+0x8c>
    1df4:	67b5                	lui	a5,0xd
    1df6:	adc78793          	addi	a5,a5,-1316 # cadc <__sf_fake_stdout>
    1dfa:	00f41463          	bne	s0,a5,1e02 <_puts_r+0x74>
    1dfe:	4480                	lw	s0,8(s1)
    1e00:	b7c9                	j	1dc2 <_puts_r+0x34>
    1e02:	67b5                	lui	a5,0xd
    1e04:	a9c78793          	addi	a5,a5,-1380 # ca9c <__sf_fake_stderr>
    1e08:	faf41de3          	bne	s0,a5,1dc2 <_puts_r+0x34>
    1e0c:	44c0                	lw	s0,12(s1)
    1e0e:	bf55                	j	1dc2 <_puts_r+0x34>
    1e10:	85a2                	mv	a1,s0
    1e12:	8526                	mv	a0,s1
    1e14:	2c29                	jal	202e <__swsetup_r>
    1e16:	dd45                	beqz	a0,1dce <_puts_r+0x40>
    1e18:	557d                	li	a0,-1
    1e1a:	40f2                	lw	ra,28(sp)
    1e1c:	4462                	lw	s0,24(sp)
    1e1e:	44d2                	lw	s1,20(sp)
    1e20:	4942                	lw	s2,16(sp)
    1e22:	49b2                	lw	s3,12(sp)
    1e24:	4a22                	lw	s4,8(sp)
    1e26:	6105                	addi	sp,sp,32
    1e28:	8082                	ret
    1e2a:	c41c                	sw	a5,8(s0)
    1e2c:	0905                	addi	s2,s2,1
    1e2e:	0007d763          	bgez	a5,1e3c <_puts_r+0xae>
    1e32:	4c18                	lw	a4,24(s0)
    1e34:	00e7cb63          	blt	a5,a4,1e4a <_puts_r+0xbc>
    1e38:	01458963          	beq	a1,s4,1e4a <_puts_r+0xbc>
    1e3c:	401c                	lw	a5,0(s0)
    1e3e:	00178713          	addi	a4,a5,1
    1e42:	c018                	sw	a4,0(s0)
    1e44:	00b78023          	sb	a1,0(a5)
    1e48:	b769                	j	1dd2 <_puts_r+0x44>
    1e4a:	8622                	mv	a2,s0
    1e4c:	8526                	mv	a0,s1
    1e4e:	2a29                	jal	1f68 <__swbuf_r>
    1e50:	f93511e3          	bne	a0,s3,1dd2 <_puts_r+0x44>
    1e54:	b7d1                	j	1e18 <_puts_r+0x8a>
    1e56:	401c                	lw	a5,0(s0)
    1e58:	00178713          	addi	a4,a5,1
    1e5c:	c018                	sw	a4,0(s0)
    1e5e:	4729                	li	a4,10
    1e60:	00e78023          	sb	a4,0(a5)
    1e64:	b771                	j	1df0 <_puts_r+0x62>

00001e66 <puts>:
    1e66:	67b5                	lui	a5,0xd
    1e68:	85aa                	mv	a1,a0
    1e6a:	d007a503          	lw	a0,-768(a5) # cd00 <_impure_ptr>
    1e6e:	b705                	j	1d8e <_puts_r>

00001e70 <cleanup_glue>:
    1e70:	1141                	addi	sp,sp,-16
    1e72:	c422                	sw	s0,8(sp)
    1e74:	842e                	mv	s0,a1
    1e76:	418c                	lw	a1,0(a1)
    1e78:	c226                	sw	s1,4(sp)
    1e7a:	c606                	sw	ra,12(sp)
    1e7c:	84aa                	mv	s1,a0
    1e7e:	c191                	beqz	a1,1e82 <cleanup_glue+0x12>
    1e80:	3fc5                	jal	1e70 <cleanup_glue>
    1e82:	85a2                	mv	a1,s0
    1e84:	4422                	lw	s0,8(sp)
    1e86:	40b2                	lw	ra,12(sp)
    1e88:	8526                	mv	a0,s1
    1e8a:	4492                	lw	s1,4(sp)
    1e8c:	0141                	addi	sp,sp,16
    1e8e:	1530006f          	j	27e0 <_free_r>

00001e92 <_reclaim_reent>:
    1e92:	67b5                	lui	a5,0xd
    1e94:	d007a783          	lw	a5,-768(a5) # cd00 <_impure_ptr>
    1e98:	0ca78763          	beq	a5,a0,1f66 <_reclaim_reent+0xd4>
    1e9c:	515c                	lw	a5,36(a0)
    1e9e:	1101                	addi	sp,sp,-32
    1ea0:	cc22                	sw	s0,24(sp)
    1ea2:	ce06                	sw	ra,28(sp)
    1ea4:	ca26                	sw	s1,20(sp)
    1ea6:	c84a                	sw	s2,16(sp)
    1ea8:	c64e                	sw	s3,12(sp)
    1eaa:	842a                	mv	s0,a0
    1eac:	cf81                	beqz	a5,1ec4 <_reclaim_reent+0x32>
    1eae:	47dc                	lw	a5,12(a5)
    1eb0:	4481                	li	s1,0
    1eb2:	08000913          	li	s2,128
    1eb6:	e3d1                	bnez	a5,1f3a <_reclaim_reent+0xa8>
    1eb8:	505c                	lw	a5,36(s0)
    1eba:	438c                	lw	a1,0(a5)
    1ebc:	c581                	beqz	a1,1ec4 <_reclaim_reent+0x32>
    1ebe:	8522                	mv	a0,s0
    1ec0:	121000ef          	jal	ra,27e0 <_free_r>
    1ec4:	484c                	lw	a1,20(s0)
    1ec6:	c581                	beqz	a1,1ece <_reclaim_reent+0x3c>
    1ec8:	8522                	mv	a0,s0
    1eca:	117000ef          	jal	ra,27e0 <_free_r>
    1ece:	504c                	lw	a1,36(s0)
    1ed0:	c581                	beqz	a1,1ed8 <_reclaim_reent+0x46>
    1ed2:	8522                	mv	a0,s0
    1ed4:	10d000ef          	jal	ra,27e0 <_free_r>
    1ed8:	5c0c                	lw	a1,56(s0)
    1eda:	c581                	beqz	a1,1ee2 <_reclaim_reent+0x50>
    1edc:	8522                	mv	a0,s0
    1ede:	103000ef          	jal	ra,27e0 <_free_r>
    1ee2:	5c4c                	lw	a1,60(s0)
    1ee4:	c581                	beqz	a1,1eec <_reclaim_reent+0x5a>
    1ee6:	8522                	mv	a0,s0
    1ee8:	0f9000ef          	jal	ra,27e0 <_free_r>
    1eec:	402c                	lw	a1,64(s0)
    1eee:	c581                	beqz	a1,1ef6 <_reclaim_reent+0x64>
    1ef0:	8522                	mv	a0,s0
    1ef2:	0ef000ef          	jal	ra,27e0 <_free_r>
    1ef6:	4c6c                	lw	a1,92(s0)
    1ef8:	c581                	beqz	a1,1f00 <_reclaim_reent+0x6e>
    1efa:	8522                	mv	a0,s0
    1efc:	0e5000ef          	jal	ra,27e0 <_free_r>
    1f00:	4c2c                	lw	a1,88(s0)
    1f02:	c581                	beqz	a1,1f0a <_reclaim_reent+0x78>
    1f04:	8522                	mv	a0,s0
    1f06:	0db000ef          	jal	ra,27e0 <_free_r>
    1f0a:	584c                	lw	a1,52(s0)
    1f0c:	c581                	beqz	a1,1f14 <_reclaim_reent+0x82>
    1f0e:	8522                	mv	a0,s0
    1f10:	0d1000ef          	jal	ra,27e0 <_free_r>
    1f14:	4c1c                	lw	a5,24(s0)
    1f16:	c3a9                	beqz	a5,1f58 <_reclaim_reent+0xc6>
    1f18:	541c                	lw	a5,40(s0)
    1f1a:	8522                	mv	a0,s0
    1f1c:	9782                	jalr	a5
    1f1e:	442c                	lw	a1,72(s0)
    1f20:	cd85                	beqz	a1,1f58 <_reclaim_reent+0xc6>
    1f22:	8522                	mv	a0,s0
    1f24:	4462                	lw	s0,24(sp)
    1f26:	40f2                	lw	ra,28(sp)
    1f28:	44d2                	lw	s1,20(sp)
    1f2a:	4942                	lw	s2,16(sp)
    1f2c:	49b2                	lw	s3,12(sp)
    1f2e:	6105                	addi	sp,sp,32
    1f30:	b781                	j	1e70 <cleanup_glue>
    1f32:	95a6                	add	a1,a1,s1
    1f34:	418c                	lw	a1,0(a1)
    1f36:	e991                	bnez	a1,1f4a <_reclaim_reent+0xb8>
    1f38:	0491                	addi	s1,s1,4
    1f3a:	505c                	lw	a5,36(s0)
    1f3c:	47cc                	lw	a1,12(a5)
    1f3e:	ff249ae3          	bne	s1,s2,1f32 <_reclaim_reent+0xa0>
    1f42:	8522                	mv	a0,s0
    1f44:	09d000ef          	jal	ra,27e0 <_free_r>
    1f48:	bf85                	j	1eb8 <_reclaim_reent+0x26>
    1f4a:	0005a983          	lw	s3,0(a1)
    1f4e:	8522                	mv	a0,s0
    1f50:	091000ef          	jal	ra,27e0 <_free_r>
    1f54:	85ce                	mv	a1,s3
    1f56:	b7c5                	j	1f36 <_reclaim_reent+0xa4>
    1f58:	40f2                	lw	ra,28(sp)
    1f5a:	4462                	lw	s0,24(sp)
    1f5c:	44d2                	lw	s1,20(sp)
    1f5e:	4942                	lw	s2,16(sp)
    1f60:	49b2                	lw	s3,12(sp)
    1f62:	6105                	addi	sp,sp,32
    1f64:	8082                	ret
    1f66:	8082                	ret

00001f68 <__swbuf_r>:
    1f68:	1101                	addi	sp,sp,-32
    1f6a:	cc22                	sw	s0,24(sp)
    1f6c:	ca26                	sw	s1,20(sp)
    1f6e:	c84a                	sw	s2,16(sp)
    1f70:	ce06                	sw	ra,28(sp)
    1f72:	c64e                	sw	s3,12(sp)
    1f74:	84aa                	mv	s1,a0
    1f76:	892e                	mv	s2,a1
    1f78:	8432                	mv	s0,a2
    1f7a:	c501                	beqz	a0,1f82 <__swbuf_r+0x1a>
    1f7c:	4d1c                	lw	a5,24(a0)
    1f7e:	e391                	bnez	a5,1f82 <__swbuf_r+0x1a>
    1f80:	2b9d                	jal	24f6 <__sinit>
    1f82:	67b5                	lui	a5,0xd
    1f84:	abc78793          	addi	a5,a5,-1348 # cabc <__sf_fake_stdin>
    1f88:	06f41963          	bne	s0,a5,1ffa <__swbuf_r+0x92>
    1f8c:	40c0                	lw	s0,4(s1)
    1f8e:	4c1c                	lw	a5,24(s0)
    1f90:	c41c                	sw	a5,8(s0)
    1f92:	00c45783          	lhu	a5,12(s0)
    1f96:	8ba1                	andi	a5,a5,8
    1f98:	cfbd                	beqz	a5,2016 <__swbuf_r+0xae>
    1f9a:	481c                	lw	a5,16(s0)
    1f9c:	cfad                	beqz	a5,2016 <__swbuf_r+0xae>
    1f9e:	481c                	lw	a5,16(s0)
    1fa0:	4008                	lw	a0,0(s0)
    1fa2:	0ff97993          	zext.b	s3,s2
    1fa6:	0ff97913          	zext.b	s2,s2
    1faa:	8d1d                	sub	a0,a0,a5
    1fac:	485c                	lw	a5,20(s0)
    1fae:	00f54663          	blt	a0,a5,1fba <__swbuf_r+0x52>
    1fb2:	85a2                	mv	a1,s0
    1fb4:	8526                	mv	a0,s1
    1fb6:	2121                	jal	23be <_fflush_r>
    1fb8:	e13d                	bnez	a0,201e <__swbuf_r+0xb6>
    1fba:	441c                	lw	a5,8(s0)
    1fbc:	0505                	addi	a0,a0,1
    1fbe:	17fd                	addi	a5,a5,-1
    1fc0:	c41c                	sw	a5,8(s0)
    1fc2:	401c                	lw	a5,0(s0)
    1fc4:	00178713          	addi	a4,a5,1
    1fc8:	c018                	sw	a4,0(s0)
    1fca:	01378023          	sb	s3,0(a5)
    1fce:	485c                	lw	a5,20(s0)
    1fd0:	00a78963          	beq	a5,a0,1fe2 <__swbuf_r+0x7a>
    1fd4:	00c45783          	lhu	a5,12(s0)
    1fd8:	8b85                	andi	a5,a5,1
    1fda:	cb81                	beqz	a5,1fea <__swbuf_r+0x82>
    1fdc:	47a9                	li	a5,10
    1fde:	00f91663          	bne	s2,a5,1fea <__swbuf_r+0x82>
    1fe2:	85a2                	mv	a1,s0
    1fe4:	8526                	mv	a0,s1
    1fe6:	2ee1                	jal	23be <_fflush_r>
    1fe8:	e91d                	bnez	a0,201e <__swbuf_r+0xb6>
    1fea:	40f2                	lw	ra,28(sp)
    1fec:	4462                	lw	s0,24(sp)
    1fee:	44d2                	lw	s1,20(sp)
    1ff0:	49b2                	lw	s3,12(sp)
    1ff2:	854a                	mv	a0,s2
    1ff4:	4942                	lw	s2,16(sp)
    1ff6:	6105                	addi	sp,sp,32
    1ff8:	8082                	ret
    1ffa:	67b5                	lui	a5,0xd
    1ffc:	adc78793          	addi	a5,a5,-1316 # cadc <__sf_fake_stdout>
    2000:	00f41463          	bne	s0,a5,2008 <__swbuf_r+0xa0>
    2004:	4480                	lw	s0,8(s1)
    2006:	b761                	j	1f8e <__swbuf_r+0x26>
    2008:	67b5                	lui	a5,0xd
    200a:	a9c78793          	addi	a5,a5,-1380 # ca9c <__sf_fake_stderr>
    200e:	f8f410e3          	bne	s0,a5,1f8e <__swbuf_r+0x26>
    2012:	44c0                	lw	s0,12(s1)
    2014:	bfad                	j	1f8e <__swbuf_r+0x26>
    2016:	85a2                	mv	a1,s0
    2018:	8526                	mv	a0,s1
    201a:	2811                	jal	202e <__swsetup_r>
    201c:	d149                	beqz	a0,1f9e <__swbuf_r+0x36>
    201e:	597d                	li	s2,-1
    2020:	b7e9                	j	1fea <__swbuf_r+0x82>

00002022 <__swbuf>:
    2022:	67b5                	lui	a5,0xd
    2024:	862e                	mv	a2,a1
    2026:	85aa                	mv	a1,a0
    2028:	d007a503          	lw	a0,-768(a5) # cd00 <_impure_ptr>
    202c:	bf35                	j	1f68 <__swbuf_r>

0000202e <__swsetup_r>:
    202e:	1141                	addi	sp,sp,-16
    2030:	67b5                	lui	a5,0xd
    2032:	c226                	sw	s1,4(sp)
    2034:	d007a483          	lw	s1,-768(a5) # cd00 <_impure_ptr>
    2038:	c422                	sw	s0,8(sp)
    203a:	c04a                	sw	s2,0(sp)
    203c:	c606                	sw	ra,12(sp)
    203e:	892a                	mv	s2,a0
    2040:	842e                	mv	s0,a1
    2042:	c489                	beqz	s1,204c <__swsetup_r+0x1e>
    2044:	4c9c                	lw	a5,24(s1)
    2046:	e399                	bnez	a5,204c <__swsetup_r+0x1e>
    2048:	8526                	mv	a0,s1
    204a:	2175                	jal	24f6 <__sinit>
    204c:	67b5                	lui	a5,0xd
    204e:	abc78793          	addi	a5,a5,-1348 # cabc <__sf_fake_stdin>
    2052:	02f41763          	bne	s0,a5,2080 <__swsetup_r+0x52>
    2056:	40c0                	lw	s0,4(s1)
    2058:	00c41783          	lh	a5,12(s0)
    205c:	01079713          	slli	a4,a5,0x10
    2060:	0087f693          	andi	a3,a5,8
    2064:	8341                	srli	a4,a4,0x10
    2066:	eaa5                	bnez	a3,20d6 <__swsetup_r+0xa8>
    2068:	01077693          	andi	a3,a4,16
    206c:	ea85                	bnez	a3,209c <__swsetup_r+0x6e>
    206e:	4725                	li	a4,9
    2070:	00e92023          	sw	a4,0(s2)
    2074:	0407e793          	ori	a5,a5,64
    2078:	00f41623          	sh	a5,12(s0)
    207c:	557d                	li	a0,-1
    207e:	a869                	j	2118 <__swsetup_r+0xea>
    2080:	67b5                	lui	a5,0xd
    2082:	adc78793          	addi	a5,a5,-1316 # cadc <__sf_fake_stdout>
    2086:	00f41463          	bne	s0,a5,208e <__swsetup_r+0x60>
    208a:	4480                	lw	s0,8(s1)
    208c:	b7f1                	j	2058 <__swsetup_r+0x2a>
    208e:	67b5                	lui	a5,0xd
    2090:	a9c78793          	addi	a5,a5,-1380 # ca9c <__sf_fake_stderr>
    2094:	fcf412e3          	bne	s0,a5,2058 <__swsetup_r+0x2a>
    2098:	44c0                	lw	s0,12(s1)
    209a:	bf7d                	j	2058 <__swsetup_r+0x2a>
    209c:	8b11                	andi	a4,a4,4
    209e:	c715                	beqz	a4,20ca <__swsetup_r+0x9c>
    20a0:	584c                	lw	a1,52(s0)
    20a2:	c991                	beqz	a1,20b6 <__swsetup_r+0x88>
    20a4:	04440793          	addi	a5,s0,68
    20a8:	00f58563          	beq	a1,a5,20b2 <__swsetup_r+0x84>
    20ac:	854a                	mv	a0,s2
    20ae:	732000ef          	jal	ra,27e0 <_free_r>
    20b2:	02042a23          	sw	zero,52(s0)
    20b6:	00c45783          	lhu	a5,12(s0)
    20ba:	00042223          	sw	zero,4(s0)
    20be:	fdb7f793          	andi	a5,a5,-37
    20c2:	00f41623          	sh	a5,12(s0)
    20c6:	481c                	lw	a5,16(s0)
    20c8:	c01c                	sw	a5,0(s0)
    20ca:	00c45783          	lhu	a5,12(s0)
    20ce:	0087e793          	ori	a5,a5,8
    20d2:	00f41623          	sh	a5,12(s0)
    20d6:	481c                	lw	a5,16(s0)
    20d8:	ef81                	bnez	a5,20f0 <__swsetup_r+0xc2>
    20da:	00c45783          	lhu	a5,12(s0)
    20de:	20000713          	li	a4,512
    20e2:	2807f793          	andi	a5,a5,640
    20e6:	00e78563          	beq	a5,a4,20f0 <__swsetup_r+0xc2>
    20ea:	85a2                	mv	a1,s0
    20ec:	854a                	mv	a0,s2
    20ee:	2d99                	jal	2744 <__smakebuf_r>
    20f0:	00c41783          	lh	a5,12(s0)
    20f4:	01079713          	slli	a4,a5,0x10
    20f8:	0017f693          	andi	a3,a5,1
    20fc:	8341                	srli	a4,a4,0x10
    20fe:	c29d                	beqz	a3,2124 <__swsetup_r+0xf6>
    2100:	4854                	lw	a3,20(s0)
    2102:	00042423          	sw	zero,8(s0)
    2106:	40d006b3          	neg	a3,a3
    210a:	cc14                	sw	a3,24(s0)
    210c:	4814                	lw	a3,16(s0)
    210e:	4501                	li	a0,0
    2110:	e681                	bnez	a3,2118 <__swsetup_r+0xea>
    2112:	08077713          	andi	a4,a4,128
    2116:	ff39                	bnez	a4,2074 <__swsetup_r+0x46>
    2118:	40b2                	lw	ra,12(sp)
    211a:	4422                	lw	s0,8(sp)
    211c:	4492                	lw	s1,4(sp)
    211e:	4902                	lw	s2,0(sp)
    2120:	0141                	addi	sp,sp,16
    2122:	8082                	ret
    2124:	00277693          	andi	a3,a4,2
    2128:	4601                	li	a2,0
    212a:	e291                	bnez	a3,212e <__swsetup_r+0x100>
    212c:	4850                	lw	a2,20(s0)
    212e:	c410                	sw	a2,8(s0)
    2130:	bff1                	j	210c <__swsetup_r+0xde>

00002132 <__register_exitproc>:
    2132:	6835                	lui	a6,0xd
    2134:	d0c82783          	lw	a5,-756(a6) # cd0c <_global_atexit>
    2138:	88aa                	mv	a7,a0
    213a:	e395                	bnez	a5,215e <__register_exitproc+0x2c>
    213c:	6735                	lui	a4,0xd
    213e:	e8470513          	addi	a0,a4,-380 # ce84 <_global_atexit0>
    2142:	d0a82623          	sw	a0,-756(a6)
    2146:	00000313          	li	t1,0
    214a:	e8470793          	addi	a5,a4,-380
    214e:	00030863          	beqz	t1,215e <__register_exitproc+0x2c>
    2152:	00002783          	lw	a5,0(zero) # 0 <__vector_start>
    2156:	08f52423          	sw	a5,136(a0)
    215a:	e8470793          	addi	a5,a4,-380
    215e:	43d8                	lw	a4,4(a5)
    2160:	487d                	li	a6,31
    2162:	557d                	li	a0,-1
    2164:	04e84663          	blt	a6,a4,21b0 <__register_exitproc+0x7e>
    2168:	02088d63          	beqz	a7,21a2 <__register_exitproc+0x70>
    216c:	0887a803          	lw	a6,136(a5)
    2170:	04080063          	beqz	a6,21b0 <__register_exitproc+0x7e>
    2174:	00271513          	slli	a0,a4,0x2
    2178:	9542                	add	a0,a0,a6
    217a:	c110                	sw	a2,0(a0)
    217c:	10082303          	lw	t1,256(a6)
    2180:	4605                	li	a2,1
    2182:	00e61633          	sll	a2,a2,a4
    2186:	00c36333          	or	t1,t1,a2
    218a:	10682023          	sw	t1,256(a6)
    218e:	08d52023          	sw	a3,128(a0)
    2192:	4689                	li	a3,2
    2194:	00d89763          	bne	a7,a3,21a2 <__register_exitproc+0x70>
    2198:	10482683          	lw	a3,260(a6)
    219c:	8ed1                	or	a3,a3,a2
    219e:	10d82223          	sw	a3,260(a6)
    21a2:	00170693          	addi	a3,a4,1
    21a6:	070a                	slli	a4,a4,0x2
    21a8:	c3d4                	sw	a3,4(a5)
    21aa:	97ba                	add	a5,a5,a4
    21ac:	c78c                	sw	a1,8(a5)
    21ae:	4501                	li	a0,0
    21b0:	8082                	ret

000021b2 <__call_exitprocs>:
    21b2:	7179                	addi	sp,sp,-48
    21b4:	c85a                	sw	s6,16(sp)
    21b6:	6b35                	lui	s6,0xd
    21b8:	ca56                	sw	s5,20(sp)
    21ba:	c65e                	sw	s7,12(sp)
    21bc:	c462                	sw	s8,8(sp)
    21be:	d606                	sw	ra,44(sp)
    21c0:	d422                	sw	s0,40(sp)
    21c2:	d226                	sw	s1,36(sp)
    21c4:	d04a                	sw	s2,32(sp)
    21c6:	ce4e                	sw	s3,28(sp)
    21c8:	cc52                	sw	s4,24(sp)
    21ca:	c266                	sw	s9,4(sp)
    21cc:	8baa                	mv	s7,a0
    21ce:	8aae                	mv	s5,a1
    21d0:	d0cb0b13          	addi	s6,s6,-756 # cd0c <_global_atexit>
    21d4:	4c05                	li	s8,1
    21d6:	000b2483          	lw	s1,0(s6)
    21da:	cc81                	beqz	s1,21f2 <__call_exitprocs+0x40>
    21dc:	40c0                	lw	s0,4(s1)
    21de:	0884a983          	lw	s3,136(s1)
    21e2:	fff40913          	addi	s2,s0,-1
    21e6:	040a                	slli	s0,s0,0x2
    21e8:	00898a33          	add	s4,s3,s0
    21ec:	9426                	add	s0,s0,s1
    21ee:	00095f63          	bgez	s2,220c <__call_exitprocs+0x5a>
    21f2:	50b2                	lw	ra,44(sp)
    21f4:	5422                	lw	s0,40(sp)
    21f6:	5492                	lw	s1,36(sp)
    21f8:	5902                	lw	s2,32(sp)
    21fa:	49f2                	lw	s3,28(sp)
    21fc:	4a62                	lw	s4,24(sp)
    21fe:	4ad2                	lw	s5,20(sp)
    2200:	4b42                	lw	s6,16(sp)
    2202:	4bb2                	lw	s7,12(sp)
    2204:	4c22                	lw	s8,8(sp)
    2206:	4c92                	lw	s9,4(sp)
    2208:	6145                	addi	sp,sp,48
    220a:	8082                	ret
    220c:	000a8c63          	beqz	s5,2224 <__call_exitprocs+0x72>
    2210:	00099663          	bnez	s3,221c <__call_exitprocs+0x6a>
    2214:	197d                	addi	s2,s2,-1
    2216:	1a71                	addi	s4,s4,-4
    2218:	1471                	addi	s0,s0,-4
    221a:	bfd1                	j	21ee <__call_exitprocs+0x3c>
    221c:	07ca2783          	lw	a5,124(s4)
    2220:	ff579ae3          	bne	a5,s5,2214 <__call_exitprocs+0x62>
    2224:	40d8                	lw	a4,4(s1)
    2226:	405c                	lw	a5,4(s0)
    2228:	177d                	addi	a4,a4,-1
    222a:	03271863          	bne	a4,s2,225a <__call_exitprocs+0xa8>
    222e:	0124a223          	sw	s2,4(s1)
    2232:	d3ed                	beqz	a5,2214 <__call_exitprocs+0x62>
    2234:	0044ac83          	lw	s9,4(s1)
    2238:	00098863          	beqz	s3,2248 <__call_exitprocs+0x96>
    223c:	1009a683          	lw	a3,256(s3)
    2240:	012c1733          	sll	a4,s8,s2
    2244:	8ef9                	and	a3,a3,a4
    2246:	ee89                	bnez	a3,2260 <__call_exitprocs+0xae>
    2248:	9782                	jalr	a5
    224a:	40d8                	lw	a4,4(s1)
    224c:	000b2783          	lw	a5,0(s6)
    2250:	f99713e3          	bne	a4,s9,21d6 <__call_exitprocs+0x24>
    2254:	fcf480e3          	beq	s1,a5,2214 <__call_exitprocs+0x62>
    2258:	bfbd                	j	21d6 <__call_exitprocs+0x24>
    225a:	00042223          	sw	zero,4(s0)
    225e:	bfd1                	j	2232 <__call_exitprocs+0x80>
    2260:	1049a683          	lw	a3,260(s3)
    2264:	ffca2583          	lw	a1,-4(s4)
    2268:	8f75                	and	a4,a4,a3
    226a:	e701                	bnez	a4,2272 <__call_exitprocs+0xc0>
    226c:	855e                	mv	a0,s7
    226e:	9782                	jalr	a5
    2270:	bfe9                	j	224a <__call_exitprocs+0x98>
    2272:	852e                	mv	a0,a1
    2274:	9782                	jalr	a5
    2276:	bfd1                	j	224a <__call_exitprocs+0x98>

00002278 <__sflush_r>:
    2278:	00c5d783          	lhu	a5,12(a1)
    227c:	1101                	addi	sp,sp,-32
    227e:	cc22                	sw	s0,24(sp)
    2280:	ca26                	sw	s1,20(sp)
    2282:	ce06                	sw	ra,28(sp)
    2284:	c84a                	sw	s2,16(sp)
    2286:	c64e                	sw	s3,12(sp)
    2288:	0087f713          	andi	a4,a5,8
    228c:	84aa                	mv	s1,a0
    228e:	842e                	mv	s0,a1
    2290:	e375                	bnez	a4,2374 <__sflush_r+0xfc>
    2292:	41d8                	lw	a4,4(a1)
    2294:	00e04763          	bgtz	a4,22a2 <__sflush_r+0x2a>
    2298:	41b8                	lw	a4,64(a1)
    229a:	00e04463          	bgtz	a4,22a2 <__sflush_r+0x2a>
    229e:	4501                	li	a0,0
    22a0:	a875                	j	235c <__sflush_r+0xe4>
    22a2:	5458                	lw	a4,44(s0)
    22a4:	df6d                	beqz	a4,229e <__sflush_r+0x26>
    22a6:	6685                	lui	a3,0x1
    22a8:	0004a903          	lw	s2,0(s1)
    22ac:	8ff5                	and	a5,a5,a3
    22ae:	0004a023          	sw	zero,0(s1)
    22b2:	500c                	lw	a1,32(s0)
    22b4:	cfa5                	beqz	a5,232c <__sflush_r+0xb4>
    22b6:	4868                	lw	a0,84(s0)
    22b8:	00c45783          	lhu	a5,12(s0)
    22bc:	8b91                	andi	a5,a5,4
    22be:	c799                	beqz	a5,22cc <__sflush_r+0x54>
    22c0:	405c                	lw	a5,4(s0)
    22c2:	8d1d                	sub	a0,a0,a5
    22c4:	585c                	lw	a5,52(s0)
    22c6:	c399                	beqz	a5,22cc <__sflush_r+0x54>
    22c8:	403c                	lw	a5,64(s0)
    22ca:	8d1d                	sub	a0,a0,a5
    22cc:	545c                	lw	a5,44(s0)
    22ce:	500c                	lw	a1,32(s0)
    22d0:	862a                	mv	a2,a0
    22d2:	4681                	li	a3,0
    22d4:	8526                	mv	a0,s1
    22d6:	9782                	jalr	a5
    22d8:	57fd                	li	a5,-1
    22da:	00c45703          	lhu	a4,12(s0)
    22de:	00f51d63          	bne	a0,a5,22f8 <__sflush_r+0x80>
    22e2:	4094                	lw	a3,0(s1)
    22e4:	47f5                	li	a5,29
    22e6:	08d7e263          	bltu	a5,a3,236a <__sflush_r+0xf2>
    22ea:	dfc007b7          	lui	a5,0xdfc00
    22ee:	17f9                	addi	a5,a5,-2
    22f0:	40d7d7b3          	sra	a5,a5,a3
    22f4:	8b85                	andi	a5,a5,1
    22f6:	ebb5                	bnez	a5,236a <__sflush_r+0xf2>
    22f8:	481c                	lw	a5,16(s0)
    22fa:	00042223          	sw	zero,4(s0)
    22fe:	c01c                	sw	a5,0(s0)
    2300:	6785                	lui	a5,0x1
    2302:	8f7d                	and	a4,a4,a5
    2304:	c719                	beqz	a4,2312 <__sflush_r+0x9a>
    2306:	57fd                	li	a5,-1
    2308:	00f51463          	bne	a0,a5,2310 <__sflush_r+0x98>
    230c:	409c                	lw	a5,0(s1)
    230e:	e391                	bnez	a5,2312 <__sflush_r+0x9a>
    2310:	c868                	sw	a0,84(s0)
    2312:	584c                	lw	a1,52(s0)
    2314:	0124a023          	sw	s2,0(s1)
    2318:	d1d9                	beqz	a1,229e <__sflush_r+0x26>
    231a:	04440793          	addi	a5,s0,68
    231e:	00f58463          	beq	a1,a5,2326 <__sflush_r+0xae>
    2322:	8526                	mv	a0,s1
    2324:	2975                	jal	27e0 <_free_r>
    2326:	02042a23          	sw	zero,52(s0)
    232a:	bf95                	j	229e <__sflush_r+0x26>
    232c:	4685                	li	a3,1
    232e:	4601                	li	a2,0
    2330:	8526                	mv	a0,s1
    2332:	9702                	jalr	a4
    2334:	57fd                	li	a5,-1
    2336:	f8f511e3          	bne	a0,a5,22b8 <__sflush_r+0x40>
    233a:	409c                	lw	a5,0(s1)
    233c:	dfb5                	beqz	a5,22b8 <__sflush_r+0x40>
    233e:	4775                	li	a4,29
    2340:	00e78563          	beq	a5,a4,234a <__sflush_r+0xd2>
    2344:	4759                	li	a4,22
    2346:	00e79563          	bne	a5,a4,2350 <__sflush_r+0xd8>
    234a:	0124a023          	sw	s2,0(s1)
    234e:	bf81                	j	229e <__sflush_r+0x26>
    2350:	00c45783          	lhu	a5,12(s0)
    2354:	0407e793          	ori	a5,a5,64
    2358:	00f41623          	sh	a5,12(s0)
    235c:	40f2                	lw	ra,28(sp)
    235e:	4462                	lw	s0,24(sp)
    2360:	44d2                	lw	s1,20(sp)
    2362:	4942                	lw	s2,16(sp)
    2364:	49b2                	lw	s3,12(sp)
    2366:	6105                	addi	sp,sp,32
    2368:	8082                	ret
    236a:	04076713          	ori	a4,a4,64
    236e:	00e41623          	sh	a4,12(s0)
    2372:	b7ed                	j	235c <__sflush_r+0xe4>
    2374:	0105a983          	lw	s3,16(a1)
    2378:	f20983e3          	beqz	s3,229e <__sflush_r+0x26>
    237c:	0005a903          	lw	s2,0(a1)
    2380:	8b8d                	andi	a5,a5,3
    2382:	0135a023          	sw	s3,0(a1)
    2386:	41390933          	sub	s2,s2,s3
    238a:	4701                	li	a4,0
    238c:	e391                	bnez	a5,2390 <__sflush_r+0x118>
    238e:	49d8                	lw	a4,20(a1)
    2390:	c418                	sw	a4,8(s0)
    2392:	f12056e3          	blez	s2,229e <__sflush_r+0x26>
    2396:	541c                	lw	a5,40(s0)
    2398:	500c                	lw	a1,32(s0)
    239a:	86ca                	mv	a3,s2
    239c:	864e                	mv	a2,s3
    239e:	8526                	mv	a0,s1
    23a0:	9782                	jalr	a5
    23a2:	00a04a63          	bgtz	a0,23b6 <__sflush_r+0x13e>
    23a6:	00c45783          	lhu	a5,12(s0)
    23aa:	557d                	li	a0,-1
    23ac:	0407e793          	ori	a5,a5,64
    23b0:	00f41623          	sh	a5,12(s0)
    23b4:	b765                	j	235c <__sflush_r+0xe4>
    23b6:	99aa                	add	s3,s3,a0
    23b8:	40a90933          	sub	s2,s2,a0
    23bc:	bfd9                	j	2392 <__sflush_r+0x11a>

000023be <_fflush_r>:
    23be:	499c                	lw	a5,16(a1)
    23c0:	cfa1                	beqz	a5,2418 <_fflush_r+0x5a>
    23c2:	1101                	addi	sp,sp,-32
    23c4:	cc22                	sw	s0,24(sp)
    23c6:	ce06                	sw	ra,28(sp)
    23c8:	842a                	mv	s0,a0
    23ca:	c511                	beqz	a0,23d6 <_fflush_r+0x18>
    23cc:	4d1c                	lw	a5,24(a0)
    23ce:	e781                	bnez	a5,23d6 <_fflush_r+0x18>
    23d0:	c62e                	sw	a1,12(sp)
    23d2:	2215                	jal	24f6 <__sinit>
    23d4:	45b2                	lw	a1,12(sp)
    23d6:	67b5                	lui	a5,0xd
    23d8:	abc78793          	addi	a5,a5,-1348 # cabc <__sf_fake_stdin>
    23dc:	00f59b63          	bne	a1,a5,23f2 <_fflush_r+0x34>
    23e0:	404c                	lw	a1,4(s0)
    23e2:	00c59783          	lh	a5,12(a1)
    23e6:	c785                	beqz	a5,240e <_fflush_r+0x50>
    23e8:	8522                	mv	a0,s0
    23ea:	4462                	lw	s0,24(sp)
    23ec:	40f2                	lw	ra,28(sp)
    23ee:	6105                	addi	sp,sp,32
    23f0:	b561                	j	2278 <__sflush_r>
    23f2:	67b5                	lui	a5,0xd
    23f4:	adc78793          	addi	a5,a5,-1316 # cadc <__sf_fake_stdout>
    23f8:	00f59463          	bne	a1,a5,2400 <_fflush_r+0x42>
    23fc:	440c                	lw	a1,8(s0)
    23fe:	b7d5                	j	23e2 <_fflush_r+0x24>
    2400:	67b5                	lui	a5,0xd
    2402:	a9c78793          	addi	a5,a5,-1380 # ca9c <__sf_fake_stderr>
    2406:	fcf59ee3          	bne	a1,a5,23e2 <_fflush_r+0x24>
    240a:	444c                	lw	a1,12(s0)
    240c:	bfd9                	j	23e2 <_fflush_r+0x24>
    240e:	40f2                	lw	ra,28(sp)
    2410:	4462                	lw	s0,24(sp)
    2412:	4501                	li	a0,0
    2414:	6105                	addi	sp,sp,32
    2416:	8082                	ret
    2418:	4501                	li	a0,0
    241a:	8082                	ret

0000241c <fflush>:
    241c:	85aa                	mv	a1,a0
    241e:	e901                	bnez	a0,242e <fflush+0x12>
    2420:	67b5                	lui	a5,0xd
    2422:	cf87a503          	lw	a0,-776(a5) # ccf8 <_global_impure_ptr>
    2426:	6589                	lui	a1,0x2
    2428:	3be58593          	addi	a1,a1,958 # 23be <_fflush_r>
    242c:	ac89                	j	267e <_fwalk_reent>
    242e:	67b5                	lui	a5,0xd
    2430:	d007a503          	lw	a0,-768(a5) # cd00 <_impure_ptr>
    2434:	b769                	j	23be <_fflush_r>

00002436 <__fp_lock>:
    2436:	4501                	li	a0,0
    2438:	8082                	ret

0000243a <std>:
    243a:	1141                	addi	sp,sp,-16
    243c:	c422                	sw	s0,8(sp)
    243e:	c606                	sw	ra,12(sp)
    2440:	842a                	mv	s0,a0
    2442:	00b51623          	sh	a1,12(a0)
    2446:	00c51723          	sh	a2,14(a0)
    244a:	00052023          	sw	zero,0(a0)
    244e:	00052223          	sw	zero,4(a0)
    2452:	00052423          	sw	zero,8(a0)
    2456:	06052223          	sw	zero,100(a0)
    245a:	00052823          	sw	zero,16(a0)
    245e:	00052a23          	sw	zero,20(a0)
    2462:	00052c23          	sw	zero,24(a0)
    2466:	4621                	li	a2,8
    2468:	4581                	li	a1,0
    246a:	05c50513          	addi	a0,a0,92
    246e:	899ff0ef          	jal	ra,1d06 <memset>
    2472:	678d                	lui	a5,0x3
    2474:	cbe78793          	addi	a5,a5,-834 # 2cbe <__sread>
    2478:	d05c                	sw	a5,36(s0)
    247a:	678d                	lui	a5,0x3
    247c:	cf478793          	addi	a5,a5,-780 # 2cf4 <__swrite>
    2480:	d41c                	sw	a5,40(s0)
    2482:	678d                	lui	a5,0x3
    2484:	d4278793          	addi	a5,a5,-702 # 2d42 <__sseek>
    2488:	d45c                	sw	a5,44(s0)
    248a:	678d                	lui	a5,0x3
    248c:	d7878793          	addi	a5,a5,-648 # 2d78 <__sclose>
    2490:	40b2                	lw	ra,12(sp)
    2492:	d000                	sw	s0,32(s0)
    2494:	d81c                	sw	a5,48(s0)
    2496:	4422                	lw	s0,8(sp)
    2498:	0141                	addi	sp,sp,16
    249a:	8082                	ret

0000249c <_cleanup_r>:
    249c:	6589                	lui	a1,0x2
    249e:	3be58593          	addi	a1,a1,958 # 23be <_fflush_r>
    24a2:	aaf1                	j	267e <_fwalk_reent>

000024a4 <__fp_unlock>:
    24a4:	4501                	li	a0,0
    24a6:	8082                	ret

000024a8 <__sfmoreglue>:
    24a8:	1141                	addi	sp,sp,-16
    24aa:	c226                	sw	s1,4(sp)
    24ac:	06800793          	li	a5,104
    24b0:	fff58493          	addi	s1,a1,-1
    24b4:	02f484b3          	mul	s1,s1,a5
    24b8:	c04a                	sw	s2,0(sp)
    24ba:	892e                	mv	s2,a1
    24bc:	c422                	sw	s0,8(sp)
    24be:	c606                	sw	ra,12(sp)
    24c0:	07448593          	addi	a1,s1,116
    24c4:	26c1                	jal	2884 <_malloc_r>
    24c6:	842a                	mv	s0,a0
    24c8:	cd01                	beqz	a0,24e0 <__sfmoreglue+0x38>
    24ca:	00052023          	sw	zero,0(a0)
    24ce:	01252223          	sw	s2,4(a0)
    24d2:	0531                	addi	a0,a0,12
    24d4:	c408                	sw	a0,8(s0)
    24d6:	06848613          	addi	a2,s1,104
    24da:	4581                	li	a1,0
    24dc:	82bff0ef          	jal	ra,1d06 <memset>
    24e0:	40b2                	lw	ra,12(sp)
    24e2:	8522                	mv	a0,s0
    24e4:	4422                	lw	s0,8(sp)
    24e6:	4492                	lw	s1,4(sp)
    24e8:	4902                	lw	s2,0(sp)
    24ea:	0141                	addi	sp,sp,16
    24ec:	8082                	ret

000024ee <_cleanup>:
    24ee:	67b5                	lui	a5,0xd
    24f0:	cf87a503          	lw	a0,-776(a5) # ccf8 <_global_impure_ptr>
    24f4:	b765                	j	249c <_cleanup_r>

000024f6 <__sinit>:
    24f6:	4d1c                	lw	a5,24(a0)
    24f8:	e3ad                	bnez	a5,255a <__sinit+0x64>
    24fa:	1141                	addi	sp,sp,-16
    24fc:	6789                	lui	a5,0x2
    24fe:	c422                	sw	s0,8(sp)
    2500:	c606                	sw	ra,12(sp)
    2502:	49c78793          	addi	a5,a5,1180 # 249c <_cleanup_r>
    2506:	d51c                	sw	a5,40(a0)
    2508:	67b5                	lui	a5,0xd
    250a:	cf87a783          	lw	a5,-776(a5) # ccf8 <_global_impure_ptr>
    250e:	04052423          	sw	zero,72(a0)
    2512:	04052623          	sw	zero,76(a0)
    2516:	04052823          	sw	zero,80(a0)
    251a:	842a                	mv	s0,a0
    251c:	00f51463          	bne	a0,a5,2524 <__sinit+0x2e>
    2520:	4785                	li	a5,1
    2522:	cd1c                	sw	a5,24(a0)
    2524:	8522                	mv	a0,s0
    2526:	281d                	jal	255c <__sfp>
    2528:	c048                	sw	a0,4(s0)
    252a:	8522                	mv	a0,s0
    252c:	2805                	jal	255c <__sfp>
    252e:	c408                	sw	a0,8(s0)
    2530:	8522                	mv	a0,s0
    2532:	202d                	jal	255c <__sfp>
    2534:	c448                	sw	a0,12(s0)
    2536:	4048                	lw	a0,4(s0)
    2538:	4601                	li	a2,0
    253a:	4591                	li	a1,4
    253c:	3dfd                	jal	243a <std>
    253e:	4408                	lw	a0,8(s0)
    2540:	4605                	li	a2,1
    2542:	45a5                	li	a1,9
    2544:	3ddd                	jal	243a <std>
    2546:	4448                	lw	a0,12(s0)
    2548:	4609                	li	a2,2
    254a:	45c9                	li	a1,18
    254c:	35fd                	jal	243a <std>
    254e:	4785                	li	a5,1
    2550:	40b2                	lw	ra,12(sp)
    2552:	cc1c                	sw	a5,24(s0)
    2554:	4422                	lw	s0,8(sp)
    2556:	0141                	addi	sp,sp,16
    2558:	8082                	ret
    255a:	8082                	ret

0000255c <__sfp>:
    255c:	1141                	addi	sp,sp,-16
    255e:	67b5                	lui	a5,0xd
    2560:	c226                	sw	s1,4(sp)
    2562:	cf87a483          	lw	s1,-776(a5) # ccf8 <_global_impure_ptr>
    2566:	c04a                	sw	s2,0(sp)
    2568:	c606                	sw	ra,12(sp)
    256a:	4c9c                	lw	a5,24(s1)
    256c:	c422                	sw	s0,8(sp)
    256e:	892a                	mv	s2,a0
    2570:	e399                	bnez	a5,2576 <__sfp+0x1a>
    2572:	8526                	mv	a0,s1
    2574:	3749                	jal	24f6 <__sinit>
    2576:	04848493          	addi	s1,s1,72
    257a:	4480                	lw	s0,8(s1)
    257c:	40dc                	lw	a5,4(s1)
    257e:	17fd                	addi	a5,a5,-1
    2580:	0007d663          	bgez	a5,258c <__sfp+0x30>
    2584:	409c                	lw	a5,0(s1)
    2586:	cfb9                	beqz	a5,25e4 <__sfp+0x88>
    2588:	4084                	lw	s1,0(s1)
    258a:	bfc5                	j	257a <__sfp+0x1e>
    258c:	00c41703          	lh	a4,12(s0)
    2590:	e739                	bnez	a4,25de <__sfp+0x82>
    2592:	77c1                	lui	a5,0xffff0
    2594:	0785                	addi	a5,a5,1
    2596:	06042223          	sw	zero,100(s0)
    259a:	00042023          	sw	zero,0(s0)
    259e:	00042223          	sw	zero,4(s0)
    25a2:	00042423          	sw	zero,8(s0)
    25a6:	c45c                	sw	a5,12(s0)
    25a8:	00042823          	sw	zero,16(s0)
    25ac:	00042a23          	sw	zero,20(s0)
    25b0:	00042c23          	sw	zero,24(s0)
    25b4:	4621                	li	a2,8
    25b6:	4581                	li	a1,0
    25b8:	05c40513          	addi	a0,s0,92
    25bc:	f4aff0ef          	jal	ra,1d06 <memset>
    25c0:	02042a23          	sw	zero,52(s0)
    25c4:	02042c23          	sw	zero,56(s0)
    25c8:	04042423          	sw	zero,72(s0)
    25cc:	04042623          	sw	zero,76(s0)
    25d0:	40b2                	lw	ra,12(sp)
    25d2:	8522                	mv	a0,s0
    25d4:	4422                	lw	s0,8(sp)
    25d6:	4492                	lw	s1,4(sp)
    25d8:	4902                	lw	s2,0(sp)
    25da:	0141                	addi	sp,sp,16
    25dc:	8082                	ret
    25de:	06840413          	addi	s0,s0,104
    25e2:	bf71                	j	257e <__sfp+0x22>
    25e4:	4591                	li	a1,4
    25e6:	854a                	mv	a0,s2
    25e8:	35c1                	jal	24a8 <__sfmoreglue>
    25ea:	c088                	sw	a0,0(s1)
    25ec:	842a                	mv	s0,a0
    25ee:	fd49                	bnez	a0,2588 <__sfp+0x2c>
    25f0:	47b1                	li	a5,12
    25f2:	00f92023          	sw	a5,0(s2)
    25f6:	bfe9                	j	25d0 <__sfp+0x74>

000025f8 <__sfp_lock_acquire>:
    25f8:	8082                	ret

000025fa <__sfp_lock_release>:
    25fa:	8082                	ret

000025fc <__sinit_lock_acquire>:
    25fc:	8082                	ret

000025fe <__sinit_lock_release>:
    25fe:	8082                	ret

00002600 <__fp_lock_all>:
    2600:	67b5                	lui	a5,0xd
    2602:	d007a503          	lw	a0,-768(a5) # cd00 <_impure_ptr>
    2606:	6589                	lui	a1,0x2
    2608:	43658593          	addi	a1,a1,1078 # 2436 <__fp_lock>
    260c:	a801                	j	261c <_fwalk>

0000260e <__fp_unlock_all>:
    260e:	67b5                	lui	a5,0xd
    2610:	d007a503          	lw	a0,-768(a5) # cd00 <_impure_ptr>
    2614:	6589                	lui	a1,0x2
    2616:	4a458593          	addi	a1,a1,1188 # 24a4 <__fp_unlock>
    261a:	a009                	j	261c <_fwalk>

0000261c <_fwalk>:
    261c:	1101                	addi	sp,sp,-32
    261e:	cc22                	sw	s0,24(sp)
    2620:	c84a                	sw	s2,16(sp)
    2622:	c64e                	sw	s3,12(sp)
    2624:	c256                	sw	s5,4(sp)
    2626:	c05a                	sw	s6,0(sp)
    2628:	ce06                	sw	ra,28(sp)
    262a:	ca26                	sw	s1,20(sp)
    262c:	c452                	sw	s4,8(sp)
    262e:	89ae                	mv	s3,a1
    2630:	04850413          	addi	s0,a0,72
    2634:	4901                	li	s2,0
    2636:	4a85                	li	s5,1
    2638:	5b7d                	li	s6,-1
    263a:	4404                	lw	s1,8(s0)
    263c:	00442a03          	lw	s4,4(s0)
    2640:	1a7d                	addi	s4,s4,-1
    2642:	000a5f63          	bgez	s4,2660 <_fwalk+0x44>
    2646:	4000                	lw	s0,0(s0)
    2648:	f86d                	bnez	s0,263a <_fwalk+0x1e>
    264a:	40f2                	lw	ra,28(sp)
    264c:	4462                	lw	s0,24(sp)
    264e:	44d2                	lw	s1,20(sp)
    2650:	49b2                	lw	s3,12(sp)
    2652:	4a22                	lw	s4,8(sp)
    2654:	4a92                	lw	s5,4(sp)
    2656:	4b02                	lw	s6,0(sp)
    2658:	854a                	mv	a0,s2
    265a:	4942                	lw	s2,16(sp)
    265c:	6105                	addi	sp,sp,32
    265e:	8082                	ret
    2660:	00c4d783          	lhu	a5,12(s1)
    2664:	00fafa63          	bgeu	s5,a5,2678 <_fwalk+0x5c>
    2668:	00e49783          	lh	a5,14(s1)
    266c:	01678663          	beq	a5,s6,2678 <_fwalk+0x5c>
    2670:	8526                	mv	a0,s1
    2672:	9982                	jalr	s3
    2674:	00a96933          	or	s2,s2,a0
    2678:	06848493          	addi	s1,s1,104
    267c:	b7d1                	j	2640 <_fwalk+0x24>

0000267e <_fwalk_reent>:
    267e:	7179                	addi	sp,sp,-48
    2680:	d422                	sw	s0,40(sp)
    2682:	d04a                	sw	s2,32(sp)
    2684:	ce4e                	sw	s3,28(sp)
    2686:	cc52                	sw	s4,24(sp)
    2688:	c85a                	sw	s6,16(sp)
    268a:	c65e                	sw	s7,12(sp)
    268c:	d606                	sw	ra,44(sp)
    268e:	d226                	sw	s1,36(sp)
    2690:	ca56                	sw	s5,20(sp)
    2692:	892a                	mv	s2,a0
    2694:	8a2e                	mv	s4,a1
    2696:	04850413          	addi	s0,a0,72
    269a:	4981                	li	s3,0
    269c:	4b05                	li	s6,1
    269e:	5bfd                	li	s7,-1
    26a0:	4404                	lw	s1,8(s0)
    26a2:	00442a83          	lw	s5,4(s0)
    26a6:	1afd                	addi	s5,s5,-1
    26a8:	020ad063          	bgez	s5,26c8 <_fwalk_reent+0x4a>
    26ac:	4000                	lw	s0,0(s0)
    26ae:	f86d                	bnez	s0,26a0 <_fwalk_reent+0x22>
    26b0:	50b2                	lw	ra,44(sp)
    26b2:	5422                	lw	s0,40(sp)
    26b4:	5492                	lw	s1,36(sp)
    26b6:	5902                	lw	s2,32(sp)
    26b8:	4a62                	lw	s4,24(sp)
    26ba:	4ad2                	lw	s5,20(sp)
    26bc:	4b42                	lw	s6,16(sp)
    26be:	4bb2                	lw	s7,12(sp)
    26c0:	854e                	mv	a0,s3
    26c2:	49f2                	lw	s3,28(sp)
    26c4:	6145                	addi	sp,sp,48
    26c6:	8082                	ret
    26c8:	00c4d783          	lhu	a5,12(s1)
    26cc:	00fb7b63          	bgeu	s6,a5,26e2 <_fwalk_reent+0x64>
    26d0:	00e49783          	lh	a5,14(s1)
    26d4:	01778763          	beq	a5,s7,26e2 <_fwalk_reent+0x64>
    26d8:	85a6                	mv	a1,s1
    26da:	854a                	mv	a0,s2
    26dc:	9a02                	jalr	s4
    26de:	00a9e9b3          	or	s3,s3,a0
    26e2:	06848493          	addi	s1,s1,104
    26e6:	b7c1                	j	26a6 <_fwalk_reent+0x28>

000026e8 <__swhatbuf_r>:
    26e8:	7159                	addi	sp,sp,-112
    26ea:	d4a2                	sw	s0,104(sp)
    26ec:	842e                	mv	s0,a1
    26ee:	00e59583          	lh	a1,14(a1)
    26f2:	d2a6                	sw	s1,100(sp)
    26f4:	d0ca                	sw	s2,96(sp)
    26f6:	d686                	sw	ra,108(sp)
    26f8:	84b2                	mv	s1,a2
    26fa:	8936                	mv	s2,a3
    26fc:	0205d463          	bgez	a1,2724 <__swhatbuf_r+0x3c>
    2700:	00c45783          	lhu	a5,12(s0)
    2704:	0807f793          	andi	a5,a5,128
    2708:	cf85                	beqz	a5,2740 <__swhatbuf_r+0x58>
    270a:	4781                	li	a5,0
    270c:	04000713          	li	a4,64
    2710:	50b6                	lw	ra,108(sp)
    2712:	5426                	lw	s0,104(sp)
    2714:	00f92023          	sw	a5,0(s2)
    2718:	c098                	sw	a4,0(s1)
    271a:	5906                	lw	s2,96(sp)
    271c:	5496                	lw	s1,100(sp)
    271e:	4501                	li	a0,0
    2720:	6165                	addi	sp,sp,112
    2722:	8082                	ret
    2724:	0030                	addi	a2,sp,8
    2726:	2d65                	jal	2dde <_fstat_r>
    2728:	fc054ce3          	bltz	a0,2700 <__swhatbuf_r+0x18>
    272c:	4732                	lw	a4,12(sp)
    272e:	67bd                	lui	a5,0xf
    2730:	8ff9                	and	a5,a5,a4
    2732:	7779                	lui	a4,0xffffe
    2734:	97ba                	add	a5,a5,a4
    2736:	0017b793          	seqz	a5,a5
    273a:	40000713          	li	a4,1024
    273e:	bfc9                	j	2710 <__swhatbuf_r+0x28>
    2740:	4781                	li	a5,0
    2742:	bfe5                	j	273a <__swhatbuf_r+0x52>

00002744 <__smakebuf_r>:
    2744:	00c5d783          	lhu	a5,12(a1)
    2748:	1101                	addi	sp,sp,-32
    274a:	cc22                	sw	s0,24(sp)
    274c:	ce06                	sw	ra,28(sp)
    274e:	ca26                	sw	s1,20(sp)
    2750:	c84a                	sw	s2,16(sp)
    2752:	8b89                	andi	a5,a5,2
    2754:	842e                	mv	s0,a1
    2756:	cf89                	beqz	a5,2770 <__smakebuf_r+0x2c>
    2758:	04740793          	addi	a5,s0,71
    275c:	c01c                	sw	a5,0(s0)
    275e:	c81c                	sw	a5,16(s0)
    2760:	4785                	li	a5,1
    2762:	c85c                	sw	a5,20(s0)
    2764:	40f2                	lw	ra,28(sp)
    2766:	4462                	lw	s0,24(sp)
    2768:	44d2                	lw	s1,20(sp)
    276a:	4942                	lw	s2,16(sp)
    276c:	6105                	addi	sp,sp,32
    276e:	8082                	ret
    2770:	0074                	addi	a3,sp,12
    2772:	0030                	addi	a2,sp,8
    2774:	84aa                	mv	s1,a0
    2776:	3f8d                	jal	26e8 <__swhatbuf_r>
    2778:	45a2                	lw	a1,8(sp)
    277a:	892a                	mv	s2,a0
    277c:	8526                	mv	a0,s1
    277e:	2219                	jal	2884 <_malloc_r>
    2780:	ed01                	bnez	a0,2798 <__smakebuf_r+0x54>
    2782:	00c41783          	lh	a5,12(s0)
    2786:	2007f713          	andi	a4,a5,512
    278a:	ff69                	bnez	a4,2764 <__smakebuf_r+0x20>
    278c:	9bf1                	andi	a5,a5,-4
    278e:	0027e793          	ori	a5,a5,2
    2792:	00f41623          	sh	a5,12(s0)
    2796:	b7c9                	j	2758 <__smakebuf_r+0x14>
    2798:	6789                	lui	a5,0x2
    279a:	49c78793          	addi	a5,a5,1180 # 249c <_cleanup_r>
    279e:	d49c                	sw	a5,40(s1)
    27a0:	00c45783          	lhu	a5,12(s0)
    27a4:	c008                	sw	a0,0(s0)
    27a6:	c808                	sw	a0,16(s0)
    27a8:	0807e793          	ori	a5,a5,128
    27ac:	00f41623          	sh	a5,12(s0)
    27b0:	47a2                	lw	a5,8(sp)
    27b2:	c85c                	sw	a5,20(s0)
    27b4:	47b2                	lw	a5,12(sp)
    27b6:	cf91                	beqz	a5,27d2 <__smakebuf_r+0x8e>
    27b8:	00e41583          	lh	a1,14(s0)
    27bc:	8526                	mv	a0,s1
    27be:	11d000ef          	jal	ra,30da <_isatty_r>
    27c2:	c901                	beqz	a0,27d2 <__smakebuf_r+0x8e>
    27c4:	00c45783          	lhu	a5,12(s0)
    27c8:	9bf1                	andi	a5,a5,-4
    27ca:	0017e793          	ori	a5,a5,1
    27ce:	00f41623          	sh	a5,12(s0)
    27d2:	00c45783          	lhu	a5,12(s0)
    27d6:	0127e533          	or	a0,a5,s2
    27da:	00a41623          	sh	a0,12(s0)
    27de:	b759                	j	2764 <__smakebuf_r+0x20>

000027e0 <_free_r>:
    27e0:	c1cd                	beqz	a1,2882 <_free_r+0xa2>
    27e2:	ffc5a783          	lw	a5,-4(a1)
    27e6:	1101                	addi	sp,sp,-32
    27e8:	cc22                	sw	s0,24(sp)
    27ea:	ce06                	sw	ra,28(sp)
    27ec:	ffc58413          	addi	s0,a1,-4
    27f0:	0007d363          	bgez	a5,27f6 <_free_r+0x16>
    27f4:	943e                	add	s0,s0,a5
    27f6:	c62a                	sw	a0,12(sp)
    27f8:	183000ef          	jal	ra,317a <__malloc_lock>
    27fc:	6735                	lui	a4,0xd
    27fe:	d1072783          	lw	a5,-752(a4) # cd10 <__malloc_free_list>
    2802:	4532                	lw	a0,12(sp)
    2804:	eb91                	bnez	a5,2818 <_free_r+0x38>
    2806:	00042223          	sw	zero,4(s0)
    280a:	d0872823          	sw	s0,-752(a4)
    280e:	4462                	lw	s0,24(sp)
    2810:	40f2                	lw	ra,28(sp)
    2812:	6105                	addi	sp,sp,32
    2814:	1690006f          	j	317c <__malloc_unlock>
    2818:	00f47d63          	bgeu	s0,a5,2832 <_free_r+0x52>
    281c:	4010                	lw	a2,0(s0)
    281e:	00c406b3          	add	a3,s0,a2
    2822:	00d79663          	bne	a5,a3,282e <_free_r+0x4e>
    2826:	4394                	lw	a3,0(a5)
    2828:	43dc                	lw	a5,4(a5)
    282a:	96b2                	add	a3,a3,a2
    282c:	c014                	sw	a3,0(s0)
    282e:	c05c                	sw	a5,4(s0)
    2830:	bfe9                	j	280a <_free_r+0x2a>
    2832:	873e                	mv	a4,a5
    2834:	43dc                	lw	a5,4(a5)
    2836:	c399                	beqz	a5,283c <_free_r+0x5c>
    2838:	fef47de3          	bgeu	s0,a5,2832 <_free_r+0x52>
    283c:	4314                	lw	a3,0(a4)
    283e:	00d70633          	add	a2,a4,a3
    2842:	00861f63          	bne	a2,s0,2860 <_free_r+0x80>
    2846:	4010                	lw	a2,0(s0)
    2848:	96b2                	add	a3,a3,a2
    284a:	c314                	sw	a3,0(a4)
    284c:	00d70633          	add	a2,a4,a3
    2850:	fac79fe3          	bne	a5,a2,280e <_free_r+0x2e>
    2854:	4390                	lw	a2,0(a5)
    2856:	43dc                	lw	a5,4(a5)
    2858:	96b2                	add	a3,a3,a2
    285a:	c314                	sw	a3,0(a4)
    285c:	c35c                	sw	a5,4(a4)
    285e:	bf45                	j	280e <_free_r+0x2e>
    2860:	00c47563          	bgeu	s0,a2,286a <_free_r+0x8a>
    2864:	47b1                	li	a5,12
    2866:	c11c                	sw	a5,0(a0)
    2868:	b75d                	j	280e <_free_r+0x2e>
    286a:	4010                	lw	a2,0(s0)
    286c:	00c406b3          	add	a3,s0,a2
    2870:	00d79663          	bne	a5,a3,287c <_free_r+0x9c>
    2874:	4394                	lw	a3,0(a5)
    2876:	43dc                	lw	a5,4(a5)
    2878:	96b2                	add	a3,a3,a2
    287a:	c014                	sw	a3,0(s0)
    287c:	c05c                	sw	a5,4(s0)
    287e:	c340                	sw	s0,4(a4)
    2880:	b779                	j	280e <_free_r+0x2e>
    2882:	8082                	ret

00002884 <_malloc_r>:
    2884:	1101                	addi	sp,sp,-32
    2886:	ca26                	sw	s1,20(sp)
    2888:	00358493          	addi	s1,a1,3
    288c:	98f1                	andi	s1,s1,-4
    288e:	c84a                	sw	s2,16(sp)
    2890:	ce06                	sw	ra,28(sp)
    2892:	cc22                	sw	s0,24(sp)
    2894:	c64e                	sw	s3,12(sp)
    2896:	04a1                	addi	s1,s1,8
    2898:	47b1                	li	a5,12
    289a:	892a                	mv	s2,a0
    289c:	04f4f663          	bgeu	s1,a5,28e8 <_malloc_r+0x64>
    28a0:	44b1                	li	s1,12
    28a2:	04b4e563          	bltu	s1,a1,28ec <_malloc_r+0x68>
    28a6:	854a                	mv	a0,s2
    28a8:	0d3000ef          	jal	ra,317a <__malloc_lock>
    28ac:	67b5                	lui	a5,0xd
    28ae:	d1078713          	addi	a4,a5,-752 # cd10 <__malloc_free_list>
    28b2:	4318                	lw	a4,0(a4)
    28b4:	d1078693          	addi	a3,a5,-752
    28b8:	843a                	mv	s0,a4
    28ba:	e421                	bnez	s0,2902 <_malloc_r+0x7e>
    28bc:	6435                	lui	s0,0xd
    28be:	d1440413          	addi	s0,s0,-748 # cd14 <__malloc_sbrk_start>
    28c2:	401c                	lw	a5,0(s0)
    28c4:	e789                	bnez	a5,28ce <_malloc_r+0x4a>
    28c6:	4581                	li	a1,0
    28c8:	854a                	mv	a0,s2
    28ca:	26d9                	jal	2c90 <_sbrk_r>
    28cc:	c008                	sw	a0,0(s0)
    28ce:	85a6                	mv	a1,s1
    28d0:	854a                	mv	a0,s2
    28d2:	2e7d                	jal	2c90 <_sbrk_r>
    28d4:	59fd                	li	s3,-1
    28d6:	07351a63          	bne	a0,s3,294a <_malloc_r+0xc6>
    28da:	47b1                	li	a5,12
    28dc:	00f92023          	sw	a5,0(s2)
    28e0:	854a                	mv	a0,s2
    28e2:	09b000ef          	jal	ra,317c <__malloc_unlock>
    28e6:	a031                	j	28f2 <_malloc_r+0x6e>
    28e8:	fa04dde3          	bgez	s1,28a2 <_malloc_r+0x1e>
    28ec:	47b1                	li	a5,12
    28ee:	00f92023          	sw	a5,0(s2)
    28f2:	4501                	li	a0,0
    28f4:	40f2                	lw	ra,28(sp)
    28f6:	4462                	lw	s0,24(sp)
    28f8:	44d2                	lw	s1,20(sp)
    28fa:	4942                	lw	s2,16(sp)
    28fc:	49b2                	lw	s3,12(sp)
    28fe:	6105                	addi	sp,sp,32
    2900:	8082                	ret
    2902:	401c                	lw	a5,0(s0)
    2904:	8f85                	sub	a5,a5,s1
    2906:	0207cf63          	bltz	a5,2944 <_malloc_r+0xc0>
    290a:	462d                	li	a2,11
    290c:	00f67663          	bgeu	a2,a5,2918 <_malloc_r+0x94>
    2910:	c01c                	sw	a5,0(s0)
    2912:	943e                	add	s0,s0,a5
    2914:	c004                	sw	s1,0(s0)
    2916:	a029                	j	2920 <_malloc_r+0x9c>
    2918:	405c                	lw	a5,4(s0)
    291a:	02871363          	bne	a4,s0,2940 <_malloc_r+0xbc>
    291e:	c29c                	sw	a5,0(a3)
    2920:	854a                	mv	a0,s2
    2922:	05b000ef          	jal	ra,317c <__malloc_unlock>
    2926:	00b40513          	addi	a0,s0,11
    292a:	00440793          	addi	a5,s0,4
    292e:	9961                	andi	a0,a0,-8
    2930:	40f50733          	sub	a4,a0,a5
    2934:	fcf500e3          	beq	a0,a5,28f4 <_malloc_r+0x70>
    2938:	943a                	add	s0,s0,a4
    293a:	8f89                	sub	a5,a5,a0
    293c:	c01c                	sw	a5,0(s0)
    293e:	bf5d                	j	28f4 <_malloc_r+0x70>
    2940:	c35c                	sw	a5,4(a4)
    2942:	bff9                	j	2920 <_malloc_r+0x9c>
    2944:	8722                	mv	a4,s0
    2946:	4040                	lw	s0,4(s0)
    2948:	bf8d                	j	28ba <_malloc_r+0x36>
    294a:	00350413          	addi	s0,a0,3
    294e:	9871                	andi	s0,s0,-4
    2950:	fc8502e3          	beq	a0,s0,2914 <_malloc_r+0x90>
    2954:	40a405b3          	sub	a1,s0,a0
    2958:	854a                	mv	a0,s2
    295a:	2e1d                	jal	2c90 <_sbrk_r>
    295c:	fb351ce3          	bne	a0,s3,2914 <_malloc_r+0x90>
    2960:	bfad                	j	28da <_malloc_r+0x56>

00002962 <__sfputc_r>:
    2962:	461c                	lw	a5,8(a2)
    2964:	17fd                	addi	a5,a5,-1
    2966:	c61c                	sw	a5,8(a2)
    2968:	0007da63          	bgez	a5,297c <__sfputc_r+0x1a>
    296c:	4e18                	lw	a4,24(a2)
    296e:	00e7c563          	blt	a5,a4,2978 <__sfputc_r+0x16>
    2972:	47a9                	li	a5,10
    2974:	00f59463          	bne	a1,a5,297c <__sfputc_r+0x1a>
    2978:	df0ff06f          	j	1f68 <__swbuf_r>
    297c:	421c                	lw	a5,0(a2)
    297e:	852e                	mv	a0,a1
    2980:	00178713          	addi	a4,a5,1
    2984:	c218                	sw	a4,0(a2)
    2986:	00b78023          	sb	a1,0(a5)
    298a:	8082                	ret

0000298c <__sfputs_r>:
    298c:	1101                	addi	sp,sp,-32
    298e:	cc22                	sw	s0,24(sp)
    2990:	ca26                	sw	s1,20(sp)
    2992:	c84a                	sw	s2,16(sp)
    2994:	c64e                	sw	s3,12(sp)
    2996:	c452                	sw	s4,8(sp)
    2998:	ce06                	sw	ra,28(sp)
    299a:	892a                	mv	s2,a0
    299c:	89ae                	mv	s3,a1
    299e:	8432                	mv	s0,a2
    29a0:	00d604b3          	add	s1,a2,a3
    29a4:	5a7d                	li	s4,-1
    29a6:	00941463          	bne	s0,s1,29ae <__sfputs_r+0x22>
    29aa:	4501                	li	a0,0
    29ac:	a809                	j	29be <__sfputs_r+0x32>
    29ae:	00044583          	lbu	a1,0(s0)
    29b2:	864e                	mv	a2,s3
    29b4:	854a                	mv	a0,s2
    29b6:	3775                	jal	2962 <__sfputc_r>
    29b8:	0405                	addi	s0,s0,1
    29ba:	ff4516e3          	bne	a0,s4,29a6 <__sfputs_r+0x1a>
    29be:	40f2                	lw	ra,28(sp)
    29c0:	4462                	lw	s0,24(sp)
    29c2:	44d2                	lw	s1,20(sp)
    29c4:	4942                	lw	s2,16(sp)
    29c6:	49b2                	lw	s3,12(sp)
    29c8:	4a22                	lw	s4,8(sp)
    29ca:	6105                	addi	sp,sp,32
    29cc:	8082                	ret

000029ce <__sprint_r>:
    29ce:	461c                	lw	a5,8(a2)
    29d0:	1141                	addi	sp,sp,-16
    29d2:	c422                	sw	s0,8(sp)
    29d4:	c606                	sw	ra,12(sp)
    29d6:	8432                	mv	s0,a2
    29d8:	cb91                	beqz	a5,29ec <__sprint_r+0x1e>
    29da:	2915                	jal	2e0e <__sfvwrite_r>
    29dc:	00042423          	sw	zero,8(s0)
    29e0:	40b2                	lw	ra,12(sp)
    29e2:	00042223          	sw	zero,4(s0)
    29e6:	4422                	lw	s0,8(sp)
    29e8:	0141                	addi	sp,sp,16
    29ea:	8082                	ret
    29ec:	4501                	li	a0,0
    29ee:	bfcd                	j	29e0 <__sprint_r+0x12>

000029f0 <_vfiprintf_r>:
    29f0:	7171                	addi	sp,sp,-176
    29f2:	d522                	sw	s0,168(sp)
    29f4:	d326                	sw	s1,164(sp)
    29f6:	d14a                	sw	s2,160(sp)
    29f8:	cf4e                	sw	s3,156(sp)
    29fa:	d706                	sw	ra,172(sp)
    29fc:	cd52                	sw	s4,152(sp)
    29fe:	cb56                	sw	s5,148(sp)
    2a00:	c95a                	sw	s6,144(sp)
    2a02:	c75e                	sw	s7,140(sp)
    2a04:	c562                	sw	s8,136(sp)
    2a06:	c366                	sw	s9,132(sp)
    2a08:	c16a                	sw	s10,128(sp)
    2a0a:	deee                	sw	s11,124(sp)
    2a0c:	89aa                	mv	s3,a0
    2a0e:	84ae                	mv	s1,a1
    2a10:	8932                	mv	s2,a2
    2a12:	8436                	mv	s0,a3
    2a14:	c509                	beqz	a0,2a1e <_vfiprintf_r+0x2e>
    2a16:	4d1c                	lw	a5,24(a0)
    2a18:	e399                	bnez	a5,2a1e <_vfiprintf_r+0x2e>
    2a1a:	addff0ef          	jal	ra,24f6 <__sinit>
    2a1e:	67b5                	lui	a5,0xd
    2a20:	abc78793          	addi	a5,a5,-1348 # cabc <__sf_fake_stdin>
    2a24:	0ef49063          	bne	s1,a5,2b04 <_vfiprintf_r+0x114>
    2a28:	0049a483          	lw	s1,4(s3)
    2a2c:	00c4d783          	lhu	a5,12(s1)
    2a30:	8ba1                	andi	a5,a5,8
    2a32:	0e078963          	beqz	a5,2b24 <_vfiprintf_r+0x134>
    2a36:	489c                	lw	a5,16(s1)
    2a38:	0e078663          	beqz	a5,2b24 <_vfiprintf_r+0x134>
    2a3c:	02000793          	li	a5,32
    2a40:	02f104a3          	sb	a5,41(sp)
    2a44:	03000793          	li	a5,48
    2a48:	d202                	sw	zero,36(sp)
    2a4a:	02f10523          	sb	a5,42(sp)
    2a4e:	c622                	sw	s0,12(sp)
    2a50:	02500c93          	li	s9,37
    2a54:	6b35                	lui	s6,0xd
    2a56:	6bb5                	lui	s7,0xd
    2a58:	6d35                	lui	s10,0xd
    2a5a:	6c0d                	lui	s8,0x3
    2a5c:	00000a93          	li	s5,0
    2a60:	844a                	mv	s0,s2
    2a62:	00044783          	lbu	a5,0(s0)
    2a66:	c399                	beqz	a5,2a6c <_vfiprintf_r+0x7c>
    2a68:	0f979463          	bne	a5,s9,2b50 <_vfiprintf_r+0x160>
    2a6c:	41240db3          	sub	s11,s0,s2
    2a70:	01240d63          	beq	s0,s2,2a8a <_vfiprintf_r+0x9a>
    2a74:	86ee                	mv	a3,s11
    2a76:	864a                	mv	a2,s2
    2a78:	85a6                	mv	a1,s1
    2a7a:	854e                	mv	a0,s3
    2a7c:	3f01                	jal	298c <__sfputs_r>
    2a7e:	57fd                	li	a5,-1
    2a80:	1ef50163          	beq	a0,a5,2c62 <_vfiprintf_r+0x272>
    2a84:	5792                	lw	a5,36(sp)
    2a86:	97ee                	add	a5,a5,s11
    2a88:	d23e                	sw	a5,36(sp)
    2a8a:	00044783          	lbu	a5,0(s0)
    2a8e:	1c078a63          	beqz	a5,2c62 <_vfiprintf_r+0x272>
    2a92:	57fd                	li	a5,-1
    2a94:	00140913          	addi	s2,s0,1
    2a98:	c802                	sw	zero,16(sp)
    2a9a:	ce02                	sw	zero,28(sp)
    2a9c:	ca3e                	sw	a5,20(sp)
    2a9e:	cc02                	sw	zero,24(sp)
    2aa0:	040109a3          	sb	zero,83(sp)
    2aa4:	d482                	sw	zero,104(sp)
    2aa6:	4d85                	li	s11,1
    2aa8:	00094583          	lbu	a1,0(s2)
    2aac:	4615                	li	a2,5
    2aae:	afcb0513          	addi	a0,s6,-1284 # cafc <__sf_fake_stdout+0x20>
    2ab2:	2561                	jal	313a <memchr>
    2ab4:	47c2                	lw	a5,16(sp)
    2ab6:	00190413          	addi	s0,s2,1
    2aba:	ed49                	bnez	a0,2b54 <_vfiprintf_r+0x164>
    2abc:	0107f713          	andi	a4,a5,16
    2ac0:	c709                	beqz	a4,2aca <_vfiprintf_r+0xda>
    2ac2:	02000713          	li	a4,32
    2ac6:	04e109a3          	sb	a4,83(sp)
    2aca:	0087f713          	andi	a4,a5,8
    2ace:	c709                	beqz	a4,2ad8 <_vfiprintf_r+0xe8>
    2ad0:	02b00713          	li	a4,43
    2ad4:	04e109a3          	sb	a4,83(sp)
    2ad8:	00094683          	lbu	a3,0(s2)
    2adc:	02a00713          	li	a4,42
    2ae0:	08e68363          	beq	a3,a4,2b66 <_vfiprintf_r+0x176>
    2ae4:	47f2                	lw	a5,28(sp)
    2ae6:	844a                	mv	s0,s2
    2ae8:	4681                	li	a3,0
    2aea:	4625                	li	a2,9
    2aec:	4529                	li	a0,10
    2aee:	00044703          	lbu	a4,0(s0)
    2af2:	00140593          	addi	a1,s0,1
    2af6:	fd070713          	addi	a4,a4,-48
    2afa:	0ae67b63          	bgeu	a2,a4,2bb0 <_vfiprintf_r+0x1c0>
    2afe:	cea5                	beqz	a3,2b76 <_vfiprintf_r+0x186>
    2b00:	ce3e                	sw	a5,28(sp)
    2b02:	a895                	j	2b76 <_vfiprintf_r+0x186>
    2b04:	67b5                	lui	a5,0xd
    2b06:	adc78793          	addi	a5,a5,-1316 # cadc <__sf_fake_stdout>
    2b0a:	00f49563          	bne	s1,a5,2b14 <_vfiprintf_r+0x124>
    2b0e:	0089a483          	lw	s1,8(s3)
    2b12:	bf29                	j	2a2c <_vfiprintf_r+0x3c>
    2b14:	67b5                	lui	a5,0xd
    2b16:	a9c78793          	addi	a5,a5,-1380 # ca9c <__sf_fake_stderr>
    2b1a:	f0f499e3          	bne	s1,a5,2a2c <_vfiprintf_r+0x3c>
    2b1e:	00c9a483          	lw	s1,12(s3)
    2b22:	b729                	j	2a2c <_vfiprintf_r+0x3c>
    2b24:	85a6                	mv	a1,s1
    2b26:	854e                	mv	a0,s3
    2b28:	d06ff0ef          	jal	ra,202e <__swsetup_r>
    2b2c:	f00508e3          	beqz	a0,2a3c <_vfiprintf_r+0x4c>
    2b30:	557d                	li	a0,-1
    2b32:	50ba                	lw	ra,172(sp)
    2b34:	542a                	lw	s0,168(sp)
    2b36:	549a                	lw	s1,164(sp)
    2b38:	590a                	lw	s2,160(sp)
    2b3a:	49fa                	lw	s3,156(sp)
    2b3c:	4a6a                	lw	s4,152(sp)
    2b3e:	4ada                	lw	s5,148(sp)
    2b40:	4b4a                	lw	s6,144(sp)
    2b42:	4bba                	lw	s7,140(sp)
    2b44:	4c2a                	lw	s8,136(sp)
    2b46:	4c9a                	lw	s9,132(sp)
    2b48:	4d0a                	lw	s10,128(sp)
    2b4a:	5df6                	lw	s11,124(sp)
    2b4c:	614d                	addi	sp,sp,176
    2b4e:	8082                	ret
    2b50:	0405                	addi	s0,s0,1
    2b52:	bf01                	j	2a62 <_vfiprintf_r+0x72>
    2b54:	afcb0713          	addi	a4,s6,-1284
    2b58:	8d19                	sub	a0,a0,a4
    2b5a:	00ad9533          	sll	a0,s11,a0
    2b5e:	8fc9                	or	a5,a5,a0
    2b60:	c83e                	sw	a5,16(sp)
    2b62:	8922                	mv	s2,s0
    2b64:	b791                	j	2aa8 <_vfiprintf_r+0xb8>
    2b66:	4732                	lw	a4,12(sp)
    2b68:	00470693          	addi	a3,a4,4
    2b6c:	4318                	lw	a4,0(a4)
    2b6e:	c636                	sw	a3,12(sp)
    2b70:	02074963          	bltz	a4,2ba2 <_vfiprintf_r+0x1b2>
    2b74:	ce3a                	sw	a4,28(sp)
    2b76:	00044703          	lbu	a4,0(s0)
    2b7a:	02e00793          	li	a5,46
    2b7e:	06f71063          	bne	a4,a5,2bde <_vfiprintf_r+0x1ee>
    2b82:	00144703          	lbu	a4,1(s0)
    2b86:	02a00793          	li	a5,42
    2b8a:	02f71b63          	bne	a4,a5,2bc0 <_vfiprintf_r+0x1d0>
    2b8e:	47b2                	lw	a5,12(sp)
    2b90:	0409                	addi	s0,s0,2
    2b92:	00478713          	addi	a4,a5,4
    2b96:	439c                	lw	a5,0(a5)
    2b98:	c63a                	sw	a4,12(sp)
    2b9a:	0207c163          	bltz	a5,2bbc <_vfiprintf_r+0x1cc>
    2b9e:	ca3e                	sw	a5,20(sp)
    2ba0:	a83d                	j	2bde <_vfiprintf_r+0x1ee>
    2ba2:	40e00733          	neg	a4,a4
    2ba6:	0027e793          	ori	a5,a5,2
    2baa:	ce3a                	sw	a4,28(sp)
    2bac:	c83e                	sw	a5,16(sp)
    2bae:	b7e1                	j	2b76 <_vfiprintf_r+0x186>
    2bb0:	02a787b3          	mul	a5,a5,a0
    2bb4:	842e                	mv	s0,a1
    2bb6:	4685                	li	a3,1
    2bb8:	97ba                	add	a5,a5,a4
    2bba:	bf15                	j	2aee <_vfiprintf_r+0xfe>
    2bbc:	57fd                	li	a5,-1
    2bbe:	b7c5                	j	2b9e <_vfiprintf_r+0x1ae>
    2bc0:	0405                	addi	s0,s0,1
    2bc2:	ca02                	sw	zero,20(sp)
    2bc4:	4681                	li	a3,0
    2bc6:	4781                	li	a5,0
    2bc8:	4625                	li	a2,9
    2bca:	4529                	li	a0,10
    2bcc:	00044703          	lbu	a4,0(s0)
    2bd0:	00140593          	addi	a1,s0,1
    2bd4:	fd070713          	addi	a4,a4,-48
    2bd8:	04e67d63          	bgeu	a2,a4,2c32 <_vfiprintf_r+0x242>
    2bdc:	f2e9                	bnez	a3,2b9e <_vfiprintf_r+0x1ae>
    2bde:	00044583          	lbu	a1,0(s0)
    2be2:	460d                	li	a2,3
    2be4:	b04b8513          	addi	a0,s7,-1276 # cb04 <__sf_fake_stdout+0x28>
    2be8:	2b89                	jal	313a <memchr>
    2bea:	cd01                	beqz	a0,2c02 <_vfiprintf_r+0x212>
    2bec:	b04b8793          	addi	a5,s7,-1276
    2bf0:	8d1d                	sub	a0,a0,a5
    2bf2:	47c2                	lw	a5,16(sp)
    2bf4:	04000713          	li	a4,64
    2bf8:	00a71733          	sll	a4,a4,a0
    2bfc:	8fd9                	or	a5,a5,a4
    2bfe:	0405                	addi	s0,s0,1
    2c00:	c83e                	sw	a5,16(sp)
    2c02:	00044583          	lbu	a1,0(s0)
    2c06:	4619                	li	a2,6
    2c08:	b08d0513          	addi	a0,s10,-1272 # cb08 <__sf_fake_stdout+0x2c>
    2c0c:	00140913          	addi	s2,s0,1
    2c10:	02b10423          	sb	a1,40(sp)
    2c14:	231d                	jal	313a <memchr>
    2c16:	cd31                	beqz	a0,2c72 <_vfiprintf_r+0x282>
    2c18:	020a9763          	bnez	s5,2c46 <_vfiprintf_r+0x256>
    2c1c:	4742                	lw	a4,16(sp)
    2c1e:	47b2                	lw	a5,12(sp)
    2c20:	10077713          	andi	a4,a4,256
    2c24:	cf09                	beqz	a4,2c3e <_vfiprintf_r+0x24e>
    2c26:	0791                	addi	a5,a5,4
    2c28:	c63e                	sw	a5,12(sp)
    2c2a:	5792                	lw	a5,36(sp)
    2c2c:	97d2                	add	a5,a5,s4
    2c2e:	d23e                	sw	a5,36(sp)
    2c30:	bd05                	j	2a60 <_vfiprintf_r+0x70>
    2c32:	02a787b3          	mul	a5,a5,a0
    2c36:	842e                	mv	s0,a1
    2c38:	4685                	li	a3,1
    2c3a:	97ba                	add	a5,a5,a4
    2c3c:	bf41                	j	2bcc <_vfiprintf_r+0x1dc>
    2c3e:	079d                	addi	a5,a5,7
    2c40:	9be1                	andi	a5,a5,-8
    2c42:	07a1                	addi	a5,a5,8
    2c44:	b7d5                	j	2c28 <_vfiprintf_r+0x238>
    2c46:	0078                	addi	a4,sp,12
    2c48:	98cc0693          	addi	a3,s8,-1652 # 298c <__sfputs_r>
    2c4c:	8626                	mv	a2,s1
    2c4e:	080c                	addi	a1,sp,16
    2c50:	854e                	mv	a0,s3
    2c52:	00000097          	auipc	ra,0x0
    2c56:	000000e7          	jalr	zero # 0 <__vector_start>
    2c5a:	57fd                	li	a5,-1
    2c5c:	8a2a                	mv	s4,a0
    2c5e:	fcf516e3          	bne	a0,a5,2c2a <_vfiprintf_r+0x23a>
    2c62:	00c4d783          	lhu	a5,12(s1)
    2c66:	0407f793          	andi	a5,a5,64
    2c6a:	ec0793e3          	bnez	a5,2b30 <_vfiprintf_r+0x140>
    2c6e:	5512                	lw	a0,36(sp)
    2c70:	b5c9                	j	2b32 <_vfiprintf_r+0x142>
    2c72:	0078                	addi	a4,sp,12
    2c74:	98cc0693          	addi	a3,s8,-1652
    2c78:	8626                	mv	a2,s1
    2c7a:	080c                	addi	a1,sp,16
    2c7c:	854e                	mv	a0,s3
    2c7e:	2571                	jal	330a <_printf_i>
    2c80:	bfe9                	j	2c5a <_vfiprintf_r+0x26a>

00002c82 <vfiprintf>:
    2c82:	67b5                	lui	a5,0xd
    2c84:	86b2                	mv	a3,a2
    2c86:	862e                	mv	a2,a1
    2c88:	85aa                	mv	a1,a0
    2c8a:	d007a503          	lw	a0,-768(a5) # cd00 <_impure_ptr>
    2c8e:	b38d                	j	29f0 <_vfiprintf_r>

00002c90 <_sbrk_r>:
    2c90:	1141                	addi	sp,sp,-16
    2c92:	c422                	sw	s0,8(sp)
    2c94:	c226                	sw	s1,4(sp)
    2c96:	842a                	mv	s0,a0
    2c98:	64b5                	lui	s1,0xd
    2c9a:	852e                	mv	a0,a1
    2c9c:	c606                	sw	ra,12(sp)
    2c9e:	d004a423          	sw	zero,-760(s1) # cd08 <errno>
    2ca2:	ef3fe0ef          	jal	ra,1b94 <_sbrk>
    2ca6:	57fd                	li	a5,-1
    2ca8:	00f51663          	bne	a0,a5,2cb4 <_sbrk_r+0x24>
    2cac:	d084a783          	lw	a5,-760(s1)
    2cb0:	c391                	beqz	a5,2cb4 <_sbrk_r+0x24>
    2cb2:	c01c                	sw	a5,0(s0)
    2cb4:	40b2                	lw	ra,12(sp)
    2cb6:	4422                	lw	s0,8(sp)
    2cb8:	4492                	lw	s1,4(sp)
    2cba:	0141                	addi	sp,sp,16
    2cbc:	8082                	ret

00002cbe <__sread>:
    2cbe:	1141                	addi	sp,sp,-16
    2cc0:	c422                	sw	s0,8(sp)
    2cc2:	842e                	mv	s0,a1
    2cc4:	00e59583          	lh	a1,14(a1)
    2cc8:	c606                	sw	ra,12(sp)
    2cca:	09b000ef          	jal	ra,3564 <_read_r>
    2cce:	00054963          	bltz	a0,2ce0 <__sread+0x22>
    2cd2:	487c                	lw	a5,84(s0)
    2cd4:	97aa                	add	a5,a5,a0
    2cd6:	c87c                	sw	a5,84(s0)
    2cd8:	40b2                	lw	ra,12(sp)
    2cda:	4422                	lw	s0,8(sp)
    2cdc:	0141                	addi	sp,sp,16
    2cde:	8082                	ret
    2ce0:	00c45783          	lhu	a5,12(s0)
    2ce4:	777d                	lui	a4,0xfffff
    2ce6:	177d                	addi	a4,a4,-1
    2ce8:	8ff9                	and	a5,a5,a4
    2cea:	00f41623          	sh	a5,12(s0)
    2cee:	b7ed                	j	2cd8 <__sread+0x1a>

00002cf0 <__seofread>:
    2cf0:	4501                	li	a0,0
    2cf2:	8082                	ret

00002cf4 <__swrite>:
    2cf4:	00c5d783          	lhu	a5,12(a1)
    2cf8:	1101                	addi	sp,sp,-32
    2cfa:	cc22                	sw	s0,24(sp)
    2cfc:	ca26                	sw	s1,20(sp)
    2cfe:	c84a                	sw	s2,16(sp)
    2d00:	c64e                	sw	s3,12(sp)
    2d02:	ce06                	sw	ra,28(sp)
    2d04:	1007f793          	andi	a5,a5,256
    2d08:	84aa                	mv	s1,a0
    2d0a:	842e                	mv	s0,a1
    2d0c:	8932                	mv	s2,a2
    2d0e:	89b6                	mv	s3,a3
    2d10:	c791                	beqz	a5,2d1c <__swrite+0x28>
    2d12:	00e59583          	lh	a1,14(a1)
    2d16:	4689                	li	a3,2
    2d18:	4601                	li	a2,0
    2d1a:	26fd                	jal	3108 <_lseek_r>
    2d1c:	00c45783          	lhu	a5,12(s0)
    2d20:	777d                	lui	a4,0xfffff
    2d22:	177d                	addi	a4,a4,-1
    2d24:	8ff9                	and	a5,a5,a4
    2d26:	00e41583          	lh	a1,14(s0)
    2d2a:	00f41623          	sh	a5,12(s0)
    2d2e:	4462                	lw	s0,24(sp)
    2d30:	40f2                	lw	ra,28(sp)
    2d32:	86ce                	mv	a3,s3
    2d34:	864a                	mv	a2,s2
    2d36:	49b2                	lw	s3,12(sp)
    2d38:	4942                	lw	s2,16(sp)
    2d3a:	8526                	mv	a0,s1
    2d3c:	44d2                	lw	s1,20(sp)
    2d3e:	6105                	addi	sp,sp,32
    2d40:	a83d                	j	2d7e <_write_r>

00002d42 <__sseek>:
    2d42:	1141                	addi	sp,sp,-16
    2d44:	c422                	sw	s0,8(sp)
    2d46:	842e                	mv	s0,a1
    2d48:	00e59583          	lh	a1,14(a1)
    2d4c:	c606                	sw	ra,12(sp)
    2d4e:	2e6d                	jal	3108 <_lseek_r>
    2d50:	577d                	li	a4,-1
    2d52:	00c45783          	lhu	a5,12(s0)
    2d56:	00e51b63          	bne	a0,a4,2d6c <__sseek+0x2a>
    2d5a:	777d                	lui	a4,0xfffff
    2d5c:	177d                	addi	a4,a4,-1
    2d5e:	8ff9                	and	a5,a5,a4
    2d60:	00f41623          	sh	a5,12(s0)
    2d64:	40b2                	lw	ra,12(sp)
    2d66:	4422                	lw	s0,8(sp)
    2d68:	0141                	addi	sp,sp,16
    2d6a:	8082                	ret
    2d6c:	6705                	lui	a4,0x1
    2d6e:	8fd9                	or	a5,a5,a4
    2d70:	00f41623          	sh	a5,12(s0)
    2d74:	c868                	sw	a0,84(s0)
    2d76:	b7fd                	j	2d64 <__sseek+0x22>

00002d78 <__sclose>:
    2d78:	00e59583          	lh	a1,14(a1)
    2d7c:	a815                	j	2db0 <_close_r>

00002d7e <_write_r>:
    2d7e:	1141                	addi	sp,sp,-16
    2d80:	c422                	sw	s0,8(sp)
    2d82:	c226                	sw	s1,4(sp)
    2d84:	842a                	mv	s0,a0
    2d86:	64b5                	lui	s1,0xd
    2d88:	852e                	mv	a0,a1
    2d8a:	85b2                	mv	a1,a2
    2d8c:	8636                	mv	a2,a3
    2d8e:	c606                	sw	ra,12(sp)
    2d90:	d004a423          	sw	zero,-760(s1) # cd08 <errno>
    2d94:	d8bfe0ef          	jal	ra,1b1e <_write>
    2d98:	57fd                	li	a5,-1
    2d9a:	00f51663          	bne	a0,a5,2da6 <_write_r+0x28>
    2d9e:	d084a783          	lw	a5,-760(s1)
    2da2:	c391                	beqz	a5,2da6 <_write_r+0x28>
    2da4:	c01c                	sw	a5,0(s0)
    2da6:	40b2                	lw	ra,12(sp)
    2da8:	4422                	lw	s0,8(sp)
    2daa:	4492                	lw	s1,4(sp)
    2dac:	0141                	addi	sp,sp,16
    2dae:	8082                	ret

00002db0 <_close_r>:
    2db0:	1141                	addi	sp,sp,-16
    2db2:	c422                	sw	s0,8(sp)
    2db4:	c226                	sw	s1,4(sp)
    2db6:	842a                	mv	s0,a0
    2db8:	64b5                	lui	s1,0xd
    2dba:	852e                	mv	a0,a1
    2dbc:	c606                	sw	ra,12(sp)
    2dbe:	d004a423          	sw	zero,-760(s1) # cd08 <errno>
    2dc2:	c57fe0ef          	jal	ra,1a18 <_close>
    2dc6:	57fd                	li	a5,-1
    2dc8:	00f51663          	bne	a0,a5,2dd4 <_close_r+0x24>
    2dcc:	d084a783          	lw	a5,-760(s1)
    2dd0:	c391                	beqz	a5,2dd4 <_close_r+0x24>
    2dd2:	c01c                	sw	a5,0(s0)
    2dd4:	40b2                	lw	ra,12(sp)
    2dd6:	4422                	lw	s0,8(sp)
    2dd8:	4492                	lw	s1,4(sp)
    2dda:	0141                	addi	sp,sp,16
    2ddc:	8082                	ret

00002dde <_fstat_r>:
    2dde:	1141                	addi	sp,sp,-16
    2de0:	c422                	sw	s0,8(sp)
    2de2:	c226                	sw	s1,4(sp)
    2de4:	842a                	mv	s0,a0
    2de6:	64b5                	lui	s1,0xd
    2de8:	852e                	mv	a0,a1
    2dea:	85b2                	mv	a1,a2
    2dec:	c606                	sw	ra,12(sp)
    2dee:	d004a423          	sw	zero,-760(s1) # cd08 <errno>
    2df2:	c6bfe0ef          	jal	ra,1a5c <_fstat>
    2df6:	57fd                	li	a5,-1
    2df8:	00f51663          	bne	a0,a5,2e04 <_fstat_r+0x26>
    2dfc:	d084a783          	lw	a5,-760(s1)
    2e00:	c391                	beqz	a5,2e04 <_fstat_r+0x26>
    2e02:	c01c                	sw	a5,0(s0)
    2e04:	40b2                	lw	ra,12(sp)
    2e06:	4422                	lw	s0,8(sp)
    2e08:	4492                	lw	s1,4(sp)
    2e0a:	0141                	addi	sp,sp,16
    2e0c:	8082                	ret

00002e0e <__sfvwrite_r>:
    2e0e:	461c                	lw	a5,8(a2)
    2e10:	e781                	bnez	a5,2e18 <__sfvwrite_r+0xa>
    2e12:	4781                	li	a5,0
    2e14:	853e                	mv	a0,a5
    2e16:	8082                	ret
    2e18:	00c5d783          	lhu	a5,12(a1)
    2e1c:	715d                	addi	sp,sp,-80
    2e1e:	c4a2                	sw	s0,72(sp)
    2e20:	c0ca                	sw	s2,64(sp)
    2e22:	dc52                	sw	s4,56(sp)
    2e24:	c686                	sw	ra,76(sp)
    2e26:	c2a6                	sw	s1,68(sp)
    2e28:	de4e                	sw	s3,60(sp)
    2e2a:	da56                	sw	s5,52(sp)
    2e2c:	d85a                	sw	s6,48(sp)
    2e2e:	d65e                	sw	s7,44(sp)
    2e30:	d462                	sw	s8,40(sp)
    2e32:	d266                	sw	s9,36(sp)
    2e34:	d06a                	sw	s10,32(sp)
    2e36:	ce6e                	sw	s11,28(sp)
    2e38:	8ba1                	andi	a5,a5,8
    2e3a:	892a                	mv	s2,a0
    2e3c:	842e                	mv	s0,a1
    2e3e:	8a32                	mv	s4,a2
    2e40:	cbd9                	beqz	a5,2ed6 <__sfvwrite_r+0xc8>
    2e42:	499c                	lw	a5,16(a1)
    2e44:	cbc9                	beqz	a5,2ed6 <__sfvwrite_r+0xc8>
    2e46:	00c45783          	lhu	a5,12(s0)
    2e4a:	000a2983          	lw	s3,0(s4)
    2e4e:	0027f713          	andi	a4,a5,2
    2e52:	e37d                	bnez	a4,2f38 <__sfvwrite_r+0x12a>
    2e54:	8b85                	andi	a5,a5,1
    2e56:	14078f63          	beqz	a5,2fb4 <__sfvwrite_r+0x1a6>
    2e5a:	4b81                	li	s7,0
    2e5c:	4501                	li	a0,0
    2e5e:	4b01                	li	s6,0
    2e60:	4a81                	li	s5,0
    2e62:	220a8e63          	beqz	s5,309e <__sfvwrite_r+0x290>
    2e66:	e919                	bnez	a0,2e7c <__sfvwrite_r+0x6e>
    2e68:	8656                	mv	a2,s5
    2e6a:	45a9                	li	a1,10
    2e6c:	855a                	mv	a0,s6
    2e6e:	24f1                	jal	313a <memchr>
    2e70:	001a8b93          	addi	s7,s5,1
    2e74:	c501                	beqz	a0,2e7c <__sfvwrite_r+0x6e>
    2e76:	0505                	addi	a0,a0,1
    2e78:	41650bb3          	sub	s7,a0,s6
    2e7c:	8c5e                	mv	s8,s7
    2e7e:	017af363          	bgeu	s5,s7,2e84 <__sfvwrite_r+0x76>
    2e82:	8c56                	mv	s8,s5
    2e84:	4008                	lw	a0,0(s0)
    2e86:	481c                	lw	a5,16(s0)
    2e88:	4404                	lw	s1,8(s0)
    2e8a:	4854                	lw	a3,20(s0)
    2e8c:	22a7f063          	bgeu	a5,a0,30ac <__sfvwrite_r+0x29e>
    2e90:	94b6                	add	s1,s1,a3
    2e92:	2184dd63          	bge	s1,s8,30ac <__sfvwrite_r+0x29e>
    2e96:	85da                	mv	a1,s6
    2e98:	8626                	mv	a2,s1
    2e9a:	2c6d                	jal	3154 <memmove>
    2e9c:	401c                	lw	a5,0(s0)
    2e9e:	85a2                	mv	a1,s0
    2ea0:	854a                	mv	a0,s2
    2ea2:	97a6                	add	a5,a5,s1
    2ea4:	c01c                	sw	a5,0(s0)
    2ea6:	d18ff0ef          	jal	ra,23be <_fflush_r>
    2eaa:	0e051d63          	bnez	a0,2fa4 <__sfvwrite_r+0x196>
    2eae:	409b8bb3          	sub	s7,s7,s1
    2eb2:	4505                	li	a0,1
    2eb4:	000b9763          	bnez	s7,2ec2 <__sfvwrite_r+0xb4>
    2eb8:	85a2                	mv	a1,s0
    2eba:	854a                	mv	a0,s2
    2ebc:	d02ff0ef          	jal	ra,23be <_fflush_r>
    2ec0:	e175                	bnez	a0,2fa4 <__sfvwrite_r+0x196>
    2ec2:	008a2783          	lw	a5,8(s4)
    2ec6:	9b26                	add	s6,s6,s1
    2ec8:	409a8ab3          	sub	s5,s5,s1
    2ecc:	8f85                	sub	a5,a5,s1
    2ece:	00fa2423          	sw	a5,8(s4)
    2ed2:	fbc1                	bnez	a5,2e62 <__sfvwrite_r+0x54>
    2ed4:	a089                	j	2f16 <__sfvwrite_r+0x108>
    2ed6:	85a2                	mv	a1,s0
    2ed8:	854a                	mv	a0,s2
    2eda:	954ff0ef          	jal	ra,202e <__swsetup_r>
    2ede:	57fd                	li	a5,-1
    2ee0:	d13d                	beqz	a0,2e46 <__sfvwrite_r+0x38>
    2ee2:	a81d                	j	2f18 <__sfvwrite_r+0x10a>
    2ee4:	0009aa83          	lw	s5,0(s3)
    2ee8:	0049a483          	lw	s1,4(s3)
    2eec:	09a1                	addi	s3,s3,8
    2eee:	541c                	lw	a5,40(s0)
    2ef0:	500c                	lw	a1,32(s0)
    2ef2:	d8ed                	beqz	s1,2ee4 <__sfvwrite_r+0xd6>
    2ef4:	86a6                	mv	a3,s1
    2ef6:	009b7363          	bgeu	s6,s1,2efc <__sfvwrite_r+0xee>
    2efa:	86da                	mv	a3,s6
    2efc:	8656                	mv	a2,s5
    2efe:	854a                	mv	a0,s2
    2f00:	9782                	jalr	a5
    2f02:	0aa05163          	blez	a0,2fa4 <__sfvwrite_r+0x196>
    2f06:	008a2783          	lw	a5,8(s4)
    2f0a:	9aaa                	add	s5,s5,a0
    2f0c:	8c89                	sub	s1,s1,a0
    2f0e:	8f89                	sub	a5,a5,a0
    2f10:	00fa2423          	sw	a5,8(s4)
    2f14:	ffe9                	bnez	a5,2eee <__sfvwrite_r+0xe0>
    2f16:	4781                	li	a5,0
    2f18:	40b6                	lw	ra,76(sp)
    2f1a:	4426                	lw	s0,72(sp)
    2f1c:	4496                	lw	s1,68(sp)
    2f1e:	4906                	lw	s2,64(sp)
    2f20:	59f2                	lw	s3,60(sp)
    2f22:	5a62                	lw	s4,56(sp)
    2f24:	5ad2                	lw	s5,52(sp)
    2f26:	5b42                	lw	s6,48(sp)
    2f28:	5bb2                	lw	s7,44(sp)
    2f2a:	5c22                	lw	s8,40(sp)
    2f2c:	5c92                	lw	s9,36(sp)
    2f2e:	5d02                	lw	s10,32(sp)
    2f30:	4df2                	lw	s11,28(sp)
    2f32:	853e                	mv	a0,a5
    2f34:	6161                	addi	sp,sp,80
    2f36:	8082                	ret
    2f38:	80000b37          	lui	s6,0x80000
    2f3c:	4a81                	li	s5,0
    2f3e:	4481                	li	s1,0
    2f40:	c00b4b13          	xori	s6,s6,-1024
    2f44:	b76d                	j	2eee <__sfvwrite_r+0xe0>
    2f46:	0009aa83          	lw	s5,0(s3)
    2f4a:	0049ad03          	lw	s10,4(s3)
    2f4e:	09a1                	addi	s3,s3,8
    2f50:	00c41703          	lh	a4,12(s0)
    2f54:	4008                	lw	a0,0(s0)
    2f56:	4410                	lw	a2,8(s0)
    2f58:	fe0d07e3          	beqz	s10,2f46 <__sfvwrite_r+0x138>
    2f5c:	01071793          	slli	a5,a4,0x10
    2f60:	20077713          	andi	a4,a4,512
    2f64:	83c1                	srli	a5,a5,0x10
    2f66:	c36d                	beqz	a4,3048 <__sfvwrite_r+0x23a>
    2f68:	08cd6763          	bltu	s10,a2,2ff6 <__sfvwrite_r+0x1e8>
    2f6c:	4807f713          	andi	a4,a5,1152
    2f70:	c359                	beqz	a4,2ff6 <__sfvwrite_r+0x1e8>
    2f72:	4844                	lw	s1,20(s0)
    2f74:	480c                	lw	a1,16(s0)
    2f76:	029c04b3          	mul	s1,s8,s1
    2f7a:	40b50db3          	sub	s11,a0,a1
    2f7e:	001d8713          	addi	a4,s11,1
    2f82:	976a                	add	a4,a4,s10
    2f84:	0394c4b3          	div	s1,s1,s9
    2f88:	00e4f363          	bgeu	s1,a4,2f8e <__sfvwrite_r+0x180>
    2f8c:	84ba                	mv	s1,a4
    2f8e:	4007f793          	andi	a5,a5,1024
    2f92:	cbd9                	beqz	a5,3028 <__sfvwrite_r+0x21a>
    2f94:	85a6                	mv	a1,s1
    2f96:	854a                	mv	a0,s2
    2f98:	8edff0ef          	jal	ra,2884 <_malloc_r>
    2f9c:	e51d                	bnez	a0,2fca <__sfvwrite_r+0x1bc>
    2f9e:	47b1                	li	a5,12
    2fa0:	00f92023          	sw	a5,0(s2)
    2fa4:	00c45783          	lhu	a5,12(s0)
    2fa8:	0407e793          	ori	a5,a5,64
    2fac:	00f41623          	sh	a5,12(s0)
    2fb0:	57fd                	li	a5,-1
    2fb2:	b79d                	j	2f18 <__sfvwrite_r+0x10a>
    2fb4:	80000b37          	lui	s6,0x80000
    2fb8:	ffeb4b93          	xori	s7,s6,-2
    2fbc:	4a81                	li	s5,0
    2fbe:	4d01                	li	s10,0
    2fc0:	fffb4b13          	not	s6,s6
    2fc4:	4c0d                	li	s8,3
    2fc6:	4c89                	li	s9,2
    2fc8:	b761                	j	2f50 <__sfvwrite_r+0x142>
    2fca:	480c                	lw	a1,16(s0)
    2fcc:	866e                	mv	a2,s11
    2fce:	c62a                	sw	a0,12(sp)
    2fd0:	d21fe0ef          	jal	ra,1cf0 <memcpy>
    2fd4:	00c45703          	lhu	a4,12(s0)
    2fd8:	47b2                	lw	a5,12(sp)
    2fda:	b7f77713          	andi	a4,a4,-1153
    2fde:	08076713          	ori	a4,a4,128
    2fe2:	00e41623          	sh	a4,12(s0)
    2fe6:	c81c                	sw	a5,16(s0)
    2fe8:	c844                	sw	s1,20(s0)
    2fea:	97ee                	add	a5,a5,s11
    2fec:	41b484b3          	sub	s1,s1,s11
    2ff0:	c01c                	sw	a5,0(s0)
    2ff2:	866a                	mv	a2,s10
    2ff4:	c404                	sw	s1,8(s0)
    2ff6:	84ea                	mv	s1,s10
    2ff8:	00cd7363          	bgeu	s10,a2,2ffe <__sfvwrite_r+0x1f0>
    2ffc:	866a                	mv	a2,s10
    2ffe:	4008                	lw	a0,0(s0)
    3000:	85d6                	mv	a1,s5
    3002:	c632                	sw	a2,12(sp)
    3004:	2a81                	jal	3154 <memmove>
    3006:	441c                	lw	a5,8(s0)
    3008:	4632                	lw	a2,12(sp)
    300a:	8f91                	sub	a5,a5,a2
    300c:	c41c                	sw	a5,8(s0)
    300e:	401c                	lw	a5,0(s0)
    3010:	97b2                	add	a5,a5,a2
    3012:	c01c                	sw	a5,0(s0)
    3014:	008a2783          	lw	a5,8(s4)
    3018:	9aa6                	add	s5,s5,s1
    301a:	409d0d33          	sub	s10,s10,s1
    301e:	8f85                	sub	a5,a5,s1
    3020:	00fa2423          	sw	a5,8(s4)
    3024:	f795                	bnez	a5,2f50 <__sfvwrite_r+0x142>
    3026:	bdc5                	j	2f16 <__sfvwrite_r+0x108>
    3028:	8626                	mv	a2,s1
    302a:	854a                	mv	a0,s2
    302c:	2a89                	jal	317e <_realloc_r>
    302e:	87aa                	mv	a5,a0
    3030:	f95d                	bnez	a0,2fe6 <__sfvwrite_r+0x1d8>
    3032:	480c                	lw	a1,16(s0)
    3034:	854a                	mv	a0,s2
    3036:	faaff0ef          	jal	ra,27e0 <_free_r>
    303a:	00c45783          	lhu	a5,12(s0)
    303e:	f7f7f793          	andi	a5,a5,-129
    3042:	00f41623          	sh	a5,12(s0)
    3046:	bfa1                	j	2f9e <__sfvwrite_r+0x190>
    3048:	481c                	lw	a5,16(s0)
    304a:	00a7e563          	bltu	a5,a0,3054 <__sfvwrite_r+0x246>
    304e:	4854                	lw	a3,20(s0)
    3050:	02dd7663          	bgeu	s10,a3,307c <__sfvwrite_r+0x26e>
    3054:	84b2                	mv	s1,a2
    3056:	00cd7363          	bgeu	s10,a2,305c <__sfvwrite_r+0x24e>
    305a:	84ea                	mv	s1,s10
    305c:	8626                	mv	a2,s1
    305e:	85d6                	mv	a1,s5
    3060:	28d5                	jal	3154 <memmove>
    3062:	441c                	lw	a5,8(s0)
    3064:	4018                	lw	a4,0(s0)
    3066:	8f85                	sub	a5,a5,s1
    3068:	9726                	add	a4,a4,s1
    306a:	c41c                	sw	a5,8(s0)
    306c:	c018                	sw	a4,0(s0)
    306e:	f3dd                	bnez	a5,3014 <__sfvwrite_r+0x206>
    3070:	85a2                	mv	a1,s0
    3072:	854a                	mv	a0,s2
    3074:	b4aff0ef          	jal	ra,23be <_fflush_r>
    3078:	dd51                	beqz	a0,3014 <__sfvwrite_r+0x206>
    307a:	b72d                	j	2fa4 <__sfvwrite_r+0x196>
    307c:	87da                	mv	a5,s6
    307e:	01abe363          	bltu	s7,s10,3084 <__sfvwrite_r+0x276>
    3082:	87ea                	mv	a5,s10
    3084:	02d7c7b3          	div	a5,a5,a3
    3088:	5418                	lw	a4,40(s0)
    308a:	500c                	lw	a1,32(s0)
    308c:	8656                	mv	a2,s5
    308e:	854a                	mv	a0,s2
    3090:	02d786b3          	mul	a3,a5,a3
    3094:	9702                	jalr	a4
    3096:	84aa                	mv	s1,a0
    3098:	f6a04ee3          	bgtz	a0,3014 <__sfvwrite_r+0x206>
    309c:	b721                	j	2fa4 <__sfvwrite_r+0x196>
    309e:	0009ab03          	lw	s6,0(s3)
    30a2:	0049aa83          	lw	s5,4(s3)
    30a6:	4501                	li	a0,0
    30a8:	09a1                	addi	s3,s3,8
    30aa:	bb65                	j	2e62 <__sfvwrite_r+0x54>
    30ac:	00dc4b63          	blt	s8,a3,30c2 <__sfvwrite_r+0x2b4>
    30b0:	541c                	lw	a5,40(s0)
    30b2:	500c                	lw	a1,32(s0)
    30b4:	865a                	mv	a2,s6
    30b6:	854a                	mv	a0,s2
    30b8:	9782                	jalr	a5
    30ba:	84aa                	mv	s1,a0
    30bc:	dea049e3          	bgtz	a0,2eae <__sfvwrite_r+0xa0>
    30c0:	b5d5                	j	2fa4 <__sfvwrite_r+0x196>
    30c2:	8662                	mv	a2,s8
    30c4:	85da                	mv	a1,s6
    30c6:	2079                	jal	3154 <memmove>
    30c8:	441c                	lw	a5,8(s0)
    30ca:	84e2                	mv	s1,s8
    30cc:	418787b3          	sub	a5,a5,s8
    30d0:	c41c                	sw	a5,8(s0)
    30d2:	401c                	lw	a5,0(s0)
    30d4:	97e2                	add	a5,a5,s8
    30d6:	c01c                	sw	a5,0(s0)
    30d8:	bbd9                	j	2eae <__sfvwrite_r+0xa0>

000030da <_isatty_r>:
    30da:	1141                	addi	sp,sp,-16
    30dc:	c422                	sw	s0,8(sp)
    30de:	c226                	sw	s1,4(sp)
    30e0:	842a                	mv	s0,a0
    30e2:	64b5                	lui	s1,0xd
    30e4:	852e                	mv	a0,a1
    30e6:	c606                	sw	ra,12(sp)
    30e8:	d004a423          	sw	zero,-760(s1) # cd08 <errno>
    30ec:	9b5fe0ef          	jal	ra,1aa0 <_isatty>
    30f0:	57fd                	li	a5,-1
    30f2:	00f51663          	bne	a0,a5,30fe <_isatty_r+0x24>
    30f6:	d084a783          	lw	a5,-760(s1)
    30fa:	c391                	beqz	a5,30fe <_isatty_r+0x24>
    30fc:	c01c                	sw	a5,0(s0)
    30fe:	40b2                	lw	ra,12(sp)
    3100:	4422                	lw	s0,8(sp)
    3102:	4492                	lw	s1,4(sp)
    3104:	0141                	addi	sp,sp,16
    3106:	8082                	ret

00003108 <_lseek_r>:
    3108:	1141                	addi	sp,sp,-16
    310a:	c422                	sw	s0,8(sp)
    310c:	c226                	sw	s1,4(sp)
    310e:	842a                	mv	s0,a0
    3110:	64b5                	lui	s1,0xd
    3112:	852e                	mv	a0,a1
    3114:	85b2                	mv	a1,a2
    3116:	8636                	mv	a2,a3
    3118:	c606                	sw	ra,12(sp)
    311a:	d004a423          	sw	zero,-760(s1) # cd08 <errno>
    311e:	9a3fe0ef          	jal	ra,1ac0 <_lseek>
    3122:	57fd                	li	a5,-1
    3124:	00f51663          	bne	a0,a5,3130 <_lseek_r+0x28>
    3128:	d084a783          	lw	a5,-760(s1)
    312c:	c391                	beqz	a5,3130 <_lseek_r+0x28>
    312e:	c01c                	sw	a5,0(s0)
    3130:	40b2                	lw	ra,12(sp)
    3132:	4422                	lw	s0,8(sp)
    3134:	4492                	lw	s1,4(sp)
    3136:	0141                	addi	sp,sp,16
    3138:	8082                	ret

0000313a <memchr>:
    313a:	0ff5f593          	zext.b	a1,a1
    313e:	962a                	add	a2,a2,a0
    3140:	00c51463          	bne	a0,a2,3148 <memchr+0xe>
    3144:	4501                	li	a0,0
    3146:	8082                	ret
    3148:	00054783          	lbu	a5,0(a0)
    314c:	feb78de3          	beq	a5,a1,3146 <memchr+0xc>
    3150:	0505                	addi	a0,a0,1
    3152:	b7fd                	j	3140 <memchr+0x6>

00003154 <memmove>:
    3154:	c215                	beqz	a2,3178 <memmove+0x24>
    3156:	832a                	mv	t1,a0
    3158:	4685                	li	a3,1
    315a:	00b56763          	bltu	a0,a1,3168 <memmove+0x14>
    315e:	56fd                	li	a3,-1
    3160:	fff60713          	addi	a4,a2,-1
    3164:	933a                	add	t1,t1,a4
    3166:	95ba                	add	a1,a1,a4
    3168:	00058383          	lb	t2,0(a1)
    316c:	00730023          	sb	t2,0(t1)
    3170:	167d                	addi	a2,a2,-1
    3172:	9336                	add	t1,t1,a3
    3174:	95b6                	add	a1,a1,a3
    3176:	fa6d                	bnez	a2,3168 <memmove+0x14>
    3178:	8082                	ret

0000317a <__malloc_lock>:
    317a:	8082                	ret

0000317c <__malloc_unlock>:
    317c:	8082                	ret

0000317e <_realloc_r>:
    317e:	1101                	addi	sp,sp,-32
    3180:	cc22                	sw	s0,24(sp)
    3182:	ce06                	sw	ra,28(sp)
    3184:	ca26                	sw	s1,20(sp)
    3186:	c84a                	sw	s2,16(sp)
    3188:	c64e                	sw	s3,12(sp)
    318a:	c452                	sw	s4,8(sp)
    318c:	8432                	mv	s0,a2
    318e:	e999                	bnez	a1,31a4 <_realloc_r+0x26>
    3190:	4462                	lw	s0,24(sp)
    3192:	40f2                	lw	ra,28(sp)
    3194:	44d2                	lw	s1,20(sp)
    3196:	4942                	lw	s2,16(sp)
    3198:	49b2                	lw	s3,12(sp)
    319a:	4a22                	lw	s4,8(sp)
    319c:	85b2                	mv	a1,a2
    319e:	6105                	addi	sp,sp,32
    31a0:	ee4ff06f          	j	2884 <_malloc_r>
    31a4:	ee09                	bnez	a2,31be <_realloc_r+0x40>
    31a6:	e3aff0ef          	jal	ra,27e0 <_free_r>
    31aa:	4481                	li	s1,0
    31ac:	40f2                	lw	ra,28(sp)
    31ae:	4462                	lw	s0,24(sp)
    31b0:	4942                	lw	s2,16(sp)
    31b2:	49b2                	lw	s3,12(sp)
    31b4:	4a22                	lw	s4,8(sp)
    31b6:	8526                	mv	a0,s1
    31b8:	44d2                	lw	s1,20(sp)
    31ba:	6105                	addi	sp,sp,32
    31bc:	8082                	ret
    31be:	8a2a                	mv	s4,a0
    31c0:	892e                	mv	s2,a1
    31c2:	2ed1                	jal	3596 <_malloc_usable_size_r>
    31c4:	89aa                	mv	s3,a0
    31c6:	00856763          	bltu	a0,s0,31d4 <_realloc_r+0x56>
    31ca:	00155793          	srli	a5,a0,0x1
    31ce:	84ca                	mv	s1,s2
    31d0:	fc87eee3          	bltu	a5,s0,31ac <_realloc_r+0x2e>
    31d4:	85a2                	mv	a1,s0
    31d6:	8552                	mv	a0,s4
    31d8:	eacff0ef          	jal	ra,2884 <_malloc_r>
    31dc:	84aa                	mv	s1,a0
    31de:	d579                	beqz	a0,31ac <_realloc_r+0x2e>
    31e0:	8622                	mv	a2,s0
    31e2:	0089f363          	bgeu	s3,s0,31e8 <_realloc_r+0x6a>
    31e6:	864e                	mv	a2,s3
    31e8:	85ca                	mv	a1,s2
    31ea:	8526                	mv	a0,s1
    31ec:	b05fe0ef          	jal	ra,1cf0 <memcpy>
    31f0:	85ca                	mv	a1,s2
    31f2:	8552                	mv	a0,s4
    31f4:	decff0ef          	jal	ra,27e0 <_free_r>
    31f8:	bf55                	j	31ac <_realloc_r+0x2e>

000031fa <_printf_common>:
    31fa:	7179                	addi	sp,sp,-48
    31fc:	cc52                	sw	s4,24(sp)
    31fe:	499c                	lw	a5,16(a1)
    3200:	8a3a                	mv	s4,a4
    3202:	4598                	lw	a4,8(a1)
    3204:	d422                	sw	s0,40(sp)
    3206:	d04a                	sw	s2,32(sp)
    3208:	ce4e                	sw	s3,28(sp)
    320a:	ca56                	sw	s5,20(sp)
    320c:	d606                	sw	ra,44(sp)
    320e:	d226                	sw	s1,36(sp)
    3210:	c85a                	sw	s6,16(sp)
    3212:	c65e                	sw	s7,12(sp)
    3214:	89aa                	mv	s3,a0
    3216:	842e                	mv	s0,a1
    3218:	8932                	mv	s2,a2
    321a:	8ab6                	mv	s5,a3
    321c:	00e7d363          	bge	a5,a4,3222 <_printf_common+0x28>
    3220:	87ba                	mv	a5,a4
    3222:	00f92023          	sw	a5,0(s2)
    3226:	04344703          	lbu	a4,67(s0)
    322a:	c701                	beqz	a4,3232 <_printf_common+0x38>
    322c:	0785                	addi	a5,a5,1
    322e:	00f92023          	sw	a5,0(s2)
    3232:	401c                	lw	a5,0(s0)
    3234:	0207f793          	andi	a5,a5,32
    3238:	c791                	beqz	a5,3244 <_printf_common+0x4a>
    323a:	00092783          	lw	a5,0(s2)
    323e:	0789                	addi	a5,a5,2
    3240:	00f92023          	sw	a5,0(s2)
    3244:	4004                	lw	s1,0(s0)
    3246:	8899                	andi	s1,s1,6
    3248:	e891                	bnez	s1,325c <_printf_common+0x62>
    324a:	01940b13          	addi	s6,s0,25
    324e:	5bfd                	li	s7,-1
    3250:	445c                	lw	a5,12(s0)
    3252:	00092703          	lw	a4,0(s2)
    3256:	8f99                	sub	a5,a5,a4
    3258:	04f4cc63          	blt	s1,a5,32b0 <_printf_common+0xb6>
    325c:	04344783          	lbu	a5,67(s0)
    3260:	00f036b3          	snez	a3,a5
    3264:	401c                	lw	a5,0(s0)
    3266:	0207f793          	andi	a5,a5,32
    326a:	eba5                	bnez	a5,32da <_printf_common+0xe0>
    326c:	04340613          	addi	a2,s0,67
    3270:	85d6                	mv	a1,s5
    3272:	854e                	mv	a0,s3
    3274:	9a02                	jalr	s4
    3276:	57fd                	li	a5,-1
    3278:	04f50363          	beq	a0,a5,32be <_printf_common+0xc4>
    327c:	401c                	lw	a5,0(s0)
    327e:	4711                	li	a4,4
    3280:	4481                	li	s1,0
    3282:	8b99                	andi	a5,a5,6
    3284:	00e79963          	bne	a5,a4,3296 <_printf_common+0x9c>
    3288:	4444                	lw	s1,12(s0)
    328a:	00092783          	lw	a5,0(s2)
    328e:	8c9d                	sub	s1,s1,a5
    3290:	0004d363          	bgez	s1,3296 <_printf_common+0x9c>
    3294:	4481                	li	s1,0
    3296:	441c                	lw	a5,8(s0)
    3298:	4818                	lw	a4,16(s0)
    329a:	00f75463          	bge	a4,a5,32a2 <_printf_common+0xa8>
    329e:	8f99                	sub	a5,a5,a4
    32a0:	94be                	add	s1,s1,a5
    32a2:	4901                	li	s2,0
    32a4:	0469                	addi	s0,s0,26
    32a6:	5b7d                	li	s6,-1
    32a8:	05249863          	bne	s1,s2,32f8 <_printf_common+0xfe>
    32ac:	4501                	li	a0,0
    32ae:	a809                	j	32c0 <_printf_common+0xc6>
    32b0:	4685                	li	a3,1
    32b2:	865a                	mv	a2,s6
    32b4:	85d6                	mv	a1,s5
    32b6:	854e                	mv	a0,s3
    32b8:	9a02                	jalr	s4
    32ba:	01751e63          	bne	a0,s7,32d6 <_printf_common+0xdc>
    32be:	557d                	li	a0,-1
    32c0:	50b2                	lw	ra,44(sp)
    32c2:	5422                	lw	s0,40(sp)
    32c4:	5492                	lw	s1,36(sp)
    32c6:	5902                	lw	s2,32(sp)
    32c8:	49f2                	lw	s3,28(sp)
    32ca:	4a62                	lw	s4,24(sp)
    32cc:	4ad2                	lw	s5,20(sp)
    32ce:	4b42                	lw	s6,16(sp)
    32d0:	4bb2                	lw	s7,12(sp)
    32d2:	6145                	addi	sp,sp,48
    32d4:	8082                	ret
    32d6:	0485                	addi	s1,s1,1
    32d8:	bfa5                	j	3250 <_printf_common+0x56>
    32da:	00d40733          	add	a4,s0,a3
    32de:	03000613          	li	a2,48
    32e2:	04c701a3          	sb	a2,67(a4) # 1043 <gpio_intr_en_rise+0x21>
    32e6:	04544703          	lbu	a4,69(s0)
    32ea:	00168793          	addi	a5,a3,1 # 1001 <gpio_write+0xb>
    32ee:	97a2                	add	a5,a5,s0
    32f0:	0689                	addi	a3,a3,2
    32f2:	04e781a3          	sb	a4,67(a5)
    32f6:	bf9d                	j	326c <_printf_common+0x72>
    32f8:	4685                	li	a3,1
    32fa:	8622                	mv	a2,s0
    32fc:	85d6                	mv	a1,s5
    32fe:	854e                	mv	a0,s3
    3300:	9a02                	jalr	s4
    3302:	fb650ee3          	beq	a0,s6,32be <_printf_common+0xc4>
    3306:	0905                	addi	s2,s2,1
    3308:	b745                	j	32a8 <_printf_common+0xae>

0000330a <_printf_i>:
    330a:	7179                	addi	sp,sp,-48
    330c:	d422                	sw	s0,40(sp)
    330e:	d226                	sw	s1,36(sp)
    3310:	d04a                	sw	s2,32(sp)
    3312:	ce4e                	sw	s3,28(sp)
    3314:	d606                	sw	ra,44(sp)
    3316:	cc52                	sw	s4,24(sp)
    3318:	ca56                	sw	s5,20(sp)
    331a:	c85a                	sw	s6,16(sp)
    331c:	0185c883          	lbu	a7,24(a1)
    3320:	07800793          	li	a5,120
    3324:	84aa                	mv	s1,a0
    3326:	842e                	mv	s0,a1
    3328:	8932                	mv	s2,a2
    332a:	89b6                	mv	s3,a3
    332c:	0117ee63          	bltu	a5,a7,3348 <_printf_i+0x3e>
    3330:	06200793          	li	a5,98
    3334:	04358693          	addi	a3,a1,67
    3338:	0117ed63          	bltu	a5,a7,3352 <_printf_i+0x48>
    333c:	1a088963          	beqz	a7,34ee <_printf_i+0x1e4>
    3340:	05800793          	li	a5,88
    3344:	16f88b63          	beq	a7,a5,34ba <_printf_i+0x1b0>
    3348:	04240a93          	addi	s5,s0,66
    334c:	05140123          	sb	a7,66(s0)
    3350:	a805                	j	3380 <_printf_i+0x76>
    3352:	f9d88793          	addi	a5,a7,-99 # ff9d <_sp+0x208d>
    3356:	0ff7f793          	zext.b	a5,a5
    335a:	4655                	li	a2,21
    335c:	fef666e3          	bltu	a2,a5,3348 <_printf_i+0x3e>
    3360:	6635                	lui	a2,0xd
    3362:	078a                	slli	a5,a5,0x2
    3364:	b3860613          	addi	a2,a2,-1224 # cb38 <__sf_fake_stdout+0x5c>
    3368:	97b2                	add	a5,a5,a2
    336a:	439c                	lw	a5,0(a5)
    336c:	8782                	jr	a5
    336e:	431c                	lw	a5,0(a4)
    3370:	04258a93          	addi	s5,a1,66
    3374:	00478693          	addi	a3,a5,4
    3378:	439c                	lw	a5,0(a5)
    337a:	c314                	sw	a3,0(a4)
    337c:	04f58123          	sb	a5,66(a1)
    3380:	4785                	li	a5,1
    3382:	aa51                	j	3516 <_printf_i+0x20c>
    3384:	419c                	lw	a5,0(a1)
    3386:	4308                	lw	a0,0(a4)
    3388:	0807f613          	andi	a2,a5,128
    338c:	00450593          	addi	a1,a0,4
    3390:	c205                	beqz	a2,33b0 <_printf_i+0xa6>
    3392:	411c                	lw	a5,0(a0)
    3394:	c30c                	sw	a1,0(a4)
    3396:	6835                	lui	a6,0xd
    3398:	0007d863          	bgez	a5,33a8 <_printf_i+0x9e>
    339c:	02d00713          	li	a4,45
    33a0:	40f007b3          	neg	a5,a5
    33a4:	04e401a3          	sb	a4,67(s0)
    33a8:	b1080813          	addi	a6,a6,-1264 # cb10 <__sf_fake_stdout+0x34>
    33ac:	4729                	li	a4,10
    33ae:	a099                	j	33f4 <_printf_i+0xea>
    33b0:	0407f613          	andi	a2,a5,64
    33b4:	411c                	lw	a5,0(a0)
    33b6:	c30c                	sw	a1,0(a4)
    33b8:	de79                	beqz	a2,3396 <_printf_i+0x8c>
    33ba:	07c2                	slli	a5,a5,0x10
    33bc:	87c1                	srai	a5,a5,0x10
    33be:	bfe1                	j	3396 <_printf_i+0x8c>
    33c0:	4190                	lw	a2,0(a1)
    33c2:	431c                	lw	a5,0(a4)
    33c4:	08067513          	andi	a0,a2,128
    33c8:	00478593          	addi	a1,a5,4
    33cc:	c501                	beqz	a0,33d4 <_printf_i+0xca>
    33ce:	c30c                	sw	a1,0(a4)
    33d0:	439c                	lw	a5,0(a5)
    33d2:	a039                	j	33e0 <_printf_i+0xd6>
    33d4:	04067613          	andi	a2,a2,64
    33d8:	c30c                	sw	a1,0(a4)
    33da:	da7d                	beqz	a2,33d0 <_printf_i+0xc6>
    33dc:	0007d783          	lhu	a5,0(a5)
    33e0:	6835                	lui	a6,0xd
    33e2:	06f00713          	li	a4,111
    33e6:	b1080813          	addi	a6,a6,-1264 # cb10 <__sf_fake_stdout+0x34>
    33ea:	0ce88c63          	beq	a7,a4,34c2 <_printf_i+0x1b8>
    33ee:	4729                	li	a4,10
    33f0:	040401a3          	sb	zero,67(s0)
    33f4:	4050                	lw	a2,4(s0)
    33f6:	c410                	sw	a2,8(s0)
    33f8:	00064563          	bltz	a2,3402 <_printf_i+0xf8>
    33fc:	400c                	lw	a1,0(s0)
    33fe:	99ed                	andi	a1,a1,-5
    3400:	c00c                	sw	a1,0(s0)
    3402:	e399                	bnez	a5,3408 <_printf_i+0xfe>
    3404:	8ab6                	mv	s5,a3
    3406:	ce19                	beqz	a2,3424 <_printf_i+0x11a>
    3408:	8ab6                	mv	s5,a3
    340a:	02e7f633          	remu	a2,a5,a4
    340e:	1afd                	addi	s5,s5,-1
    3410:	9642                	add	a2,a2,a6
    3412:	00064603          	lbu	a2,0(a2)
    3416:	00ca8023          	sb	a2,0(s5)
    341a:	863e                	mv	a2,a5
    341c:	02e7d7b3          	divu	a5,a5,a4
    3420:	fee675e3          	bgeu	a2,a4,340a <_printf_i+0x100>
    3424:	47a1                	li	a5,8
    3426:	00f71e63          	bne	a4,a5,3442 <_printf_i+0x138>
    342a:	401c                	lw	a5,0(s0)
    342c:	8b85                	andi	a5,a5,1
    342e:	cb91                	beqz	a5,3442 <_printf_i+0x138>
    3430:	4058                	lw	a4,4(s0)
    3432:	481c                	lw	a5,16(s0)
    3434:	00e7c763          	blt	a5,a4,3442 <_printf_i+0x138>
    3438:	03000793          	li	a5,48
    343c:	fefa8fa3          	sb	a5,-1(s5)
    3440:	1afd                	addi	s5,s5,-1
    3442:	415686b3          	sub	a3,a3,s5
    3446:	c814                	sw	a3,16(s0)
    3448:	874e                	mv	a4,s3
    344a:	86ca                	mv	a3,s2
    344c:	0070                	addi	a2,sp,12
    344e:	85a2                	mv	a1,s0
    3450:	8526                	mv	a0,s1
    3452:	3365                	jal	31fa <_printf_common>
    3454:	5a7d                	li	s4,-1
    3456:	0d451463          	bne	a0,s4,351e <_printf_i+0x214>
    345a:	557d                	li	a0,-1
    345c:	50b2                	lw	ra,44(sp)
    345e:	5422                	lw	s0,40(sp)
    3460:	5492                	lw	s1,36(sp)
    3462:	5902                	lw	s2,32(sp)
    3464:	49f2                	lw	s3,28(sp)
    3466:	4a62                	lw	s4,24(sp)
    3468:	4ad2                	lw	s5,20(sp)
    346a:	4b42                	lw	s6,16(sp)
    346c:	6145                	addi	sp,sp,48
    346e:	8082                	ret
    3470:	419c                	lw	a5,0(a1)
    3472:	0207e793          	ori	a5,a5,32
    3476:	c19c                	sw	a5,0(a1)
    3478:	6835                	lui	a6,0xd
    347a:	07800893          	li	a7,120
    347e:	b2480813          	addi	a6,a6,-1244 # cb24 <__sf_fake_stdout+0x48>
    3482:	051402a3          	sb	a7,69(s0)
    3486:	4010                	lw	a2,0(s0)
    3488:	430c                	lw	a1,0(a4)
    348a:	08067513          	andi	a0,a2,128
    348e:	419c                	lw	a5,0(a1)
    3490:	0591                	addi	a1,a1,4
    3492:	e511                	bnez	a0,349e <_printf_i+0x194>
    3494:	04067513          	andi	a0,a2,64
    3498:	c119                	beqz	a0,349e <_printf_i+0x194>
    349a:	07c2                	slli	a5,a5,0x10
    349c:	83c1                	srli	a5,a5,0x10
    349e:	c30c                	sw	a1,0(a4)
    34a0:	00167713          	andi	a4,a2,1
    34a4:	c701                	beqz	a4,34ac <_printf_i+0x1a2>
    34a6:	02066613          	ori	a2,a2,32
    34aa:	c010                	sw	a2,0(s0)
    34ac:	4741                	li	a4,16
    34ae:	f3a9                	bnez	a5,33f0 <_printf_i+0xe6>
    34b0:	4010                	lw	a2,0(s0)
    34b2:	fdf67613          	andi	a2,a2,-33
    34b6:	c010                	sw	a2,0(s0)
    34b8:	bf25                	j	33f0 <_printf_i+0xe6>
    34ba:	6835                	lui	a6,0xd
    34bc:	b1080813          	addi	a6,a6,-1264 # cb10 <__sf_fake_stdout+0x34>
    34c0:	b7c9                	j	3482 <_printf_i+0x178>
    34c2:	4721                	li	a4,8
    34c4:	b735                	j	33f0 <_printf_i+0xe6>
    34c6:	4190                	lw	a2,0(a1)
    34c8:	431c                	lw	a5,0(a4)
    34ca:	49cc                	lw	a1,20(a1)
    34cc:	08067813          	andi	a6,a2,128
    34d0:	00478513          	addi	a0,a5,4
    34d4:	00080663          	beqz	a6,34e0 <_printf_i+0x1d6>
    34d8:	c308                	sw	a0,0(a4)
    34da:	439c                	lw	a5,0(a5)
    34dc:	c38c                	sw	a1,0(a5)
    34de:	a801                	j	34ee <_printf_i+0x1e4>
    34e0:	c308                	sw	a0,0(a4)
    34e2:	04067613          	andi	a2,a2,64
    34e6:	439c                	lw	a5,0(a5)
    34e8:	da75                	beqz	a2,34dc <_printf_i+0x1d2>
    34ea:	00b79023          	sh	a1,0(a5)
    34ee:	00042823          	sw	zero,16(s0)
    34f2:	8ab6                	mv	s5,a3
    34f4:	bf91                	j	3448 <_printf_i+0x13e>
    34f6:	431c                	lw	a5,0(a4)
    34f8:	41d0                	lw	a2,4(a1)
    34fa:	4581                	li	a1,0
    34fc:	00478693          	addi	a3,a5,4
    3500:	c314                	sw	a3,0(a4)
    3502:	0007aa83          	lw	s5,0(a5)
    3506:	8556                	mv	a0,s5
    3508:	c33ff0ef          	jal	ra,313a <memchr>
    350c:	c501                	beqz	a0,3514 <_printf_i+0x20a>
    350e:	41550533          	sub	a0,a0,s5
    3512:	c048                	sw	a0,4(s0)
    3514:	405c                	lw	a5,4(s0)
    3516:	c81c                	sw	a5,16(s0)
    3518:	040401a3          	sb	zero,67(s0)
    351c:	b735                	j	3448 <_printf_i+0x13e>
    351e:	4814                	lw	a3,16(s0)
    3520:	8656                	mv	a2,s5
    3522:	85ca                	mv	a1,s2
    3524:	8526                	mv	a0,s1
    3526:	9982                	jalr	s3
    3528:	f34509e3          	beq	a0,s4,345a <_printf_i+0x150>
    352c:	401c                	lw	a5,0(s0)
    352e:	8b89                	andi	a5,a5,2
    3530:	e78d                	bnez	a5,355a <_printf_i+0x250>
    3532:	47b2                	lw	a5,12(sp)
    3534:	4448                	lw	a0,12(s0)
    3536:	f2f553e3          	bge	a0,a5,345c <_printf_i+0x152>
    353a:	853e                	mv	a0,a5
    353c:	b705                	j	345c <_printf_i+0x152>
    353e:	4685                	li	a3,1
    3540:	8656                	mv	a2,s5
    3542:	85ca                	mv	a1,s2
    3544:	8526                	mv	a0,s1
    3546:	9982                	jalr	s3
    3548:	f16509e3          	beq	a0,s6,345a <_printf_i+0x150>
    354c:	0a05                	addi	s4,s4,1
    354e:	445c                	lw	a5,12(s0)
    3550:	4732                	lw	a4,12(sp)
    3552:	8f99                	sub	a5,a5,a4
    3554:	fefa45e3          	blt	s4,a5,353e <_printf_i+0x234>
    3558:	bfe9                	j	3532 <_printf_i+0x228>
    355a:	4a01                	li	s4,0
    355c:	01940a93          	addi	s5,s0,25
    3560:	5b7d                	li	s6,-1
    3562:	b7f5                	j	354e <_printf_i+0x244>

00003564 <_read_r>:
    3564:	1141                	addi	sp,sp,-16
    3566:	c422                	sw	s0,8(sp)
    3568:	c226                	sw	s1,4(sp)
    356a:	842a                	mv	s0,a0
    356c:	64b5                	lui	s1,0xd
    356e:	852e                	mv	a0,a1
    3570:	85b2                	mv	a1,a2
    3572:	8636                	mv	a2,a3
    3574:	c606                	sw	ra,12(sp)
    3576:	d004a423          	sw	zero,-760(s1) # cd08 <errno>
    357a:	d6afe0ef          	jal	ra,1ae4 <_read>
    357e:	57fd                	li	a5,-1
    3580:	00f51663          	bne	a0,a5,358c <_read_r+0x28>
    3584:	d084a783          	lw	a5,-760(s1)
    3588:	c391                	beqz	a5,358c <_read_r+0x28>
    358a:	c01c                	sw	a5,0(s0)
    358c:	40b2                	lw	ra,12(sp)
    358e:	4422                	lw	s0,8(sp)
    3590:	4492                	lw	s1,4(sp)
    3592:	0141                	addi	sp,sp,16
    3594:	8082                	ret

00003596 <_malloc_usable_size_r>:
    3596:	ffc5a783          	lw	a5,-4(a1)
    359a:	ffc78513          	addi	a0,a5,-4
    359e:	0007d563          	bgez	a5,35a8 <_malloc_usable_size_r+0x12>
    35a2:	95aa                	add	a1,a1,a0
    35a4:	419c                	lw	a5,0(a1)
    35a6:	953e                	add	a0,a0,a5
    35a8:	8082                	ret

000035aa <__ffssi2>:
int
__ffsSI2 (UWtype u)
{
  UWtype count;

  if (u == 0)
    35aa:	cd0d                	beqz	a0,35e4 <__ffssi2+0x3a>
    return 0;

  count_trailing_zeros (count, u);
    35ac:	40a007b3          	neg	a5,a0
    35b0:	8d7d                	and	a0,a0,a5
    35b2:	67c1                	lui	a5,0x10
    35b4:	02f57163          	bgeu	a0,a5,35d6 <__ffssi2+0x2c>
    35b8:	10053793          	sltiu	a5,a0,256
    35bc:	0017c793          	xori	a5,a5,1
    35c0:	078e                	slli	a5,a5,0x3
    35c2:	6735                	lui	a4,0xd
    35c4:	00f55533          	srl	a0,a0,a5
    35c8:	b9070713          	addi	a4,a4,-1136 # cb90 <__clz_tab>
    35cc:	972a                	add	a4,a4,a0
    35ce:	00074503          	lbu	a0,0(a4)
    35d2:	953e                	add	a0,a0,a5
  return count + 1;
    35d4:	8082                	ret
  count_trailing_zeros (count, u);
    35d6:	01000737          	lui	a4,0x1000
    35da:	47c1                	li	a5,16
    35dc:	fee563e3          	bltu	a0,a4,35c2 <__ffssi2+0x18>
    35e0:	47e1                	li	a5,24
    35e2:	b7c5                	j	35c2 <__ffssi2+0x18>
    return 0;
    35e4:	4501                	li	a0,0
}
    35e6:	8082                	ret

000035e8 <__clzsi2>:
int
__clzSI2 (UWtype x)
{
  Wtype ret;

  count_leading_zeros (ret, x);
    35e8:	67c1                	lui	a5,0x10
    35ea:	02f57563          	bgeu	a0,a5,3614 <__clzsi2+0x2c>
    35ee:	10053793          	sltiu	a5,a0,256
    35f2:	0017c793          	xori	a5,a5,1
    35f6:	078e                	slli	a5,a5,0x3
    35f8:	6735                	lui	a4,0xd
    35fa:	02000693          	li	a3,32
    35fe:	8e9d                	sub	a3,a3,a5
    3600:	00f55533          	srl	a0,a0,a5
    3604:	b9070793          	addi	a5,a4,-1136 # cb90 <__clz_tab>
    3608:	97aa                	add	a5,a5,a0
    360a:	0007c503          	lbu	a0,0(a5) # 10000 <_sp+0x20f0>

  return ret;
}
    360e:	40a68533          	sub	a0,a3,a0
    3612:	8082                	ret
  count_leading_zeros (ret, x);
    3614:	01000737          	lui	a4,0x1000
    3618:	47c1                	li	a5,16
    361a:	fce56fe3          	bltu	a0,a4,35f8 <__clzsi2+0x10>
    361e:	47e1                	li	a5,24
    3620:	bfe1                	j	35f8 <__clzsi2+0x10>

00003622 <__ctzsi2>:
int
__ctzSI2 (UWtype x)
{
  Wtype ret;

  count_trailing_zeros (ret, x);
    3622:	40a007b3          	neg	a5,a0
    3626:	8d7d                	and	a0,a0,a5
    3628:	67c1                	lui	a5,0x10
    362a:	02f57263          	bgeu	a0,a5,364e <__ctzsi2+0x2c>
    362e:	10053793          	sltiu	a5,a0,256
    3632:	0017c793          	xori	a5,a5,1
    3636:	078e                	slli	a5,a5,0x3
    3638:	6735                	lui	a4,0xd
    363a:	00f55533          	srl	a0,a0,a5
    363e:	b9070713          	addi	a4,a4,-1136 # cb90 <__clz_tab>
    3642:	972a                	add	a4,a4,a0
    3644:	00074503          	lbu	a0,0(a4)
    3648:	17fd                	addi	a5,a5,-1

  return ret;
}
    364a:	953e                	add	a0,a0,a5
    364c:	8082                	ret
  count_trailing_zeros (ret, x);
    364e:	01000737          	lui	a4,0x1000
    3652:	47c1                	li	a5,16
    3654:	fee562e3          	bltu	a0,a4,3638 <__ctzsi2+0x16>
    3658:	47e1                	li	a5,24
    365a:	bff9                	j	3638 <__ctzsi2+0x16>

0000365c <__popcountsi2>:
{
  /* Force table lookup on targets like AVR and RL78 which only
     pretend they have LIBGCC2_UNITS_PER_WORD 4, but actually
     have 1, and other small word targets.  */
#if __SIZEOF_INT__ > 2 && defined (POPCOUNTCST) && __CHAR_BIT__ == 8
  x = x - ((x >> 1) & POPCOUNTCST (0x55));
    365c:	55555737          	lui	a4,0x55555
    3660:	00155793          	srli	a5,a0,0x1
    3664:	55570713          	addi	a4,a4,1365 # 55555555 <_sp+0x55547645>
    3668:	8ff9                	and	a5,a5,a4
  x = (x & POPCOUNTCST (0x33)) + ((x >> 2) & POPCOUNTCST (0x33));
    366a:	33333737          	lui	a4,0x33333
    366e:	33370713          	addi	a4,a4,819 # 33333333 <_sp+0x33325423>
  x = x - ((x >> 1) & POPCOUNTCST (0x55));
    3672:	8d1d                	sub	a0,a0,a5
  x = (x & POPCOUNTCST (0x33)) + ((x >> 2) & POPCOUNTCST (0x33));
    3674:	00e577b3          	and	a5,a0,a4
    3678:	8109                	srli	a0,a0,0x2
    367a:	8d79                	and	a0,a0,a4
    367c:	97aa                	add	a5,a5,a0
  x = (x + (x >> 4)) & POPCOUNTCST (0x0F);
    367e:	0047d513          	srli	a0,a5,0x4
    3682:	953e                	add	a0,a0,a5
    3684:	0f0f17b7          	lui	a5,0xf0f1
    3688:	f0f78793          	addi	a5,a5,-241 # f0f0f0f <_sp+0xf0e2fff>
    368c:	8d7d                	and	a0,a0,a5
  return (x * POPCOUNTCST (0x01)) >> (W_TYPE_SIZE - __CHAR_BIT__);
    368e:	010107b7          	lui	a5,0x1010
    3692:	10178793          	addi	a5,a5,257 # 1010101 <_sp+0x10021f1>
    3696:	02f50533          	mul	a0,a0,a5
  for (i = 0; i < W_TYPE_SIZE; i += 8)
    ret += __popcount_tab[(x >> i) & 0xff];

  return ret;
#endif
}
    369a:	8161                	srli	a0,a0,0x18
    369c:	8082                	ret

0000369e <__paritysi2>:
#endif
#if W_TYPE_SIZE > 32
  x ^= x >> 32;
#endif
#if W_TYPE_SIZE > 16
  x ^= x >> 16;
    369e:	01055793          	srli	a5,a0,0x10
    36a2:	8fa9                	xor	a5,a5,a0
#endif
  x ^= x >> 8;
    36a4:	0087d513          	srli	a0,a5,0x8
    36a8:	8d3d                	xor	a0,a0,a5
  x ^= x >> 4;
    36aa:	00455793          	srli	a5,a0,0x4
    36ae:	8fa9                	xor	a5,a5,a0
  x &= 0xf;
  return (0x6996 >> x) & 1;
    36b0:	651d                	lui	a0,0x7
  x &= 0xf;
    36b2:	8bbd                	andi	a5,a5,15
  return (0x6996 >> x) & 1;
    36b4:	99650513          	addi	a0,a0,-1642 # 6996 <__udivdi3+0x2f18>
    36b8:	40f55533          	sra	a0,a0,a5
}
    36bc:	8905                	andi	a0,a0,1
    36be:	8082                	ret

000036c0 <__bswapsi2>:
	  | (((u) & 0x000000ffu) << 24));
    36c0:	01851713          	slli	a4,a0,0x18
  return ((((u) & 0xff000000u) >> 24)
    36c4:	01855793          	srli	a5,a0,0x18
	  | (((u) & 0x00ff0000u) >>  8)
    36c8:	66c1                	lui	a3,0x10
	  | (((u) & 0x000000ffu) << 24));
    36ca:	8fd9                	or	a5,a5,a4
	  | (((u) & 0x00ff0000u) >>  8)
    36cc:	f0068693          	addi	a3,a3,-256 # ff00 <_sp+0x1ff0>
    36d0:	00855713          	srli	a4,a0,0x8
    36d4:	8f75                	and	a4,a4,a3
	  | (((u) & 0x000000ffu) << 24));
    36d6:	8fd9                	or	a5,a5,a4
	  | (((u) & 0x0000ff00u) <<  8)
    36d8:	0522                	slli	a0,a0,0x8
    36da:	00ff0737          	lui	a4,0xff0
    36de:	8d79                	and	a0,a0,a4
}
    36e0:	8d5d                	or	a0,a0,a5
    36e2:	8082                	ret

000036e4 <__divdi3>:
#endif

#ifdef L_divdi3
DWtype
__divdi3 (DWtype u, DWtype v)
{
    36e4:	832a                	mv	t1,a0
    36e6:	8e2e                	mv	t3,a1
  Wtype c = 0;
    36e8:	4881                	li	a7,0
  DWunion uu = {.ll = u};
  DWunion vv = {.ll = v};
  DWtype w;

  if (uu.s.high < 0)
    36ea:	0005db63          	bgez	a1,3700 <__divdi3+0x1c>
    c = ~c,
    uu.ll = -uu.ll;
    36ee:	00a037b3          	snez	a5,a0
    36f2:	40b00e33          	neg	t3,a1
    36f6:	40fe0e33          	sub	t3,t3,a5
    36fa:	40a00333          	neg	t1,a0
    c = ~c,
    36fe:	58fd                	li	a7,-1
  if (vv.s.high < 0)
    3700:	0006db63          	bgez	a3,3716 <__divdi3+0x32>
    c = ~c,
    vv.ll = -vv.ll;
    3704:	00c037b3          	snez	a5,a2
    3708:	40d006b3          	neg	a3,a3
    c = ~c,
    370c:	fff8c893          	not	a7,a7
    vv.ll = -vv.ll;
    3710:	8e9d                	sub	a3,a3,a5
    3712:	40c00633          	neg	a2,a2
  d0 = dd.s.low;
    3716:	8732                	mv	a4,a2
  n0 = nn.s.low;
    3718:	881a                	mv	a6,t1
  n1 = nn.s.high;
    371a:	87f2                	mv	a5,t3
  if (d1 == 0)
    371c:	20069e63          	bnez	a3,3938 <__divdi3+0x254>
      if (d0 > n1)
    3720:	65b5                	lui	a1,0xd
    3722:	b9058593          	addi	a1,a1,-1136 # cb90 <__clz_tab>
    3726:	0cce7163          	bgeu	t3,a2,37e8 <__divdi3+0x104>
	  count_leading_zeros (bm, d0);
    372a:	66c1                	lui	a3,0x10
    372c:	0ad67763          	bgeu	a2,a3,37da <__divdi3+0xf6>
    3730:	10063693          	sltiu	a3,a2,256
    3734:	0016c693          	xori	a3,a3,1
    3738:	068e                	slli	a3,a3,0x3
    373a:	00d65533          	srl	a0,a2,a3
    373e:	95aa                	add	a1,a1,a0
    3740:	0005c583          	lbu	a1,0(a1)
    3744:	02000513          	li	a0,32
    3748:	96ae                	add	a3,a3,a1
    374a:	40d505b3          	sub	a1,a0,a3
	  if (bm != 0)
    374e:	00d50b63          	beq	a0,a3,3764 <__divdi3+0x80>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
    3752:	00be17b3          	sll	a5,t3,a1
    3756:	00d356b3          	srl	a3,t1,a3
	      d0 = d0 << bm;
    375a:	00b61733          	sll	a4,a2,a1
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
    375e:	8fd5                	or	a5,a5,a3
	      n0 = n0 << bm;
    3760:	00b31833          	sll	a6,t1,a1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
    3764:	01075593          	srli	a1,a4,0x10
    3768:	02b7de33          	divu	t3,a5,a1
    376c:	01071613          	slli	a2,a4,0x10
    3770:	8241                	srli	a2,a2,0x10
    3772:	02b7f7b3          	remu	a5,a5,a1
    3776:	8572                	mv	a0,t3
    3778:	03c60333          	mul	t1,a2,t3
    377c:	01079693          	slli	a3,a5,0x10
    3780:	01085793          	srli	a5,a6,0x10
    3784:	8fd5                	or	a5,a5,a3
    3786:	0067fc63          	bgeu	a5,t1,379e <__divdi3+0xba>
    378a:	97ba                	add	a5,a5,a4
    378c:	fffe0513          	addi	a0,t3,-1
    3790:	00e7e763          	bltu	a5,a4,379e <__divdi3+0xba>
    3794:	0067f563          	bgeu	a5,t1,379e <__divdi3+0xba>
    3798:	ffee0513          	addi	a0,t3,-2
    379c:	97ba                	add	a5,a5,a4
    379e:	406787b3          	sub	a5,a5,t1
    37a2:	02b7d333          	divu	t1,a5,a1
    37a6:	0842                	slli	a6,a6,0x10
    37a8:	01085813          	srli	a6,a6,0x10
    37ac:	02b7f7b3          	remu	a5,a5,a1
    37b0:	026606b3          	mul	a3,a2,t1
    37b4:	07c2                	slli	a5,a5,0x10
    37b6:	00f86833          	or	a6,a6,a5
    37ba:	879a                	mv	a5,t1
    37bc:	00d87b63          	bgeu	a6,a3,37d2 <__divdi3+0xee>
    37c0:	983a                	add	a6,a6,a4
    37c2:	fff30793          	addi	a5,t1,-1
    37c6:	00e86663          	bltu	a6,a4,37d2 <__divdi3+0xee>
    37ca:	00d87463          	bgeu	a6,a3,37d2 <__divdi3+0xee>
    37ce:	ffe30793          	addi	a5,t1,-2
    37d2:	0542                	slli	a0,a0,0x10
    37d4:	8d5d                	or	a0,a0,a5
	      q1 = 0;
    37d6:	4581                	li	a1,0
    37d8:	a84d                	j	388a <__divdi3+0x1a6>
	  count_leading_zeros (bm, d0);
    37da:	01000537          	lui	a0,0x1000
    37de:	46c1                	li	a3,16
    37e0:	f4a66de3          	bltu	a2,a0,373a <__divdi3+0x56>
    37e4:	46e1                	li	a3,24
    37e6:	bf91                	j	373a <__divdi3+0x56>
	  if (d0 == 0)
    37e8:	e211                	bnez	a2,37ec <__divdi3+0x108>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
    37ea:	9002                	ebreak
	  count_leading_zeros (bm, d0);
    37ec:	67c1                	lui	a5,0x10
    37ee:	0af67863          	bgeu	a2,a5,389e <__divdi3+0x1ba>
    37f2:	10063693          	sltiu	a3,a2,256
    37f6:	0016c693          	xori	a3,a3,1
    37fa:	068e                	slli	a3,a3,0x3
    37fc:	00d657b3          	srl	a5,a2,a3
    3800:	95be                	add	a1,a1,a5
    3802:	0005c783          	lbu	a5,0(a1)
    3806:	97b6                	add	a5,a5,a3
    3808:	02000693          	li	a3,32
    380c:	40f685b3          	sub	a1,a3,a5
	  if (bm == 0)
    3810:	08f69e63          	bne	a3,a5,38ac <__divdi3+0x1c8>
	      n1 -= d0;
    3814:	40ce07b3          	sub	a5,t3,a2
	      q1 = 1;
    3818:	4585                	li	a1,1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
    381a:	01075313          	srli	t1,a4,0x10
    381e:	0267deb3          	divu	t4,a5,t1
    3822:	01071613          	slli	a2,a4,0x10
    3826:	8241                	srli	a2,a2,0x10
    3828:	01085693          	srli	a3,a6,0x10
    382c:	0267f7b3          	remu	a5,a5,t1
    3830:	8576                	mv	a0,t4
    3832:	03d60e33          	mul	t3,a2,t4
    3836:	07c2                	slli	a5,a5,0x10
    3838:	8fd5                	or	a5,a5,a3
    383a:	01c7fc63          	bgeu	a5,t3,3852 <__divdi3+0x16e>
    383e:	97ba                	add	a5,a5,a4
    3840:	fffe8513          	addi	a0,t4,-1
    3844:	00e7e763          	bltu	a5,a4,3852 <__divdi3+0x16e>
    3848:	01c7f563          	bgeu	a5,t3,3852 <__divdi3+0x16e>
    384c:	ffee8513          	addi	a0,t4,-2
    3850:	97ba                	add	a5,a5,a4
    3852:	41c787b3          	sub	a5,a5,t3
    3856:	0267de33          	divu	t3,a5,t1
    385a:	0842                	slli	a6,a6,0x10
    385c:	01085813          	srli	a6,a6,0x10
    3860:	0267f7b3          	remu	a5,a5,t1
    3864:	03c606b3          	mul	a3,a2,t3
    3868:	07c2                	slli	a5,a5,0x10
    386a:	00f86833          	or	a6,a6,a5
    386e:	87f2                	mv	a5,t3
    3870:	00d87b63          	bgeu	a6,a3,3886 <__divdi3+0x1a2>
    3874:	983a                	add	a6,a6,a4
    3876:	fffe0793          	addi	a5,t3,-1
    387a:	00e86663          	bltu	a6,a4,3886 <__divdi3+0x1a2>
    387e:	00d87463          	bgeu	a6,a3,3886 <__divdi3+0x1a2>
    3882:	ffee0793          	addi	a5,t3,-2
    3886:	0542                	slli	a0,a0,0x10
    3888:	8d5d                	or	a0,a0,a5

  w = __udivmoddi4 (uu.ll, vv.ll, (UDWtype *) 0);
  if (c)
    388a:	00088963          	beqz	a7,389c <__divdi3+0x1b8>
    w = -w;
    388e:	00a037b3          	snez	a5,a0
    3892:	40b005b3          	neg	a1,a1
    3896:	8d9d                	sub	a1,a1,a5
    3898:	40a00533          	neg	a0,a0

  return w;
}
    389c:	8082                	ret
	  count_leading_zeros (bm, d0);
    389e:	010007b7          	lui	a5,0x1000
    38a2:	46c1                	li	a3,16
    38a4:	f4f66ce3          	bltu	a2,a5,37fc <__divdi3+0x118>
    38a8:	46e1                	li	a3,24
    38aa:	bf89                	j	37fc <__divdi3+0x118>
	      d0 = d0 << bm;
    38ac:	00b61733          	sll	a4,a2,a1
	      n2 = n1 >> b;
    38b0:	00fe56b3          	srl	a3,t3,a5
	      udiv_qrnnd (q1, n1, n2, n1, d0);
    38b4:	01075513          	srli	a0,a4,0x10
	      n1 = (n1 << bm) | (n0 >> b);
    38b8:	00be1e33          	sll	t3,t3,a1
    38bc:	00f357b3          	srl	a5,t1,a5
    38c0:	01c7e7b3          	or	a5,a5,t3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
    38c4:	02a6de33          	divu	t3,a3,a0
    38c8:	01071613          	slli	a2,a4,0x10
    38cc:	8241                	srli	a2,a2,0x10
	      n0 = n0 << bm;
    38ce:	00b31833          	sll	a6,t1,a1
	      udiv_qrnnd (q1, n1, n2, n1, d0);
    38d2:	02a6f6b3          	remu	a3,a3,a0
    38d6:	03c60333          	mul	t1,a2,t3
    38da:	01069593          	slli	a1,a3,0x10
    38de:	0107d693          	srli	a3,a5,0x10
    38e2:	8ecd                	or	a3,a3,a1
    38e4:	85f2                	mv	a1,t3
    38e6:	0066fc63          	bgeu	a3,t1,38fe <__divdi3+0x21a>
    38ea:	96ba                	add	a3,a3,a4
    38ec:	fffe0593          	addi	a1,t3,-1
    38f0:	00e6e763          	bltu	a3,a4,38fe <__divdi3+0x21a>
    38f4:	0066f563          	bgeu	a3,t1,38fe <__divdi3+0x21a>
    38f8:	ffee0593          	addi	a1,t3,-2
    38fc:	96ba                	add	a3,a3,a4
    38fe:	406686b3          	sub	a3,a3,t1
    3902:	02a6d333          	divu	t1,a3,a0
    3906:	07c2                	slli	a5,a5,0x10
    3908:	83c1                	srli	a5,a5,0x10
    390a:	02a6f6b3          	remu	a3,a3,a0
    390e:	02660633          	mul	a2,a2,t1
    3912:	06c2                	slli	a3,a3,0x10
    3914:	8fd5                	or	a5,a5,a3
    3916:	869a                	mv	a3,t1
    3918:	00c7fc63          	bgeu	a5,a2,3930 <__divdi3+0x24c>
    391c:	97ba                	add	a5,a5,a4
    391e:	fff30693          	addi	a3,t1,-1
    3922:	00e7e763          	bltu	a5,a4,3930 <__divdi3+0x24c>
    3926:	00c7f563          	bgeu	a5,a2,3930 <__divdi3+0x24c>
    392a:	ffe30693          	addi	a3,t1,-2
    392e:	97ba                	add	a5,a5,a4
    3930:	05c2                	slli	a1,a1,0x10
    3932:	8f91                	sub	a5,a5,a2
    3934:	8dd5                	or	a1,a1,a3
    3936:	b5d5                	j	381a <__divdi3+0x136>
      if (d1 > n1)
    3938:	14de6063          	bltu	t3,a3,3a78 <__divdi3+0x394>
	  count_leading_zeros (bm, d1);
    393c:	67c1                	lui	a5,0x10
    393e:	02f6fe63          	bgeu	a3,a5,397a <__divdi3+0x296>
    3942:	1006b713          	sltiu	a4,a3,256
    3946:	00174713          	xori	a4,a4,1
    394a:	070e                	slli	a4,a4,0x3
    394c:	67b5                	lui	a5,0xd
    394e:	00e6d5b3          	srl	a1,a3,a4
    3952:	b9078793          	addi	a5,a5,-1136 # cb90 <__clz_tab>
    3956:	97ae                	add	a5,a5,a1
    3958:	0007c783          	lbu	a5,0(a5)
    395c:	97ba                	add	a5,a5,a4
    395e:	02000713          	li	a4,32
    3962:	40f705b3          	sub	a1,a4,a5
	  if (bm == 0)
    3966:	02f71163          	bne	a4,a5,3988 <__divdi3+0x2a4>
		  q0 = 1;
    396a:	4505                	li	a0,1
	      if (n1 > d1 || n0 >= d0)
    396c:	f1c6efe3          	bltu	a3,t3,388a <__divdi3+0x1a6>
    3970:	00c33533          	sltu	a0,t1,a2
    3974:	00154513          	xori	a0,a0,1
    3978:	bf09                	j	388a <__divdi3+0x1a6>
	  count_leading_zeros (bm, d1);
    397a:	010007b7          	lui	a5,0x1000
    397e:	4741                	li	a4,16
    3980:	fcf6e6e3          	bltu	a3,a5,394c <__divdi3+0x268>
    3984:	4761                	li	a4,24
    3986:	b7d9                	j	394c <__divdi3+0x268>
	      d1 = (d1 << bm) | (d0 >> b);
    3988:	00f65733          	srl	a4,a2,a5
    398c:	00b696b3          	sll	a3,a3,a1
    3990:	8ed9                	or	a3,a3,a4
	      n2 = n1 >> b;
    3992:	00fe5733          	srl	a4,t3,a5
	      n1 = (n1 << bm) | (n0 >> b);
    3996:	00be1e33          	sll	t3,t3,a1
    399a:	00f357b3          	srl	a5,t1,a5
    399e:	01c7e7b3          	or	a5,a5,t3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    39a2:	0106de13          	srli	t3,a3,0x10
    39a6:	03c75f33          	divu	t5,a4,t3
    39aa:	01069813          	slli	a6,a3,0x10
    39ae:	01085813          	srli	a6,a6,0x10
	      d0 = d0 << bm;
    39b2:	00b61633          	sll	a2,a2,a1
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    39b6:	03c77733          	remu	a4,a4,t3
    39ba:	03e80eb3          	mul	t4,a6,t5
    39be:	01071513          	slli	a0,a4,0x10
    39c2:	0107d713          	srli	a4,a5,0x10
    39c6:	8f49                	or	a4,a4,a0
    39c8:	857a                	mv	a0,t5
    39ca:	01d77c63          	bgeu	a4,t4,39e2 <__divdi3+0x2fe>
    39ce:	9736                	add	a4,a4,a3
    39d0:	ffff0513          	addi	a0,t5,-1
    39d4:	00d76763          	bltu	a4,a3,39e2 <__divdi3+0x2fe>
    39d8:	01d77563          	bgeu	a4,t4,39e2 <__divdi3+0x2fe>
    39dc:	ffef0513          	addi	a0,t5,-2
    39e0:	9736                	add	a4,a4,a3
    39e2:	41d70733          	sub	a4,a4,t4
    39e6:	03c75eb3          	divu	t4,a4,t3
    39ea:	07c2                	slli	a5,a5,0x10
    39ec:	83c1                	srli	a5,a5,0x10
    39ee:	03c77733          	remu	a4,a4,t3
    39f2:	03d80833          	mul	a6,a6,t4
    39f6:	0742                	slli	a4,a4,0x10
    39f8:	8fd9                	or	a5,a5,a4
    39fa:	8776                	mv	a4,t4
    39fc:	0107fc63          	bgeu	a5,a6,3a14 <__divdi3+0x330>
    3a00:	97b6                	add	a5,a5,a3
    3a02:	fffe8713          	addi	a4,t4,-1
    3a06:	00d7e763          	bltu	a5,a3,3a14 <__divdi3+0x330>
    3a0a:	0107f563          	bgeu	a5,a6,3a14 <__divdi3+0x330>
    3a0e:	ffee8713          	addi	a4,t4,-2
    3a12:	97b6                	add	a5,a5,a3
    3a14:	0542                	slli	a0,a0,0x10
	      umul_ppmm (m1, m0, q0, d0);
    3a16:	6ec1                	lui	t4,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    3a18:	8d59                	or	a0,a0,a4
	      umul_ppmm (m1, m0, q0, d0);
    3a1a:	fffe8693          	addi	a3,t4,-1 # ffff <_sp+0x20ef>
    3a1e:	00d57733          	and	a4,a0,a3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    3a22:	410787b3          	sub	a5,a5,a6
	      umul_ppmm (m1, m0, q0, d0);
    3a26:	8ef1                	and	a3,a3,a2
    3a28:	01055813          	srli	a6,a0,0x10
    3a2c:	8241                	srli	a2,a2,0x10
    3a2e:	02d70e33          	mul	t3,a4,a3
    3a32:	02d806b3          	mul	a3,a6,a3
    3a36:	02c70733          	mul	a4,a4,a2
    3a3a:	02c80833          	mul	a6,a6,a2
    3a3e:	00d70633          	add	a2,a4,a3
    3a42:	010e5713          	srli	a4,t3,0x10
    3a46:	9732                	add	a4,a4,a2
    3a48:	00d77363          	bgeu	a4,a3,3a4e <__divdi3+0x36a>
    3a4c:	9876                	add	a6,a6,t4
    3a4e:	01075693          	srli	a3,a4,0x10
    3a52:	96c2                	add	a3,a3,a6
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
    3a54:	02d7e063          	bltu	a5,a3,3a74 <__divdi3+0x390>
    3a58:	d6d79fe3          	bne	a5,a3,37d6 <__divdi3+0xf2>
	      umul_ppmm (m1, m0, q0, d0);
    3a5c:	67c1                	lui	a5,0x10
    3a5e:	17fd                	addi	a5,a5,-1
    3a60:	8f7d                	and	a4,a4,a5
    3a62:	0742                	slli	a4,a4,0x10
    3a64:	00fe7e33          	and	t3,t3,a5
	      n0 = n0 << bm;
    3a68:	00b31333          	sll	t1,t1,a1
	      umul_ppmm (m1, m0, q0, d0);
    3a6c:	9772                	add	a4,a4,t3
	      q1 = 0;
    3a6e:	4581                	li	a1,0
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
    3a70:	e0e37de3          	bgeu	t1,a4,388a <__divdi3+0x1a6>
		  q0--;
    3a74:	157d                	addi	a0,a0,-1
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
    3a76:	b385                	j	37d6 <__divdi3+0xf2>
	  q1 = 0;
    3a78:	4581                	li	a1,0
	  q0 = 0;
    3a7a:	4501                	li	a0,0
    3a7c:	b539                	j	388a <__divdi3+0x1a6>

00003a7e <__udivdi3>:
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
    3a7e:	832a                	mv	t1,a0
    3a80:	88ae                	mv	a7,a1
  d0 = dd.s.low;
    3a82:	8732                	mv	a4,a2
  n0 = nn.s.low;
    3a84:	882a                	mv	a6,a0
  n1 = nn.s.high;
    3a86:	87ae                	mv	a5,a1
  if (d1 == 0)
    3a88:	20069563          	bnez	a3,3c92 <__udivdi3+0x214>
      if (d0 > n1)
    3a8c:	65b5                	lui	a1,0xd
    3a8e:	b9058593          	addi	a1,a1,-1136 # cb90 <__clz_tab>
    3a92:	0cc8f163          	bgeu	a7,a2,3b54 <__udivdi3+0xd6>
	  count_leading_zeros (bm, d0);
    3a96:	66c1                	lui	a3,0x10
    3a98:	0ad67763          	bgeu	a2,a3,3b46 <__udivdi3+0xc8>
    3a9c:	10063693          	sltiu	a3,a2,256
    3aa0:	0016c693          	xori	a3,a3,1
    3aa4:	068e                	slli	a3,a3,0x3
    3aa6:	00d65533          	srl	a0,a2,a3
    3aaa:	95aa                	add	a1,a1,a0
    3aac:	0005c583          	lbu	a1,0(a1)
    3ab0:	02000513          	li	a0,32
    3ab4:	96ae                	add	a3,a3,a1
    3ab6:	40d505b3          	sub	a1,a0,a3
	  if (bm != 0)
    3aba:	00d50b63          	beq	a0,a3,3ad0 <__udivdi3+0x52>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
    3abe:	00b897b3          	sll	a5,a7,a1
    3ac2:	00d356b3          	srl	a3,t1,a3
	      d0 = d0 << bm;
    3ac6:	00b61733          	sll	a4,a2,a1
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
    3aca:	8fd5                	or	a5,a5,a3
	      n0 = n0 << bm;
    3acc:	00b31833          	sll	a6,t1,a1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
    3ad0:	01075593          	srli	a1,a4,0x10
    3ad4:	02b7d333          	divu	t1,a5,a1
    3ad8:	01071613          	slli	a2,a4,0x10
    3adc:	8241                	srli	a2,a2,0x10
    3ade:	02b7f7b3          	remu	a5,a5,a1
    3ae2:	851a                	mv	a0,t1
    3ae4:	026608b3          	mul	a7,a2,t1
    3ae8:	01079693          	slli	a3,a5,0x10
    3aec:	01085793          	srli	a5,a6,0x10
    3af0:	8fd5                	or	a5,a5,a3
    3af2:	0117fc63          	bgeu	a5,a7,3b0a <__udivdi3+0x8c>
    3af6:	97ba                	add	a5,a5,a4
    3af8:	fff30513          	addi	a0,t1,-1
    3afc:	00e7e763          	bltu	a5,a4,3b0a <__udivdi3+0x8c>
    3b00:	0117f563          	bgeu	a5,a7,3b0a <__udivdi3+0x8c>
    3b04:	ffe30513          	addi	a0,t1,-2
    3b08:	97ba                	add	a5,a5,a4
    3b0a:	411787b3          	sub	a5,a5,a7
    3b0e:	02b7d8b3          	divu	a7,a5,a1
    3b12:	0842                	slli	a6,a6,0x10
    3b14:	01085813          	srli	a6,a6,0x10
    3b18:	02b7f7b3          	remu	a5,a5,a1
    3b1c:	031606b3          	mul	a3,a2,a7
    3b20:	07c2                	slli	a5,a5,0x10
    3b22:	00f86833          	or	a6,a6,a5
    3b26:	87c6                	mv	a5,a7
    3b28:	00d87b63          	bgeu	a6,a3,3b3e <__udivdi3+0xc0>
    3b2c:	983a                	add	a6,a6,a4
    3b2e:	fff88793          	addi	a5,a7,-1
    3b32:	00e86663          	bltu	a6,a4,3b3e <__udivdi3+0xc0>
    3b36:	00d87463          	bgeu	a6,a3,3b3e <__udivdi3+0xc0>
    3b3a:	ffe88793          	addi	a5,a7,-2
    3b3e:	0542                	slli	a0,a0,0x10
    3b40:	8d5d                	or	a0,a0,a5
	      q1 = 0;
    3b42:	4581                	li	a1,0
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
    3b44:	8082                	ret
	  count_leading_zeros (bm, d0);
    3b46:	01000537          	lui	a0,0x1000
    3b4a:	46c1                	li	a3,16
    3b4c:	f4a66de3          	bltu	a2,a0,3aa6 <__udivdi3+0x28>
    3b50:	46e1                	li	a3,24
    3b52:	bf91                	j	3aa6 <__udivdi3+0x28>
	  if (d0 == 0)
    3b54:	e211                	bnez	a2,3b58 <__udivdi3+0xda>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
    3b56:	9002                	ebreak
	  count_leading_zeros (bm, d0);
    3b58:	67c1                	lui	a5,0x10
    3b5a:	08f67f63          	bgeu	a2,a5,3bf8 <__udivdi3+0x17a>
    3b5e:	10063693          	sltiu	a3,a2,256
    3b62:	0016c693          	xori	a3,a3,1
    3b66:	068e                	slli	a3,a3,0x3
    3b68:	00d657b3          	srl	a5,a2,a3
    3b6c:	95be                	add	a1,a1,a5
    3b6e:	0005c783          	lbu	a5,0(a1)
    3b72:	97b6                	add	a5,a5,a3
    3b74:	02000693          	li	a3,32
    3b78:	40f685b3          	sub	a1,a3,a5
	  if (bm == 0)
    3b7c:	08f69563          	bne	a3,a5,3c06 <__udivdi3+0x188>
	      n1 -= d0;
    3b80:	40c887b3          	sub	a5,a7,a2
	      q1 = 1;
    3b84:	4585                	li	a1,1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
    3b86:	01075893          	srli	a7,a4,0x10
    3b8a:	0317de33          	divu	t3,a5,a7
    3b8e:	01071613          	slli	a2,a4,0x10
    3b92:	8241                	srli	a2,a2,0x10
    3b94:	01085693          	srli	a3,a6,0x10
    3b98:	0317f7b3          	remu	a5,a5,a7
    3b9c:	8572                	mv	a0,t3
    3b9e:	03c60333          	mul	t1,a2,t3
    3ba2:	07c2                	slli	a5,a5,0x10
    3ba4:	8fd5                	or	a5,a5,a3
    3ba6:	0067fc63          	bgeu	a5,t1,3bbe <__udivdi3+0x140>
    3baa:	97ba                	add	a5,a5,a4
    3bac:	fffe0513          	addi	a0,t3,-1
    3bb0:	00e7e763          	bltu	a5,a4,3bbe <__udivdi3+0x140>
    3bb4:	0067f563          	bgeu	a5,t1,3bbe <__udivdi3+0x140>
    3bb8:	ffee0513          	addi	a0,t3,-2
    3bbc:	97ba                	add	a5,a5,a4
    3bbe:	406787b3          	sub	a5,a5,t1
    3bc2:	0317d333          	divu	t1,a5,a7
    3bc6:	0842                	slli	a6,a6,0x10
    3bc8:	01085813          	srli	a6,a6,0x10
    3bcc:	0317f7b3          	remu	a5,a5,a7
    3bd0:	026606b3          	mul	a3,a2,t1
    3bd4:	07c2                	slli	a5,a5,0x10
    3bd6:	00f86833          	or	a6,a6,a5
    3bda:	879a                	mv	a5,t1
    3bdc:	00d87b63          	bgeu	a6,a3,3bf2 <__udivdi3+0x174>
    3be0:	983a                	add	a6,a6,a4
    3be2:	fff30793          	addi	a5,t1,-1
    3be6:	00e86663          	bltu	a6,a4,3bf2 <__udivdi3+0x174>
    3bea:	00d87463          	bgeu	a6,a3,3bf2 <__udivdi3+0x174>
    3bee:	ffe30793          	addi	a5,t1,-2
    3bf2:	0542                	slli	a0,a0,0x10
    3bf4:	8d5d                	or	a0,a0,a5
    3bf6:	8082                	ret
	  count_leading_zeros (bm, d0);
    3bf8:	010007b7          	lui	a5,0x1000
    3bfc:	46c1                	li	a3,16
    3bfe:	f6f665e3          	bltu	a2,a5,3b68 <__udivdi3+0xea>
    3c02:	46e1                	li	a3,24
    3c04:	b795                	j	3b68 <__udivdi3+0xea>
	      d0 = d0 << bm;
    3c06:	00b61733          	sll	a4,a2,a1
	      n2 = n1 >> b;
    3c0a:	00f8d6b3          	srl	a3,a7,a5
	      udiv_qrnnd (q1, n1, n2, n1, d0);
    3c0e:	01075513          	srli	a0,a4,0x10
	      n1 = (n1 << bm) | (n0 >> b);
    3c12:	00f357b3          	srl	a5,t1,a5
	      n0 = n0 << bm;
    3c16:	00b31833          	sll	a6,t1,a1
	      udiv_qrnnd (q1, n1, n2, n1, d0);
    3c1a:	02a6d333          	divu	t1,a3,a0
    3c1e:	01071613          	slli	a2,a4,0x10
	      n1 = (n1 << bm) | (n0 >> b);
    3c22:	00b898b3          	sll	a7,a7,a1
	      udiv_qrnnd (q1, n1, n2, n1, d0);
    3c26:	8241                	srli	a2,a2,0x10
	      n1 = (n1 << bm) | (n0 >> b);
    3c28:	0117e7b3          	or	a5,a5,a7
	      udiv_qrnnd (q1, n1, n2, n1, d0);
    3c2c:	02a6f6b3          	remu	a3,a3,a0
    3c30:	026608b3          	mul	a7,a2,t1
    3c34:	01069593          	slli	a1,a3,0x10
    3c38:	0107d693          	srli	a3,a5,0x10
    3c3c:	8ecd                	or	a3,a3,a1
    3c3e:	859a                	mv	a1,t1
    3c40:	0116fc63          	bgeu	a3,a7,3c58 <__udivdi3+0x1da>
    3c44:	96ba                	add	a3,a3,a4
    3c46:	fff30593          	addi	a1,t1,-1
    3c4a:	00e6e763          	bltu	a3,a4,3c58 <__udivdi3+0x1da>
    3c4e:	0116f563          	bgeu	a3,a7,3c58 <__udivdi3+0x1da>
    3c52:	ffe30593          	addi	a1,t1,-2
    3c56:	96ba                	add	a3,a3,a4
    3c58:	411686b3          	sub	a3,a3,a7
    3c5c:	02a6d8b3          	divu	a7,a3,a0
    3c60:	07c2                	slli	a5,a5,0x10
    3c62:	83c1                	srli	a5,a5,0x10
    3c64:	02a6f6b3          	remu	a3,a3,a0
    3c68:	03160633          	mul	a2,a2,a7
    3c6c:	06c2                	slli	a3,a3,0x10
    3c6e:	8fd5                	or	a5,a5,a3
    3c70:	86c6                	mv	a3,a7
    3c72:	00c7fc63          	bgeu	a5,a2,3c8a <__udivdi3+0x20c>
    3c76:	97ba                	add	a5,a5,a4
    3c78:	fff88693          	addi	a3,a7,-1
    3c7c:	00e7e763          	bltu	a5,a4,3c8a <__udivdi3+0x20c>
    3c80:	00c7f563          	bgeu	a5,a2,3c8a <__udivdi3+0x20c>
    3c84:	ffe88693          	addi	a3,a7,-2
    3c88:	97ba                	add	a5,a5,a4
    3c8a:	05c2                	slli	a1,a1,0x10
    3c8c:	8f91                	sub	a5,a5,a2
    3c8e:	8dd5                	or	a1,a1,a3
    3c90:	bddd                	j	3b86 <__udivdi3+0x108>
      if (d1 > n1)
    3c92:	14d5e063          	bltu	a1,a3,3dd2 <__udivdi3+0x354>
	  count_leading_zeros (bm, d1);
    3c96:	67c1                	lui	a5,0x10
    3c98:	02f6fe63          	bgeu	a3,a5,3cd4 <__udivdi3+0x256>
    3c9c:	1006b713          	sltiu	a4,a3,256
    3ca0:	00174713          	xori	a4,a4,1
    3ca4:	070e                	slli	a4,a4,0x3
    3ca6:	67b5                	lui	a5,0xd
    3ca8:	00e6d5b3          	srl	a1,a3,a4
    3cac:	b9078793          	addi	a5,a5,-1136 # cb90 <__clz_tab>
    3cb0:	97ae                	add	a5,a5,a1
    3cb2:	0007c783          	lbu	a5,0(a5)
    3cb6:	97ba                	add	a5,a5,a4
    3cb8:	02000713          	li	a4,32
    3cbc:	40f705b3          	sub	a1,a4,a5
	  if (bm == 0)
    3cc0:	02f71163          	bne	a4,a5,3ce2 <__udivdi3+0x264>
		  q0 = 1;
    3cc4:	4505                	li	a0,1
	      if (n1 > d1 || n0 >= d0)
    3cc6:	e716efe3          	bltu	a3,a7,3b44 <__udivdi3+0xc6>
    3cca:	00c33533          	sltu	a0,t1,a2
    3cce:	00154513          	xori	a0,a0,1
    3cd2:	8082                	ret
	  count_leading_zeros (bm, d1);
    3cd4:	010007b7          	lui	a5,0x1000
    3cd8:	4741                	li	a4,16
    3cda:	fcf6e6e3          	bltu	a3,a5,3ca6 <__udivdi3+0x228>
    3cde:	4761                	li	a4,24
    3ce0:	b7d9                	j	3ca6 <__udivdi3+0x228>
	      d1 = (d1 << bm) | (d0 >> b);
    3ce2:	00f65733          	srl	a4,a2,a5
    3ce6:	00b696b3          	sll	a3,a3,a1
    3cea:	8ed9                	or	a3,a3,a4
	      n2 = n1 >> b;
    3cec:	00f8d733          	srl	a4,a7,a5
	      n1 = (n1 << bm) | (n0 >> b);
    3cf0:	00b898b3          	sll	a7,a7,a1
    3cf4:	00f357b3          	srl	a5,t1,a5
    3cf8:	0117e7b3          	or	a5,a5,a7
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    3cfc:	0106d893          	srli	a7,a3,0x10
    3d00:	03175eb3          	divu	t4,a4,a7
    3d04:	01069813          	slli	a6,a3,0x10
    3d08:	01085813          	srli	a6,a6,0x10
	      d0 = d0 << bm;
    3d0c:	00b61633          	sll	a2,a2,a1
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    3d10:	03177733          	remu	a4,a4,a7
    3d14:	03d80e33          	mul	t3,a6,t4
    3d18:	01071513          	slli	a0,a4,0x10
    3d1c:	0107d713          	srli	a4,a5,0x10
    3d20:	8f49                	or	a4,a4,a0
    3d22:	8576                	mv	a0,t4
    3d24:	01c77c63          	bgeu	a4,t3,3d3c <__udivdi3+0x2be>
    3d28:	9736                	add	a4,a4,a3
    3d2a:	fffe8513          	addi	a0,t4,-1
    3d2e:	00d76763          	bltu	a4,a3,3d3c <__udivdi3+0x2be>
    3d32:	01c77563          	bgeu	a4,t3,3d3c <__udivdi3+0x2be>
    3d36:	ffee8513          	addi	a0,t4,-2
    3d3a:	9736                	add	a4,a4,a3
    3d3c:	41c70733          	sub	a4,a4,t3
    3d40:	03175e33          	divu	t3,a4,a7
    3d44:	07c2                	slli	a5,a5,0x10
    3d46:	83c1                	srli	a5,a5,0x10
    3d48:	03177733          	remu	a4,a4,a7
    3d4c:	03c80833          	mul	a6,a6,t3
    3d50:	0742                	slli	a4,a4,0x10
    3d52:	8fd9                	or	a5,a5,a4
    3d54:	8772                	mv	a4,t3
    3d56:	0107fc63          	bgeu	a5,a6,3d6e <__udivdi3+0x2f0>
    3d5a:	97b6                	add	a5,a5,a3
    3d5c:	fffe0713          	addi	a4,t3,-1
    3d60:	00d7e763          	bltu	a5,a3,3d6e <__udivdi3+0x2f0>
    3d64:	0107f563          	bgeu	a5,a6,3d6e <__udivdi3+0x2f0>
    3d68:	ffee0713          	addi	a4,t3,-2
    3d6c:	97b6                	add	a5,a5,a3
    3d6e:	0542                	slli	a0,a0,0x10
	      umul_ppmm (m1, m0, q0, d0);
    3d70:	6e41                	lui	t3,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    3d72:	8d59                	or	a0,a0,a4
	      umul_ppmm (m1, m0, q0, d0);
    3d74:	fffe0693          	addi	a3,t3,-1 # ffff <_sp+0x20ef>
    3d78:	00d57733          	and	a4,a0,a3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
    3d7c:	410787b3          	sub	a5,a5,a6
	      umul_ppmm (m1, m0, q0, d0);
    3d80:	8ef1                	and	a3,a3,a2
    3d82:	01055813          	srli	a6,a0,0x10
    3d86:	8241                	srli	a2,a2,0x10
    3d88:	02d708b3          	mul	a7,a4,a3
    3d8c:	02d806b3          	mul	a3,a6,a3
    3d90:	02c70733          	mul	a4,a4,a2
    3d94:	02c80833          	mul	a6,a6,a2
    3d98:	00d70633          	add	a2,a4,a3
    3d9c:	0108d713          	srli	a4,a7,0x10
    3da0:	9732                	add	a4,a4,a2
    3da2:	00d77363          	bgeu	a4,a3,3da8 <__udivdi3+0x32a>
    3da6:	9872                	add	a6,a6,t3
    3da8:	01075693          	srli	a3,a4,0x10
    3dac:	96c2                	add	a3,a3,a6
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
    3dae:	02d7e063          	bltu	a5,a3,3dce <__udivdi3+0x350>
    3db2:	d8d798e3          	bne	a5,a3,3b42 <__udivdi3+0xc4>
	      umul_ppmm (m1, m0, q0, d0);
    3db6:	67c1                	lui	a5,0x10
    3db8:	17fd                	addi	a5,a5,-1
    3dba:	8f7d                	and	a4,a4,a5
    3dbc:	0742                	slli	a4,a4,0x10
    3dbe:	00f8f8b3          	and	a7,a7,a5
	      n0 = n0 << bm;
    3dc2:	00b31333          	sll	t1,t1,a1
	      umul_ppmm (m1, m0, q0, d0);
    3dc6:	9746                	add	a4,a4,a7
	      q1 = 0;
    3dc8:	4581                	li	a1,0
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
    3dca:	d6e37de3          	bgeu	t1,a4,3b44 <__udivdi3+0xc6>
		  q0--;
    3dce:	157d                	addi	a0,a0,-1
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
    3dd0:	bb8d                	j	3b42 <__udivdi3+0xc4>
	  q1 = 0;
    3dd2:	4581                	li	a1,0
	  q0 = 0;
    3dd4:	4501                	li	a0,0
    3dd6:	8082                	ret
